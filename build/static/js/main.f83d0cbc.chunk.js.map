{"version":3,"sources":["utils.js","umap.worker.js","actions.js","distance.worker.js","focalLayout.worker.js","initialLayout.worker.js","reducers.js","initialState.js","components/AppNav.js","components/NodeRep.js","components/NodeLayers.js","components/GraphLayout.js","components/InitialLayoutView.js","components/FocalLayoutView.js","components/ColorLegend.js","components/SettingsView.js","components/EmbeddingsView.js","components/DetailView.js","components/Brush.js","components/Histogram.js","components/NodeAttrView.js","components/HighlightControl.js","components/FocusControl.js","components/ScatterHistogram.js","components/NodePairList.js","components/DistanceView.js","components/NeighborLatentMap.js","components/SVGdefs.js","components/App.js","components/DatasetList.js","components/Upload.js","serviceWorker.js","index.js"],"names":["countNodesByType","nodes","counts","n","hasOwnProperty","type","Object","keys","map","t","i","id","name","count","populateNodeTypeIndex","nodeTypes","mapping","nt","typeId","aggregateBinaryFeatures","features","highlightNodes","computeMapping","m","length","cnts","Array","fill","featToNid","handleFeature","nid","f","push","nodeId","compressFeatureValues","values","maxNumStrips","sort","sortedVal","slice","a","b","r","Math","ceil","compValues","j","max","coordsRescale","umapRes","w","h","paddings","coords","umap","ebp","edgeBundlePoints","xArr","c","x","yArr","y","xExtent","extent","yExtent","xScale","scaleLinear","domain","range","left","right","yScale","top","bottom","d","e","e1","getNeighborDistance","mask1","mask2","metric","xor","cardinality","intersection","and","union","or","sim2dist","getCosineDistance","u","v","p","magU","magV","pow","mag","sqrt","getEuclideanDistance","s","labScale","getNodeEmbeddingColor","lab","formatHex","isPointInBox","box","offX","offY","width","height","getSelectedNeighbors","selectedNodes","neighborMasks","hops","isNodeSelected","isNodeSelectedNeighbor","neighArr","gid","g","nodeIdx","curNeigh","toArray","neighIdx","min","parseInt","isNodeBrushable","nodeData","highlightNodeType","highlightNodeLabel","isWrong","k","indexOf","pl","tl","Worker_fn","Worker","__webpack_public_path__","distanceWorker","Comlink","focalLayoutWorkerBeforeWrap","focalLayoutWorker","initialLayoutWebWorker","initalLayoutWorker","umapWorkerPool","lodashRange","UmapWorker","ACTION_TYPES","FETCH_DATA_PENDING","FETCH_DATA_SUCCESS","COMPUTE_INIT_LAYOUT_DONE","FETCH_DATA_ERROR","COMPUTE_DISTANCES_PENDING","COMPUTE_DISTANCES_DONE","HIGHLIGHT_NODES","HIGHLIGHT_NODE_PAIRS","HOVER_NODE","CHANGE_SELECTED_NODE_TYPE","SELECT_NODES","SELECT_NODES_PENDING","SELECT_NODES_DONE","SELECT_NODE_PAIR","CHANGE_PARAM","CHANGE_FOCAL_PARAM_PENDING","CHANGE_FOCAL_PARAM_DONE","CHANGE_HOPS","LAYOUT_TICK","CHANGE_EDGE_TYPE_STATE","TOGGLE_HIGHLIGHT_NODES_ATTR","SEARCH_NODES","CHANGE_SCATTERPLOT_FORM","ADD_DISTANCE_SCATTERPLOT","fetchGraphData","datasetId","dispatch","getState","where","console","log","fetch","then","json","graph","text","csvParseRows","emb","parseFloat","neighborPos","neighborBinning","emb2d","catch","attrs","predRes","initialLayout","distances","state","neighborDistanceMetric","param","numBins","spec","scatterHist","Number","bs","fromHexString","neighborMasksByHop","initializeState","edges","toString","data","terminate","computeForceLayoutWithD3","padding","layoutRes","computeInitLayoutDone","sparseFeatures","denseFeatures","featureDistMax","error","computeDistancesDone","distData","idx","isSpecial","nodeIndices","brushedArea","fromView","which","highlightNodePairs","isTopoVsLatent","brushedPairs","showTopkUnseen","hoverNode","fromFeature","focalLayoutIDcounter","selectNodes","mode","targetNodes","targetGroupIdx","newSel","nondup","filter","concat","isHighlighted","splice","neighRes","curLayoutID","selectNodesPending","distGrpIdx","computeDistances","callFocalLayoutFunc","selectNodesDone","selectNodePair","node1","node2","focalGraph","layout","computeKHopLayout","useGlobalMask","nodeSize","useEdgeBundling","computeFocalLayoutWithCola","computeSpaceFillingCurveLayout","computeFocalLayoutWithD3","layoutId","changeParam","value","inverse","arrayIdx","changeFocalParam","focalLayout","changeFocalParamPending","changeFocalParamDone","performEdgeBundling","remainingEdges","runningMsg","changeHops","searchNodes","label","addDistanceScatterplot","form","scatterplotForm","displaySpecial","nodePairs","changeScatterplotForm","field","focalNodes","startTime","Date","taskQ","sum","allComp","reduce","cur","arr","runUMAP","Promise","all","embs","embeddings","endTime","getTime","computeFocalLayoutWithUMAP","getNeighbors","edgeDict","incTargets","hash","tar","getEdgesWithinGroup","nodeHash","id2struct","id2","source","target","eid","summarizeNodeAttrs","attrMeta","included","res","countValues","nodeType","thresCnt","bins","binGen","nice","d3bin","thresholds","ticks","computeBoundingBox","xMin","xMax","yMin","yMax","setNodeColors","draft","colorBy","nodeColors","latent","posColor","numNodeClasses","scaleOrdinal","schemeTableau10","color","colorAttr","nodeAttrs","display","attrDomain","x0","x1","leftMargin","scaleSequential","interpolateGreens","colorScale","findFocalGroups","g1","g2","clearHighlights","nodeFilter","searchShown","highlightedNodes","highlightedEdges","featureAgg","highlighted","buildQT","layoutData","qt","Quadtree","insert","getSpecialDistanceTitle","formData","userInterests","connectivity","linkPrediction","join","reducers","produce","action","neiRes","fAggCntData","fAggBlock","fidMapping","loaded","trueLabels","predLabels","trueAllowEdges","falseAllowEdges","processPredictionResults","hasLinkPredictions","isLinkPrediction","datasetName","numNodes","numEdges","assign","running","active","numFeatures","stripMapping","numStrips","_","start","getCompressFeatureMapping","feature","title","maxCnts","compressedCnts","scale","interpolateGreys","mapColorToNodeType","layoutMin","layoutMax","widthMax","heightMax","paddingsMax","numAttrs","numPairs","distSample","distEdge","src","featureScale","isComputing","show","whichAttr","attr","whichRow","row","cellIds","fid","displayId","hopsHighlight","nodePairFilter","highlightedNodePairs","unseenDict","trueUnseenEdgesSorted","unseenTopK","hoveredNodes","hoveredNodesAndNeighbors","hoveredEdges","hovered","isInteger","hopsHover","collapsed","neighGrp","focalBBox","diffCnts","c1","abs","diffMax","diffCompressedCnts","diffFeatToNid","ftn1","ftn2","paramPath","split","lastParam","simulation","converged","tick","group","groups","_groups","bounds","simulationTickNumber","searchLabel","searchId","l","toLowerCase","includes","temp","g0","h1","h2","h3","allConn","allUser","allPred","assert","id1","pairs","filterPairsByFormCondition","centralNodeType","neighborIntersections","maxSample","hideHighlightView","bounded","showSettings","maxWindow","showEdges","neighborLatentMap","isOpen","hop","useLinearScale","activeDistanceTab","paddingTop","paddingBottom","gapBetweenHop","gapBetweenFocal","edgeType","neighborMarkerMaxHeight","innerRingNodeGap","outerRingNodeGap","minRingGap","cellSize","gap","intersectionPlot","margins","topLabelHeight","dotSize","dotMargin","verticalMargin","cardScaleRange","plotHorizontalMargin","adjacencyMatrix","rowHeight","colWidth","histogramAreaHeight","histogramHeight","labelHeight","labelAreaSize","labelSize","countAreaSize","countBarHeight","histogram","partialHistogram","histHeight","histWidth","scatterHeight","scatterWidth","tickLabelGap","legendWidth","gridBinSize","cellGap","stripMaxWidth","stripWidth","stripHeight","AppNav","stats","Navbar","expand","Brand","href","alt","className","Toggle","aria-controls","Collapse","Nav","Item","to","Text","NodeRep","radius","style","events","sides","numPoints","innerRadius","outerRadius","FocusLayer","memo","focalGroups","useStroke","listening","strokeEnabled","opacity","fontSize","stroke","strokeWidth","fillEnabled","gIdx","HighlightLayer","this","props","points","tension","PureComponent","HoverLayer","PI","initState","mouseDown","startPoint","endPoint","GraphLayout","stageRef","React","createRef","candidates","retrieve","mousePos","current","getPointerPosition","nextState","setState","on","curPos","_getBrushedArea","off","callHighlightNodes","p1","p2","minX","minY","canvasW","canvasH","baseNodeColors","Consumer","store","ref","onMouseDown","_onMouseDown","bind","ColorTiles","BaseLayer","useStrokeForFocal","Component","mapDispatchToProps","bindActionCreators","connect","debouncedHover","useCallback","debounce","hitStrokeWidth","onMouseOver","onMouseOut","onClick","isArray","floor","log10","num","tileArr","ComputingSpinner","margin","Spinner","animation","role","size","marginLeft","SettingModal","params","Modal","centered","onHide","Header","closeButton","Title","Body","Form","Group","Check","custom","checked","onChange","hasFocalNodes","focalAlg","cursor","OverlayTrigger","placement","overlay","Tooltip","icon","faQuestionCircle","faWrench","ColorLegend","cn","numFormat","colorMin","colorMid","colorMax","marginRight","background","SettingsView","colorByNaming","correctness","nodeLabelNaming","correct","wrong","targets","labelId","preventDefault","FormData","fromEntries","entries","isNaN","numberFormat","useAttrColors","d3Format","hoverNodeType","Dropdown","onSelect","variant","Menu","eventKey","Divider","backgroundColor","hoverNodeLabel","ButtonGroup","Button","marginTop","faCaretDown","faCaretRight","inline","onSubmit","callSearch","Control","placeholder","EmbeddingsView","Label","numDim","layouts","renderForm","faExpandAlt","DetailView","useId","Brush","boxRef","pageX","pageY","mouseMoveFunc","_onMouseMove","mouseUpFunc","_onMouseUp","_calcBrushedArea","window","document","addEventListener","removeEventListener","isRange","brushedFunc","rect","getBoundingClientRect","scrollX","scrollY","Histogram","xDomain","xLabel","yLabel","hVal","brushedRange","yScaleMax","xTicks","xFormat","tickFormat","numTicks","yTicks","yFormat","topMargin","svgWidth","svgHeight","transform","y1","x2","y2","markerEnd","textAnchor","xVal1","invert","xVal2","fillOpacity","FeatureMatrix","hoverFunc","highlightFunc","numCols","numRows","onMouseEnter","onMouseLeave","FeatureStrips","strokeDasharray","FeatureComboVisConnected","toggleFunc","legendText","featureIndices","NodeAttrView","whichType","v1","v2","hNodeData","featureVisBlock","nodeAttrVisBlock","histSpec","partialHistSpec","faBan","findBrushedNodesAndDispatch","fontWeight","HighlightControl","numHighlightsAndFocus","areHighlightsAlsoFocus","btns","position","zIndex","faCaretUp","sin","cos","prev","FocusControl","faTrashAlt","Badge","ScatterHistogram","hValsY","hasHist","hVals","binsLatent","binsTopo","binsFeature","gridsTopo","gridsFeature","tgt","gridBins","gridBinsMaxCnt","maxCnt","binsY","histScales","maxCntLatent","maxCntY","uLat","uTopo","linearColorScale","domainMax","scaleSequentialLog","getColorLogScale","getLogScale","rangeMax","scaleLog","valFormat","format","cntFormat","col","constrain","round","brushedPairIdx","NodePairList","selectedPairIdx","labelOrId","NodePairItem","index","selected","minWidth","itemSize","itemCount","getSelectedPairIdx","s1","s2","DistanceView","numFoc","btwFoc","Row","column","sm","Col","marginBottom","md","disabled","highlightDistVals","hasFeatures","activeTab","flexDirection","justifyContent","activeKey","Link","renderCreateModal","hy","hx","NeighborLatentMap","cntScale","binsByHop","maxBinVals","granu","binData","blockSize","canvasSize","BlockRep","block","val","faCompressAlt","blockX","SVGdefs","orient","markerWidth","markerHeight","refX","refY","App","appRef","leftColRef","rightWidth","bindedUpdate","updateDimensions","bboxParent","bboxLeft","match","hasNodeFeatures","neighborMapOpen","interactionViews","flexShrink","alignItems","maxWidth","flexGrow","flexWrap","InitialLayoutView","withRouter","DatasetList","Container","overflow","frameborder","allow","allowfullscreen","Table","striped","hover","bordered","datasets","numTypes","nodeFeatures","desc","humanFileSize","toFixed","required","embedding","UploadModal","done","backdrop","aria-labelledby","CORGIE_URL","Upload","uploading","status","missingRequired","featureMeta","handleSubmit","handleChange","handleFileChange","event","prevState","files","missing","stateForm","append","method","body","response","that","polling","setInterval","STATUS_URL","URLSearchParams","clearInterval","Alert","faCheckCircle","rowSpan","fileInputComp","download","colSpan","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","createStore","rootReducer","applyMiddleware","thunk","createLogger","render","path","getElementById","URL","process","origin","contentType","headers","get","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f83d0cbc.chunk.js","sourcesContent":["import bs from \"bitset\";\nimport { scaleLinear, extent, lab } from \"d3\";\n\n// count all, only happen in the initialization phase\nexport function countNodesByType(nodes) {\n    let counts = {};\n    for (let n of nodes) {\n        if (!counts.hasOwnProperty(n.type)) {\n            counts[n.type] = 0;\n        }\n        counts[n.type]++;\n    }\n    return Object.keys(counts).map((t, i) => ({ id: i, name: t, count: counts[t] }));\n}\n\n// Assign a node type index to each node and return a mapping from type (string) to typeIndex (int)\n// Note: this function changes the nodes\nexport function populateNodeTypeIndex(nodes, nodeTypes) {\n    let mapping = {},\n        a = [],\n        i = 0;\n    for (let nt of nodeTypes) {\n        mapping[nt.name] = nt.id;\n    }\n    for (let n of nodes) {\n        n.typeId = mapping[n.type];\n    }\n}\n\nexport function aggregateBinaryFeatures(features, highlightNodes, computeMapping = true) {\n    const m = features[0].length;\n    const cnts = new Array(m).fill(0);\n    const featToNid = {};\n\n    function handleFeature(nid, f) {\n        for (let i = 0; i < m; i++) {\n            if (f[i] > 0) {\n                cnts[i] += f[i];\n                if (computeMapping) {\n                    if (!featToNid.hasOwnProperty(i)) {\n                        featToNid[i] = [];\n                    }\n                    featToNid[i].push(nid);\n                }\n            }\n        }\n    }\n    if (!highlightNodes) {\n        for (let nid = 0; nid < features.length; nid++) {\n            handleFeature(nid, features[nid]);\n        }\n    } else {\n        for (let nodeId of highlightNodes) {\n            handleFeature(nodeId, features[nodeId]);\n        }\n    }\n    return { cnts, featToNid };\n}\n\nexport function getCompressFeatureMapping(numFeatures, maxNumStrips) {\n    const r = Math.ceil(numFeatures / maxNumStrips);\n    const numStrips = Math.ceil(numFeatures / r);\n    const m = new Array(numStrips).fill(0).map((_, i) => {\n        const x = [];\n        const start = i * r;\n        for (let j = 0; j < r && start + j < numFeatures; j++) {\n            x.push(start + j);\n        }\n        return x;\n    });\n    return m;\n}\n// maxWidth: max number of bins / strips\nexport function compressFeatureValues(values, maxNumStrips, sort = false) {\n    const sortedVal = sort ? values.slice().sort((a, b) => b - a) : values;\n    const n = values.length;\n    // Compression ratio\n    const r = Math.ceil(n / maxNumStrips);\n    // console.log(\"feature compress rate = \", r);\n\n    const compValues = [];\n    for (let i = 0; i < n; i += r) {\n        let t = 0;\n        for (let j = 0; j < r && i + j < n; j++) {\n            t = Math.max(t, sortedVal[i + j]); // Use the max function to aggreagte\n        }\n        compValues.push(t);\n    }\n    return compValues;\n}\n\n// Rescale the coordinates to [0,0]-[w,h]\nexport function coordsRescale(umapRes, w, h, paddings) {\n    const coords = umapRes.umap,\n        ebp = umapRes.edgeBundlePoints;\n    let xArr = coords.map((c) => c.x);\n    let yArr = coords.map((c) => c.y);\n    let xExtent = extent(xArr);\n    let yExtent = extent(yArr);\n\n    let xScale = scaleLinear()\n        .domain(xExtent)\n        .range([paddings.left, w - paddings.left - paddings.right]);\n    let yScale = scaleLinear()\n        .domain(yExtent)\n        .range([paddings.top, h - paddings.top - paddings.bottom]);\n\n    return {\n        coords: coords.map((d) => ({ x: xScale(d.x), y: yScale(d.y) })),\n        edgeBundlePoints: ebp.map((e) => {\n            const e1 = [];\n            for (let i = 0; i < e.length; i += 2) {\n                e1.push(xScale(e[i]));\n                e1.push(yScale(e[i + 1]));\n            }\n            return e1;\n        }),\n    };\n}\n\nexport function getNeighborDistance(mask1, mask2, metric) {\n    if (metric === \"hamming\") {\n        // Hamming distance\n        return mask1.xor(mask2).cardinality();\n    } else if (metric === \"jaccard\") {\n        // Jaccard distance\n        const intersection = mask1.and(mask2).cardinality();\n        const union = mask1.or(mask2).cardinality();\n        return union === 0 ? 0 : 1 - intersection / union;\n    } else {\n        return 0;\n    }\n}\n\nconst sim2dist = scaleLinear().domain([-1, 1]).range([1, 0]);\nexport function getCosineDistance(u, v) {\n    let p = 0,\n        magU = 0,\n        magV = 0;\n    for (let i = 0; i < u.length; i++) {\n        p += u[i] * v[i];\n        magU += Math.pow(u[i], 2);\n        magV += Math.pow(v[i], 2);\n    }\n    const mag = Math.sqrt(magU) * Math.sqrt(magV);\n    const sim = p / mag;\n    return sim2dist(sim);\n}\n\nexport function getEuclideanDistance(u, v) {\n    let s = 0;\n    for (let i = 0; i < u.length; i++) {\n        s += Math.pow(u[i] - v[i], 2);\n    }\n    return Math.sqrt(s);\n}\n\n// Get the positional color for a node that sits at (x, y), where x,y is in [0,1]\nconst labScale = scaleLinear().domain([0, 1]).range([-160, 160]);\nexport function getNodeEmbeddingColor(x, y) {\n    const a = labScale(x),\n        b = labScale(y);\n    const l = 60;\n    return lab(l, a, b).formatHex();\n}\n\nexport function isPointInBox(p, box) {\n    const offX = p.x - box.x,\n        offY = p.y - box.y;\n    return 0 <= offX && offX <= box.width && 0 <= offY && offY <= box.height;\n}\n\n// Given selected nodes (in the form of array of array), compute relevant data structures for their neighbors\n// isNodeSelected, isNodeSelectedNeighbor, neighArr, neighMap\n// Note neighMap is no longer needed!\nexport function getSelectedNeighbors(selectedNodes, neighborMasks, hops) {\n    if (!selectedNodes) return;\n    let isNodeSelected = {},\n        isNodeSelectedNeighbor = {},\n        neighArr = [];\n    // neighMap = {};\n\n    let gid = 0;\n    for (let g of selectedNodes) {\n        gid++;\n        for (let nodeIdx of g) {\n            isNodeSelected[nodeIdx] = gid;\n            // Iterate its neighbors by hops\n            // Compute whether a node is the neighbor of selected nodes, if yes, specify the #hops\n            // The closest / smallest hop wins if it is neighbor of multiple selected nodes\n            for (let h = hops - 1; h >= 0; h--) {\n                const curNeigh = neighborMasks[h][nodeIdx];\n                for (let neighIdx of curNeigh.toArray()) {\n                    if (neighIdx !== nodeIdx) {\n                        if (isNodeSelectedNeighbor.hasOwnProperty(neighIdx)) {\n                            isNodeSelectedNeighbor[neighIdx] = Math.min(\n                                isNodeSelectedNeighbor[neighIdx],\n                                h + 1\n                            );\n                        } else {\n                            isNodeSelectedNeighbor[neighIdx] = h + 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (let h = 0; h < hops; h++) {\n        neighArr.push([]);\n    }\n    for (let nodeId in isNodeSelectedNeighbor)\n        if (isNodeSelectedNeighbor[nodeId] && !isNodeSelected[nodeId]) {\n            neighArr[isNodeSelectedNeighbor[nodeId] - 1].push(parseInt(nodeId));\n        }\n\n    // let h = 0;\n    // let prevHopNodes = selectedNodes.flat();\n    // for (let curHopNeigh of neighArr) {\n    //     // const curMasks = neighborMasks[h];\n    //     // compute a mask for the selected nodes\n    //     let prevHopNodesMask = bs(0);\n    //     for (let nodeId of prevHopNodes) {\n    //         prevHopNodesMask.set(nodeId, 1);\n    //     }\n\n    //     // Find out #connections to nodes in previous hop\n    //     for (let neighId of curHopNeigh) {\n    //         neighMap[neighId] = {\n    //             mask: neighborMasks[0][neighId].and(prevHopNodesMask),\n    //             h: h + 1,\n    //         };\n    //         neighMap[neighId].cnt = neighMap[neighId].mask.cardinality();\n    //     }\n\n    //     // Sort array by #conn\n    //     curHopNeigh.sort((a, b) => neighMap[b].cnt - neighMap[a].cnt);\n    //     // Populate the order of the node in that hop\n    //     for (let i = 0; i < curHopNeigh.length; i++) {\n    //         neighMap[curHopNeigh[i]].order = i;\n    //     }\n    //     prevHopNodes = curHopNeigh;\n    //     h++;\n    // }\n\n    return { isNodeSelected, isNodeSelectedNeighbor, neighArr };\n}\n\nexport function binarySearch(arr, v) {\n    let l = 0,\n        r = arr.length - 1;\n    while (l <= r) {\n        let m = Math.floor((l + r) / 2);\n        // Access the 0-th element.  This is particularly for the node pair data struct\n        const t = arr[m][0];\n        if (t === v) {\n            return m;\n        } else if (t < v) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n    return l;\n}\n\nexport function rectBinning(data, accessCol, extent, numBins) {\n    const unitX = extent[0] / numBins,\n        unitY = extent[1] / numBins;\n    const bins = new Array(numBins);\n    for (let i = 0; i < numBins; i++) {\n        bins[i] = new Array(numBins).fill(0).map(() => []);\n    }\n\n    let m = 0;\n    function inc(valX, valY, idx) {\n        let i = Math.floor(valX / unitX),\n            j = Math.floor(valY / unitY);\n        i = Math.min(i, numBins - 1);\n        j = Math.min(j, numBins - 1);\n        bins[i][j].push(idx);\n        m = Math.max(m, bins[i][j].length);\n    }\n\n    for (let i = 0; i < data.length; i += 1) {\n        inc(data[i][accessCol[0]], data[i][accessCol[1]], i);\n    }\n    return { bins, maxCnt: m };\n}\n\n// Comppute the neighborMasksByHop and neighborMasks (all hops combined)\nexport function computeNeighborMasks(numNodes, edgeDict, hops) {\n    const masks = [],\n        masksByHop = [];\n    let last;\n    for (let i = 0; i < numNodes; i++) {\n        masks.push(bs(0));\n        // include self\n        masks[i].set(i, 1);\n    }\n\n    // first hop\n    for (let sid = 0; sid < edgeDict.length; sid++) {\n        for (let targetNode of edgeDict[sid]) {\n            const tid = targetNode.nid;\n            masks[sid].set(tid, 1);\n            masks[tid].set(sid, 1);\n        }\n    }\n    masksByHop.push(masks.map((m) => m.clone()));\n    last = masksByHop[0];\n\n    // hop > 1\n    for (let h = 1; h < hops; h++) {\n        const cur = [];\n        for (let i = 0; i < numNodes; i++) {\n            cur.push(bs(0));\n        }\n        for (let i = 0; i < numNodes; i++) {\n            let m = masks[i];\n            for (let sid of m.toArray()) {\n                for (let targetNode of edgeDict[sid]) {\n                    m.set(targetNode.nid, 1);\n                }\n            }\n\n            for (let sid of last[i].toArray()) {\n                for (let targetNode of edgeDict[sid]) {\n                    cur[i].set(targetNode.nid, 1);\n                }\n            }\n        }\n        masksByHop.push(cur);\n        last = cur;\n    }\n    return { neighborMasks: masks, neighborMasksByHop: masksByHop };\n}\n\n// Filter edges: self loop and duplicates are removed.\n// Note: we treat all edges as undirectional.\n// Compute an edge dictionary by its source ID\nexport function filterEdgeAndComputeDict(numNodes, edges) {\n    const filteredEdges = [];\n\n    const d = new Array(numNodes);\n    const h = {};\n    for (let i = 0; i < numNodes; i++) {\n        d[i] = [];\n        h[i] = {};\n    }\n    let k = 0;\n    for (let e of edges) {\n        if (e.source !== e.target) {\n            // not self loops\n            let s = Math.min(e.source, e.target),\n                t = Math.max(e.source, e.target);\n            if (!h[s].hasOwnProperty(t)) {\n                // remove dup edges\n                d[e.source].push({ nid: e.target, eid: k });\n                d[e.target].push({ nid: e.source, eid: k });\n                filteredEdges.push({ ...e, eid: k });\n                k++;\n            }\n            h[s][t] = true;\n        }\n    }\n    return { edges: filteredEdges, edgeDict: d };\n}\n\nexport function isNodeBrushable(nodeData, highlightNodeType, highlightNodeLabel) {\n    if (highlightNodeType !== \"all\" && nodeData.typeId !== highlightNodeType) return false;\n    if (highlightNodeLabel !== \"all\") {\n        if (highlightNodeLabel === \"correct\" && nodeData.isWrong) return false;\n        if (highlightNodeLabel === \"wrong\" && !nodeData.isWrong) return false;\n        // Assuming highlightNodeLabel must be \"pred-k\" or \"true-k\"\n        const k = parseInt(highlightNodeLabel.slice(5));\n        if (highlightNodeLabel.indexOf(\"pred\") !== -1 && nodeData.pl !== k) return false;\n        if (highlightNodeLabel.indexOf(\"true\") !== -1 && nodeData.tl !== k) return false;\n    }\n    return true;\n}\n\nexport function computeEdgeDict(numNodes, edges) {\n    const d = new Array(numNodes);\n    for (let i = 0; i < numNodes; i++) {\n        d[i] = {};\n    }\n    for (let e of edges) {\n        d[e.source][e.target] = true;\n        d[e.target][e.source] = true;\n    }\n    return d;\n}\n\nexport function normalizeFeatures(attrMeta, nodes) {\n    const scalingFuncs = [];\n    for (let a of attrMeta) {\n        const f = nodes.map((n) => Number(n[a.name]) || 0);\n        const e = extent(f);\n        scalingFuncs.push(scaleLinear().domain(e).range([0, 1]));\n    }\n    return nodes.map((n) =>\n        attrMeta.map((a, i) => (n.hasOwnProperty(a.name) ? scalingFuncs[i](n[a.name]) : 0))\n    );\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"umap.worker.worker.js\");\n}\n","import \"whatwg-fetch\";\nimport * as Comlink from \"comlink\";\nimport { csvParseRows } from \"d3\";\nimport { getSelectedNeighbors } from \"./utils\";\nimport {\n    countNodesByType,\n    populateNodeTypeIndex,\n    // computeNeighborMasks,\n    // filterEdgeAndComputeDict,\n    // normalizeFeatures,\n} from \"./utils\";\n\nimport FocalLayoutWorker from \"./focalLayout.worker\";\nimport InitialLayoutWorker from \"./initialLayout.worker\";\nimport DistanceWorker from \"./distance.worker\";\nimport { range as lodashRange } from \"lodash\";\n// Note that this is a dirty and quick way to retrieve info about dataset\nimport datasetsInfo from \"./datasets\";\nimport UmapWorker from \"./umap.worker\";\nimport bs from \"bitset\";\n\n// const SERVER_URL = \"http://localhost:8787\";\nconst SERVER_URL = \"http://3.144.104.69:8787\";\n\nfunction findHopsInDatasetInfo(id) {\n    const defaultHops = 2;\n    for (let d of datasetsInfo) {\n        if (d.id === id) {\n            if (d.hops) {\n                return parseInt(d.hops);\n            }\n            return defaultHops;\n        }\n    }\n    return defaultHops;\n}\n\nconst distanceWorker = Comlink.wrap(new DistanceWorker());\nconst focalLayoutWorkerBeforeWrap = new FocalLayoutWorker();\nconst focalLayoutWorker = Comlink.wrap(focalLayoutWorkerBeforeWrap);\nconst initialLayoutWebWorker = new InitialLayoutWorker();\nconst initalLayoutWorker = Comlink.wrap(initialLayoutWebWorker);\nconst NUM_UMAP_WORKERS = 4;\nconst umapWorkerPool = lodashRange(NUM_UMAP_WORKERS).map(() => Comlink.wrap(new UmapWorker()));\n\nconst ACTION_TYPES = {\n    FETCH_DATA_PENDING: \"FETCH_DATA_PENDING\",\n    FETCH_DATA_SUCCESS: \"FETCH_DATA_SUCCESS\",\n    COMPUTE_INIT_LAYOUT_DONE: \"COMPUTE_INIT_LAYOUT_DONE\",\n    FETCH_DATA_ERROR: \"FETCH_DATA_ERROR\",\n    COMPUTE_DISTANCES_PENDING: \"COMPUTE_DISTANCES_PENDING\",\n    COMPUTE_DISTANCES_DONE: \"COMPUTE_DISTANCES_DONE\",\n    HIGHLIGHT_NODES: \"HIGHLIGHT_NODES\",\n    HIGHLIGHT_NODE_PAIRS: \"HIGHLIGHT_NODE_PAIRS\",\n    HOVER_NODE: \"HOVER_NODE\",\n    CHANGE_SELECTED_NODE_TYPE: \"CHANGE_SELECTED_NODE_TYPE\",\n    SELECT_NODES: \"SELECT_NODES\",\n    SELECT_NODES_PENDING: \"SELECT_NODES_PENDING\",\n    SELECT_NODES_DONE: \"SELECT_NODES_DONE\",\n    SELECT_NODE_PAIR: \"SELECT_NODE_PAIR\",\n    CHANGE_PARAM: \"CHANGE_PARAM\",\n    CHANGE_FOCAL_PARAM_PENDING: \"CHANGE_FOCAL_PARAM_PENDING\",\n    CHANGE_FOCAL_PARAM_DONE: \"CHANGE_FOCAL_PARAM_DONE\",\n    CHANGE_HOPS: \"CHANGE_HOPS\",\n    LAYOUT_TICK: \"LAYOUT_TICK\",\n    CHANGE_EDGE_TYPE_STATE: \"CHANGE_EDGE_TYPE_STATE\",\n    TOGGLE_HIGHLIGHT_NODES_ATTR: \"TOGGLE_HIGHLIGHT_NODES_ATTR\",\n    SEARCH_NODES: \"SEARCH_NODES\",\n    CHANGE_SCATTERPLOT_FORM: \"CHANGE_SCATTERPLOT_FORM\",\n    ADD_DISTANCE_SCATTERPLOT: \"ADD_DISTANCE_SCATTERPLOT\",\n};\nexport default ACTION_TYPES;\n\nexport function fetchGraphData(datasetId) {\n    return async function (dispatch, getState) {\n        const where = `${SERVER_URL}/data/${datasetId}`;\n        console.log(\"fetching data from \", where);\n\n        dispatch(fetchDataPending());\n\n        try {\n            // graph: nodes, node attributes, edges\n            // emb: node embeddings\n            // emb2d: umap results of node embeddings\n            // attrs: meta data for dense features with independent semantics (optional)\n            // sparseFeatures: feature matrix for sparse features with combined semantics (optional)\n            // predRes: prediction results\n            //          node classification: a json dict with two arrays \"predLabels\", \"trueLabels\"\n            //          link prediction: a json dict with two arrays \"posLinkRes\", \"negLinkRes\"\n            //              Each item in the array is four numbers: src, tgt, prediction (1/0), truth (1/0)\n            let [graph, emb, emb2d, attrs, predRes, initialLayout, distances] = [\n                await fetch(`${where}/graph.json`).then((r) => r.json()),\n                await fetch(`${where}/node-embeddings.csv`)\n                    .then((r) => r.text())\n                    .then(csvParseRows),\n                await fetch(`${where}/umap.json`)\n                    .then((r) => r.json())\n                    .then((d) => ({\n                        umap: d.umap.map((c) => ({ x: parseFloat(c.x), y: parseFloat(c.y) })),\n                        edgeBundlePoints: d.edgeBundlePoints.map((coords) =>\n                            coords.map((v) => parseFloat(v))\n                        ),\n                        neighborPos: d.neighborBinning,\n                    })),\n                await fetch(`${where}/attr-meta.json`)\n                    .then((r) => r.json())\n                    .catch(() => {\n                        return []; // In case there is no meta data\n                    }),\n                await fetch(`${where}/prediction-results.json`)\n                    .then((r) => r.json())\n                    .catch(() => null),\n                await fetch(`${where}/initial-layout.json`)\n                    .then((r) => r.json())\n                    .then((d) => {\n                        d.coords = d.coords.map((c) => ({ x: parseFloat(c.x), y: parseFloat(c.y) }));\n                        return d;\n                    })\n                    .catch(() => null),\n                await fetch(`${where}/distances.json`)\n                    .then((r) => r.json())\n                    .catch(() => null),\n            ];\n\n            const state = getState();\n            const { neighborDistanceMetric } = state.param;\n            const { numBins } = state.spec.scatterHist;\n            const hops = Number(graph.hops);\n\n            graph.nodeTypes = countNodesByType(graph.nodes);\n            populateNodeTypeIndex(graph.nodes, graph.nodeTypes);\n            // const edgeRes = filterEdgeAndComputeDict(graph.nodes.length, graph.links);\n            // graph.edges = edgeRes.edges;\n            // graph.edgeDict = edgeRes.edgeDict;\n            // Object.assign(graph, computeNeighborMasks(graph.nodes.length, graph.edgeDict, hops));\n            graph.neighborMasks = graph.neighborMasks.map((m) => bs.fromHexString(m));\n            graph.neighborMasksByHop = graph.neighborMasksByHop.map((h) => h.map((m) => bs.fromHexString(m)));\n\n            focalLayoutWorker.initializeState(\n                graph.nodes.length,\n                graph.edges,\n                graph.neighborMasks.map((x) => x.toString()),\n                graph.neighborMasksByHop[0].map((x) => x.toString()),\n                hops,\n                neighborDistanceMetric,\n                state.spec.graph\n            );\n            for (let w of umapWorkerPool) {\n                w.initializeState(\n                    graph.neighborMasks.map((x) => x.toString()),\n                    graph.neighborMasksByHop[0].map((x) => x.toString()),\n                    neighborDistanceMetric\n                );\n            }\n\n            // graph.denseFeatures = attrs.length ? normalizeFeatures(attrs, graph.nodes) : null;\n            // graph.sparseFeatures = sparseFeatures;\n\n            dispatch(\n                fetchDataSuccess({\n                    datasetId,\n                    graph,\n                    emb,\n                    emb2d,\n                    attrs,\n                    hops,\n                    predRes,\n                    initialLayout,\n                    distances,\n                })\n            );\n\n            if (!initialLayout) {\n                initalLayoutWorker\n                    .computeForceLayoutWithD3(graph.nodes.length, graph.edges, state.spec.graph.padding)\n                    .then((layoutRes) => {\n                        dispatch(computeInitLayoutDone(layoutRes));\n                        initialLayoutWebWorker.terminate();\n                    });\n            } else {\n                initialLayoutWebWorker.terminate();\n            }\n\n            await distanceWorker.initializeState(\n                emb,\n                graph.nodes.length,\n                graph.edges,\n                graph.neighborMasks.map((x) => x.toString()),\n                graph.sparseFeatures || graph.denseFeatures || null,\n                distances.featureDistMax,\n                graph.nodes.map((n) => n.typeId),\n                neighborDistanceMetric,\n                numBins\n            );\n            // const sampleDistData = await distanceWorker.computeDistances(\n            //     \"sample\",\n            //     null,\n            //     state.distances.maxSample\n            // );\n            // dispatch(computeDistancesDone(sampleDistData, 0));\n            // const edgeDistData = await distanceWorker.computeDistances(\"edge\");\n            // dispatch(computeDistancesDone(edgeDistData, 1));\n        } catch (e) {\n            dispatch(fetchDataError(e));\n        }\n    };\n}\n\nfunction computeInitLayoutDone(layoutRes) {\n    return { type: ACTION_TYPES.COMPUTE_INIT_LAYOUT_DONE, layoutRes };\n}\n\nfunction fetchDataPending() {\n    return { type: ACTION_TYPES.FETCH_DATA_PENDING };\n}\n\nfunction fetchDataSuccess(data) {\n    return { type: ACTION_TYPES.FETCH_DATA_SUCCESS, data };\n}\n\nfunction fetchDataError(error) {\n    return { type: ACTION_TYPES.FETCH_DATA_ERROR, error: error.toString() };\n}\n\nfunction computeDistancesDone(distData, idx, isSpecial = false) {\n    return { type: ACTION_TYPES.COMPUTE_DISTANCES_DONE, distData, idx, isSpecial };\n}\n\nexport function highlightNodes(nodeIndices, brushedArea = null, fromView = null, which = null) {\n    return { type: ACTION_TYPES.HIGHLIGHT_NODES, nodeIndices, brushedArea, fromView, which };\n}\n\nexport function highlightNodePairs(isTopoVsLatent, which, brushedArea, brushedPairs, showTopkUnseen = false) {\n    return {\n        type: ACTION_TYPES.HIGHLIGHT_NODE_PAIRS,\n        brushedArea,\n        which,\n        brushedPairs,\n        showTopkUnseen,\n        isTopoVsLatent,\n    };\n}\n\nexport function hoverNode(nodeIdx, fromFeature = null) {\n    return { type: ACTION_TYPES.HOVER_NODE, nodeIdx, fromFeature };\n}\n\nexport function toggleHighlightNodesAttr(delIdx = null) {\n    return { type: ACTION_TYPES.TOGGLE_HIGHLIGHT_NODES_ATTR, delIdx };\n}\n\n// Mode could be one of CREATE, APPEND, DELETE, CLEAR, or REMOVE FROM\nlet focalLayoutIDcounter = 1;\nexport function selectNodes(mode, targetNodes, targetGroupIdx) {\n    // return { type: ACTION_TYPES.SELECT_NODES, nodeIdx, selectionBox, mode };\n    return async function (dispatch, getState) {\n        // Update state.selectedNodes before calling the layout in the worker\n        const state = getState();\n        const { selectedNodes, isNodeSelected } = state;\n        // Deep copy the selectedNodes to avoid side effects\n        let nondup;\n        let newSel = selectedNodes.slice();\n        switch (mode) {\n            case \"CREATE\":\n                nondup = targetNodes.filter((x) => !isNodeSelected[x]);\n                if (nondup.length) {\n                    newSel = [...selectedNodes, nondup];\n                }\n                break;\n            case \"APPEND\":\n                nondup = targetNodes.filter((x) => !isNodeSelected[x]);\n                newSel[targetGroupIdx] = newSel[targetGroupIdx].concat(nondup);\n                break;\n            case \"REMOVE FROM\":\n            case \"SINGLE OUT\":\n                const isHighlighted = {};\n                for (let nodeIdx of targetNodes) {\n                    isHighlighted[nodeIdx] = true;\n                }\n                newSel = [];\n                for (let gid = 0; gid < selectedNodes.length; gid++) {\n                    let t = [];\n                    for (let nodeIdx of selectedNodes[gid]) {\n                        if (!isHighlighted.hasOwnProperty(nodeIdx)) {\n                            t.push(nodeIdx);\n                        }\n                    }\n                    if (t.length) {\n                        newSel.push(t);\n                    }\n                }\n                if (mode === \"SINGLE OUT\") {\n                    newSel.push(targetNodes);\n                }\n                break;\n            case \"DELETE\":\n                newSel.splice(targetGroupIdx, 1);\n                break;\n            case \"CLEAR\":\n                newSel = [];\n                break;\n            default:\n                console.error(\"action selectNodes encountered the wrong mode: \", mode);\n        }\n        console.log(\"calling action.selectNodes() \", { mode, targetNodes, targetGroupIdx, newSel });\n\n        const neighRes = getSelectedNeighbors(newSel, state.graph.neighborMasksByHop, state.param.hops);\n        const curLayoutID = focalLayoutIDcounter++;\n        dispatch(selectNodesPending(newSel, neighRes, curLayoutID));\n\n        if (newSel.length) {\n            let distGrpIdx = 2;\n            for (let i = 0; i < newSel.length; i++) {\n                if (newSel[i].length > 1) {\n                    dispatch(\n                        computeDistancesDone(\n                            await distanceWorker.computeDistances(\"within\", newSel[i]),\n                            distGrpIdx\n                        )\n                    );\n                    distGrpIdx++;\n                }\n            }\n            if (newSel.length === 2 && (newSel[0].length > 1 || newSel[1].length > 1)) {\n                dispatch(\n                    computeDistancesDone(await distanceWorker.computeDistances(\"between\", newSel), distGrpIdx)\n                );\n            }\n\n            const layoutRes = await callFocalLayoutFunc(state.graph, newSel, neighRes, state.param);\n            dispatch(selectNodesDone(layoutRes, curLayoutID));\n        } else {\n            dispatch(selectNodesDone({}, null));\n        }\n    };\n}\n\nexport function selectNodePair(node1, node2) {\n    return async function (dispatch, getState) {\n        const state = getState();\n        let newSel = [[node1], [node2]];\n\n        const neighRes = getSelectedNeighbors(newSel, state.graph.neighborMasksByHop, state.param.hops);\n        const curLayoutID = focalLayoutIDcounter++;\n        dispatch(selectNodesPending(newSel, neighRes, curLayoutID));\n\n        const layoutRes = await callFocalLayoutFunc(state.graph, newSel, neighRes, state.param);\n        dispatch(selectNodesDone(layoutRes, curLayoutID));\n    };\n}\n\nasync function callFocalLayoutFunc(graph, selectedNodes, neighRes, param) {\n    // Compute the force layout for focal nodes (focal nodes + k-hop neighbors)\n    if (selectedNodes.length === 0) {\n        return {};\n    } else {\n        // terminate the previous invocation if it is still ongoing\n        // focalLayoutWorkerBeforeWrap.terminate();\n        switch (param.focalGraph.layout) {\n            case \"umap\":\n                return await computeKHopLayout(\n                    selectedNodes,\n                    neighRes.neighArr,\n                    param.focalGraph.useGlobalMask,\n                    param.nodeSize,\n                    param.focalGraph.useEdgeBundling\n                );\n            case \"group-constraint-cola\":\n                return await focalLayoutWorker.computeFocalLayoutWithCola(\n                    selectedNodes,\n                    neighRes.neighArr,\n                    param.focalGraph.useGlobalMask,\n                    param.nodeSize\n                );\n            case \"spiral\":\n                return await focalLayoutWorker.computeSpaceFillingCurveLayout(\n                    selectedNodes,\n                    neighRes.neighArr,\n                    param.focalGraph.useGlobalMask\n                );\n            default:\n                return await focalLayoutWorker.computeFocalLayoutWithD3(\n                    selectedNodes,\n                    neighRes.neighArr,\n                    param.focalGraph.useGlobalMask\n                );\n        }\n    }\n}\n\nexport function selectNodesPending(newSel, neighRes, layoutId) {\n    return { type: ACTION_TYPES.SELECT_NODES_PENDING, newSel, neighRes, layoutId };\n}\n\nexport function selectNodesDone(layoutRes, layoutId) {\n    return { type: ACTION_TYPES.SELECT_NODES_DONE, layoutRes, layoutId };\n}\n\nexport function changeParam(param, value, inverse = false, arrayIdx = null) {\n    return { type: ACTION_TYPES.CHANGE_PARAM, param, value, inverse, arrayIdx };\n}\n\nexport function changeFocalParam(param, value) {\n    return async function (dispatch, getState) {\n        const state = getState();\n        const { focalLayout } = state;\n        // Toggle the form checkbox first\n        dispatch(changeParam(param, value));\n\n        if (param === \"focalGraph.useGlobalMask\") {\n            // recompute layout\n            dispatch(changeFocalParamPending());\n            const layoutRes = await callFocalLayoutFunc(\n                state.graph,\n                state.selectedNodes,\n                {\n                    neighArr: state.neighArr,\n                    isNodeSelected: state.isNodeSelected,\n                    isNodeSelectedNeighbor: state.isNodeSelectedNeighbor,\n                },\n                state.param\n            );\n            dispatch(changeFocalParamDone(focalLayout.layoutId, layoutRes));\n        } else if (param === \"focalGraph.useEdgeBundling\") {\n            // Check if we actually need to compute edge bundling results\n            if (value && !focalLayout.edgeBundlePoints) {\n                dispatch(changeFocalParamPending(\"Performing edge bundling...\"));\n                const edgeBundlePoints = await focalLayoutWorker.performEdgeBundling(\n                    focalLayout.remainingEdges,\n                    focalLayout.coords\n                );\n                dispatch(changeFocalParamDone(focalLayout.layoutId, { edgeBundlePoints }));\n            }\n        }\n    };\n}\n\nfunction changeFocalParamPending(runningMsg = null) {\n    return { type: ACTION_TYPES.CHANGE_FOCAL_PARAM_PENDING, runningMsg };\n}\nfunction changeFocalParamDone(layoutId, layoutRes) {\n    return { type: ACTION_TYPES.CHANGE_FOCAL_PARAM_DONE, layoutId, layoutRes };\n}\n\nexport function changeHops(hops) {\n    return { type: ACTION_TYPES.CHANGE_HOPS, hops };\n}\n\nexport function layoutTick() {\n    return { type: ACTION_TYPES.LAYOUT_TICK };\n}\n\nexport function changeEdgeTypeState(idx) {\n    return { type: ACTION_TYPES.CHANGE_EDGE_TYPE_STATE, idx };\n}\n\nexport function searchNodes(label, nodeIdx) {\n    return { type: ACTION_TYPES.SEARCH_NODES, label, nodeIdx };\n}\n\nexport function addDistanceScatterplot() {\n    return async function (dispatch, getState) {\n        const state = getState();\n        const form = state.scatterplotForm;\n        const id = state.distances.displaySpecial.length;\n        dispatch(computeDistancesPending());\n\n        // call distance worker to compute distance\n        const d = await distanceWorker.computeDistances(\"special\", null, null, form.nodePairs);\n        dispatch(computeDistancesDone(d, id, true));\n    };\n}\n\nfunction computeDistancesPending() {\n    return { type: ACTION_TYPES.COMPUTE_DISTANCES_PENDING };\n}\n\nexport function changeScatterplotForm(field, value) {\n    return { type: ACTION_TYPES.CHANGE_SCATTERPLOT_FORM, field, value };\n}\n\nasync function computeKHopLayout(focalNodes, neighArr, useGlobalMask, nodeSize, useEdgeBundling) {\n    const startTime = new Date();\n    // Compute the UMAP embeddings of each box\n    const taskQ = [...focalNodes, ...neighArr];\n    console.log({ taskQ });\n\n    const sum = new Array(NUM_UMAP_WORKERS).fill(0);\n    const allComp = [];\n    for (let i = 0; i < taskQ.length; i++) {\n        // find the smallest sum for work load balancing\n        var idx = sum.reduce((cur, x, i, arr) => (x < arr[cur] ? i : cur), 0);\n        // assign task i to worker idx\n        sum[idx] += taskQ[i].length;\n        allComp.push(umapWorkerPool[idx].runUMAP(taskQ[i], useGlobalMask, nodeSize));\n    }\n\n    return Promise.all(allComp)\n        .then((embs) => {\n            const embeddings = [[focalNodes.map(() => null)], neighArr.map(() => null)];\n            for (let i = 0; i < taskQ.length; i++) {\n                if (i < focalNodes.length) {\n                    embeddings[0][i] = embs[i];\n                } else {\n                    embeddings[i - focalNodes.length + 1] = embs[i];\n                }\n            }\n            const endTime = new Date();\n            console.log(\"UMAP total time: \", (endTime.getTime() - startTime.getTime()) / 1000, \"s\");\n            return embeddings;\n        })\n        .then((embeddings) => {\n            return focalLayoutWorker.computeFocalLayoutWithUMAP(\n                focalNodes,\n                neighArr,\n                embeddings,\n                useEdgeBundling\n            );\n        });\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"distance.worker.worker.js\");\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"focalLayout.worker.worker.js\");\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"initialLayout.worker.worker.js\");\n}\n","import produce, { freeze } from \"immer\";\nimport initialState from \"./initialState\";\nimport ACTION_TYPES from \"./actions\";\nimport bs from \"bitset\";\nimport {\n    bin as d3bin,\n    extent,\n    max,\n    scaleSequential,\n    interpolateGreens,\n    interpolateGreys,\n    scaleLinear,\n    scaleOrdinal,\n    schemeTableau10,\n} from \"d3\";\nimport Quadtree from \"@timohausmann/quadtree-js\";\nimport {\n    aggregateBinaryFeatures,\n    compressFeatureValues,\n    getCompressFeatureMapping,\n    coordsRescale,\n    getNodeEmbeddingColor,\n    rectBinning,\n} from \"./utils\";\n\nfunction mapColorToNodeType(nodeTypes) {\n    for (let i = 0; i < nodeTypes.length; i++) {\n        if (i > schemeTableau10.length - 1) {\n            nodeTypes[i].color = \"black\";\n        } else {\n            nodeTypes[i].color = schemeTableau10[i];\n        }\n    }\n}\n\nfunction countNeighborsByType(neighborMasksByType, selectedNodes) {\n    // Not including itself\n    let nei = [];\n    for (let i = 0; i < neighborMasksByType[0].length; i++) {\n        nei.push(bs(0));\n    }\n    for (let i of selectedNodes) {\n        for (let j = 0; j < neighborMasksByType[i].length; j++) {\n            nei[j] = nei[j].or(neighborMasksByType[i][j]);\n        }\n    }\n    return nei.map((n) => n.cardinality());\n}\n\nfunction getNeighborMasksByType(nodes, edges, numberOfNodeTypes) {\n    // Init the masks for each node: an array of array of zero masks\n    let masks = nodes.map(() => {\n        let m = [];\n        for (let i = 0; i < numberOfNodeTypes; i++) {\n            m.push(bs(0));\n        }\n        return m;\n    });\n\n    for (let e of edges) {\n        const sid = e.source,\n            tid = e.target;\n        const srcType = nodes[sid].typeId,\n            tgtType = nodes[tid].typeId;\n        masks[sid][tgtType].set(tid, 1);\n        masks[tid][srcType].set(sid, 1);\n    }\n    return masks;\n}\n\nfunction getNeighbors(neighborMasks, hops, edgeDict, targetNodes, incTargets = true) {\n    const hash = {};\n    if (incTargets) {\n        for (let tar of targetNodes) {\n            hash[tar] = true;\n        }\n    }\n\n    for (let i = 0; i < hops; i++) {\n        // Iterate the hops\n        // Flatten all hops / treating all hops the same\n        for (let tar of targetNodes) {\n            for (let id of neighborMasks[i][tar].toArray()) {\n                hash[id] = true;\n            }\n        }\n    }\n    const nodes = Object.keys(hash).map((x) => parseInt(x));\n    return { nodes, edges: getEdgesWithinGroup(edgeDict, nodes, hash) };\n}\n\nfunction getEdgesWithinGroup(edgeDict, nodes, nodeHash = null) {\n    let h = nodeHash;\n    if (nodeHash === null) {\n        h = {};\n        for (let id of nodes) {\n            h[id] = true;\n        }\n    }\n\n    const edges = [];\n    for (let id of nodes) {\n        for (let id2struct of edgeDict[id]) {\n            const id2 = id2struct.nid;\n            if (id < id2 && h[id2]) {\n                edges.push({ source: id, target: id2, eid: id2struct.eid });\n            }\n        }\n    }\n    return edges;\n}\n\n// Return an array of all combinations of intersection, represented as bitsets of the selectedNodes\n// Total number of combo is 2^n - 1 - n, where n is the number of selected nodes\n// O(2^n)\nfunction generateIntersectionCombo(n) {\n    let combos = [];\n    for (let i = 1; i <= n; i++) {\n        // Iterate over the number of sets to intersect\n        let cur = bs(0);\n        function search(start, ones) {\n            if (ones === 0) {\n                // save this bs\n                combos.push(cur.clone());\n                return;\n            }\n            for (let j = start; j <= n - ones; j++) {\n                cur.set(j, 1);\n                search(j + 1, ones - 1);\n                cur.set(j, 0);\n            }\n        }\n        search(0, i);\n    }\n    // console.log(combos.map(c => c.toString()));\n    return combos;\n}\n\n// function computeIntersections(neighborMasksByType, selectedNodes) {\n//     if (selectedNodes.length < 2) {\n//         return null;\n//     }\n//     const combos = generateIntersectionCombo(selectedNodes.length);\n//     let intersections = [];\n//     // This is potentially slow due to spatial locality\n//     // And the combo bitset is duped\n//     for (let i = 0; i < neighborMasksByType[0].length; i++) {\n//         intersections.push(\n//             combos.map((c) => {\n//                 const bits = c.toArray();\n//                 let r = bs(0).flip();\n//                 for (let b of bits) {\n//                     const nodeIdx = selectedNodes[b];\n//                     r = r.and(neighborMasksByType[nodeIdx][i]);\n//                 }\n//                 return { combo: c, res: r, size: r.cardinality() };\n//             })\n//         );\n//     }\n//     return intersections;\n// }\n\n// TODO selectNodes is now an array of array fix this!!!\n// Count frequency of a neighbor presenting in the neighbor sets of the selected nodes\n// Return an array, each item in the array is an object with the node id and frequencies, sorted by node types.\n// Quadratic time to the number of nodes.  Potentially we can apply incremental changes and reduce computation\n// TODO: use frequency as second sort key?\n// Also compute the bins of histogram\n// Note: return one histogram for each neighbor node type.  The input is already sorted\nfunction countNeighborSets(neighborMasksByType, selectedNodes) {\n    if (selectedNodes.length === 0) return { allCounts: [], bins: [], countsByType: [] };\n\n    // Init\n    let cnts = [],\n        histos = [];\n    for (let i = 0; i < neighborMasksByType[0].length; i++) {\n        cnts.push({});\n    }\n\n    // Count\n    for (let nid of selectedNodes) {\n        for (let i = 0; i < neighborMasksByType[0].length; i++) {\n            const nei = neighborMasksByType[nid][i].toArray();\n            for (let b of nei) {\n                if (!cnts[i].hasOwnProperty(b)) {\n                    cnts[i][b] = 0;\n                }\n                cnts[i][b]++;\n            }\n        }\n    }\n\n    // TODO:  use a smarter thresholds later\n    // const thresholds = [];\n    // for (let i = 1; i < selectedNodes.length + 1; i++) {\n    //    thresholds.push(i - 0.01);\n    // }\n    // console.log(thresholds);\n    const binGen = d3bin().thresholds(selectedNodes.length);\n\n    // Flatten the cnts array\n    let allCounts = [],\n        allCountsMapping = {},\n        countsByType = [];\n    for (let c of cnts) {\n        const idx = Object.keys(c);\n        const temp = [];\n        for (let i of idx) {\n            temp.push({ id: i, cnt: c[i] });\n            allCountsMapping[i] = c[i];\n        }\n        // Sort\n        temp.sort((a, b) => b.cnt - a.cnt);\n        allCounts = allCounts.concat(temp);\n        countsByType.push(temp);\n        // Compute bins of counts\n        histos.push(binGen(temp.map((t) => t.cnt)));\n    }\n    return { allCounts, allCountsMapping, bins: histos, countsByType };\n}\n\nfunction countSelectedNeighborsByHop(neighborMasks, selectedNodes, neighArr, neighMap) {\n    if (selectedNodes.length === 0) return {};\n\n    let neighGrp = [];\n    // Merge the selected nodes into an flat array\n    let prevHopNodes = selectedNodes.flat();\n\n    // iterate the masks for each hop\n    let h = 0;\n    for (let curHopNeigh of neighArr) {\n        // Group the neighbors by frequency\n        let idx = 0;\n        let curGroups = [];\n        while (idx < curHopNeigh.length) {\n            let curG = {\n                freq: neighMap[curHopNeigh[idx]].cnt,\n                prevTotal: idx, // Number of neighbors previous to this group, used for computing layout\n                nodes: [],\n                expanded: false,\n                cntsPerSelected: {}, // For roll-up matrix\n                nodesPerSelected: {}, // For highlighting in the roll-up matrix\n                subgroups: [],\n                subGroupPrevTotal: [], // Number of neighbors previous to this subgroup (count within this group)\n                isBoundary: {}, // For drawing visual boundary lines\n            };\n            for (let nodeId of prevHopNodes) {\n                curG.cntsPerSelected[nodeId] = 0;\n                curG.nodesPerSelected[nodeId] = [];\n            }\n\n            let j = idx;\n            while (j < curHopNeigh.length) {\n                let curNeighData = neighMap[curHopNeigh[j]];\n                if (curNeighData.cnt !== curG.freq) break;\n                curG.nodes.push(curHopNeigh[j]);\n\n                // Compute the counts per prev-hop node\n                for (let nodeId of prevHopNodes) {\n                    const m = neighborMasks[0][nodeId];\n                    if (m.get(curHopNeigh[j])) {\n                        curG.cntsPerSelected[nodeId]++;\n                        curG.nodesPerSelected[nodeId].push(curHopNeigh[j]);\n                    }\n                }\n\n                // Compute the subgroups by comparing neighbor j with j-1\n                if (j === idx || !curNeighData.mask.equals(neighMap[curHopNeigh[j - 1]].mask)) {\n                    // add a new subgroup\n                    curG.subgroups.push([curHopNeigh[j]]);\n                    curG.subGroupPrevTotal.push(j - idx); // count within this group\n                    curG.isBoundary[curHopNeigh[j]] = true;\n                } else {\n                    curG.subgroups[curG.subgroups.length - 1].push(curHopNeigh[j]);\n                }\n\n                j++;\n            }\n            curGroups.push(curG);\n            idx = j;\n        }\n\n        neighGrp.push(curGroups);\n        prevHopNodes = curHopNeigh;\n        h++;\n    }\n\n    console.log({ neighGrp });\n    // Note that cnts does not have info about hop\n    return neighGrp;\n}\n\n// function computeDistanceToCurrentFocus(distMatrix, focalNodes) {\n//     if (focalNodes.length === 0) {\n//         return null;\n//     }\n//     const d = [];\n//     for (let i = 0; i < distMatrix.length; i++) {\n//         let t = 0;\n//         for (let nodeId of focalNodes) {\n//             t += distMatrix[i][nodeId];\n//         }\n//         d.push(t / focalNodes.length);\n//     }\n//     console.log({ extent: extent(d) });\n//     return d;\n// }\n\n// Note that attrs will be changed by calling this function\n// attrMeta is an array of object that describes the attribute names and types\n// attrs is the histogram data for all nodes (for computing sub-distribution of selected nodes)\nfunction summarizeNodeAttrs(nodes, attrMeta, nodeTypes, attrs = null, included = null) {\n    let res = attrMeta.map((a) => ({ ...a }));\n    // Init\n    for (let a of res) {\n        if (a.type === \"scalar\") {\n            a.values = []; // The attribute values, used for compuing stats\n        } else if (a.type === \"categorical\") {\n            a.values = {}; // A mapping from value to count\n        }\n        // if (included) {\n        //     // Only record the nodes when computing partial histogram data\n        //     a.nodeIds = [];\n        // }\n    }\n\n    // Count\n    function countValues(n) {\n        for (let a of res) {\n            if (nodeTypes[n.typeId].name === a.nodeType) {\n                if (a.type === \"scalar\") {\n                    a.values.push(+n[a.name]);\n                } else if (a.type === \"categorical\") {\n                    if (!a.values.hasOwnProperty(n[a.name])) {\n                        a.values[n[a.name]] = 0;\n                    }\n                    a.values[n[a.name]]++;\n                }\n                // if (included) {\n                //     a.nodeIds.push(n.id);\n                // }\n            }\n        }\n    }\n\n    if (included !== null) {\n        for (let nid of included) {\n            countValues(nodes[nid]);\n        }\n    } else {\n        for (let n of nodes) {\n            countValues(n);\n        }\n    }\n    // Binning\n    const thresCnt = 10;\n    for (let i = 0; i < res.length; i++) {\n        let a = res[i];\n        if (a.type === \"scalar\") {\n            if (attrs) {\n                a.bins = attrs[i].binGen(a.values);\n            } else {\n                let s = scaleLinear().domain(extent(a.values)).nice(thresCnt);\n                a.binGen = d3bin().domain(s.domain()).thresholds(s.ticks(thresCnt));\n                a.bins = a.binGen(a.values);\n            }\n        } else {\n            if (attrs) {\n                a.bins = attrs[i].bins.map((b) => ({ v: b.v, c: a.values[b.v] }));\n            } else {\n                a.bins = Object.keys(a.values)\n                    .sort((x, y) => a.values[x] - a.values[y])\n                    .map((x) => ({ v: x, c: a.values[x] }));\n            }\n        }\n    }\n    return res;\n}\n\nfunction computeBoundingBox(coords, included) {\n    let xMin = 1e9,\n        xMax = 0,\n        yMin = 1e9,\n        yMax = 0;\n    const padding = 5;\n    for (let nid of included) {\n        const c = coords[nid];\n        xMin = Math.min(xMin, c.x);\n        xMax = Math.max(xMax, c.x);\n        yMin = Math.min(yMin, c.y);\n        yMax = Math.max(yMax, c.y);\n    }\n    return {\n        x: xMin - padding,\n        y: yMin - padding,\n        width: xMax - xMin + 2 * padding,\n        height: yMax - yMin + 2 * padding,\n    };\n}\n\nfunction processPredictionResults(nodes, edges, predRes) {\n    if (!predRes) return;\n    if (predRes.trueLabels && predRes.predLabels) {\n        // node classification results\n        for (let i = 0; i < nodes.length; i++) {\n            const n = nodes[i];\n            n.pl = predRes.predLabels[i];\n            n.tl = predRes.trueLabels[i];\n            n.isWrong = n.pl !== n.tl;\n        }\n    }\n    if (predRes.trueAllowEdges && predRes.falseAllowEdges) {\n        // link prediction results\n        const h = [];\n        for (let i = 0; i < nodes.length; i++) {\n            h[i] = {};\n            nodes[i].isWrong = false;\n        }\n        for (let p of predRes.trueAllowEdges) {\n            h[p[0]][p[1]] = true;\n            h[p[1]][p[0]] = true;\n        }\n        for (let p of predRes.falseAllowEdges) {\n            h[p[0]][p[1]] = false;\n            h[p[1]][p[0]] = false;\n        }\n\n        for (let e of edges) {\n            if (!h[e.source][e.target]) {\n                // Mark the node as wrong prediction\n                nodes[e.source].isWrong = true;\n                nodes[e.target].isWrong = true;\n                e.isWrong = true;\n            } else {\n                e.isWrong = false;\n            }\n        }\n    }\n}\n\n// const getIntraDistances = (nodes, distMatrix) => {\n//     const n = nodes.length;\n//     const d = [];\n//     for (let i = 0; i < n; i++) {\n//         for (let j = i + 1; j < n; j++) {\n//             d.push([distMatrix[nodes[i]][nodes[j]], nodes[i], nodes[j]]);\n//         }\n//     }\n//     d.sort((x1, x2) => x1[0] - x2[0]);\n//     return d;\n// };\n\n// // Return the distance distributions for the focal groups\n// // In the case of two focal group with only one node in each, return one distance value\n// function computeDistancesFocal(selectedNodes, distMatrix, binGen) {\n//     let res = [];\n//     if (selectedNodes.length == 1 && selectedNodes[0].length > 1) {\n//         const d = {\n//             mode: \"within focal group\",\n//             nodePairs: getIntraDistances(selectedNodes[0], distMatrix),\n//         };\n//         d.bins = binGen(d.nodePairs.map((x) => x[0]));\n//         res.push(d);\n//     } else if (selectedNodes.length > 1) {\n//         for (let k = 0; k < selectedNodes.length; k++) {\n//             if (selectedNodes[k].length > 1) {\n//                 const d = {\n//                     mode: `within focal group ${k}`,\n//                     nodePairs: getIntraDistances(selectedNodes[k], distMatrix),\n//                 };\n//                 d.bins = binGen(d.nodePairs.map((x) => x[0]));\n//                 res.push(d);\n//             }\n//         }\n//         if (selectedNodes.length == 2) {\n//             const n1 = selectedNodes[0].length,\n//                 n2 = selectedNodes[1].length;\n//             if (n1 > 1 || n2 > 1) {\n//                 const d2 = { mode: \"between two focal groups\", nodePairs: [] };\n//                 for (let i = 0; i < n1; i++) {\n//                     for (let j = 0; j < n2; j++) {\n//                         const a = selectedNodes[0][i],\n//                             b = selectedNodes[1][j];\n//                         d2.nodePairs.push([distMatrix[a][b], a, b]);\n//                     }\n//                 }\n//                 d2.bins = binGen(d2.nodePairs.map((x) => x[0]));\n//                 res.push(d2);\n//             } else if (n1 == 1 && n2 == 1) {\n//                 res = distMatrix[selectedNodes[0][0]][selectedNodes[1][0]];\n//             }\n//         }\n//     }\n//     return res;\n// }\n\nfunction setNodeColors(draft, colorBy) {\n    let s = null,\n        d = [];\n    switch (colorBy) {\n        case \"umap\":\n            draft.nodeColors = draft.latent.posColor;\n            break;\n        case \"pred-labels\":\n            for (let i = 0; i < draft.numNodeClasses; i++) {\n                d.push(i);\n            }\n            s = scaleOrdinal(d, schemeTableau10);\n            draft.nodeColors = draft.graph.nodes.map((n) => s(n.pl));\n            break;\n        case \"true-labels\":\n            for (let i = 0; i < draft.numNodeClasses; i++) {\n                d.push(i);\n            }\n            s = scaleOrdinal(d, schemeTableau10);\n            draft.nodeColors = draft.graph.nodes.map((n) => s(n.tl));\n            break;\n        case \"correctness\":\n            s = (isWrong) => (isWrong ? \"red\" : \"blue\");\n            draft.nodeColors = draft.graph.nodes.map((n) => s(n.isWrong));\n            break;\n        case \"node-type\":\n            s = (i) => draft.graph.nodeTypes[i].color;\n            draft.nodeColors = draft.graph.nodes.map((n) => s(n.typeId));\n            break;\n        default:\n            colorBy = parseInt(colorBy);\n            const colorAttr = draft.nodeAttrs.display[0].data[colorBy];\n            const attrDomain = [colorAttr.bins[0].x0, colorAttr.bins[colorAttr.bins.length - 1].x1];\n            const leftMargin = 0.2 * (attrDomain[1] - attrDomain[0]);\n            s = scaleSequential(interpolateGreens).domain([\n                attrDomain[0] > 0 ? Math.max(0, attrDomain[0] - leftMargin) : attrDomain[0],\n                attrDomain[1],\n            ]);\n            draft.nodeColors = draft.graph.nodes.map((n) =>\n                n.hasOwnProperty(colorAttr.name) ? s(n[colorAttr.name]) : \"black\"\n            );\n    }\n    draft.param.colorBy = colorBy;\n    draft.param.colorScale = s;\n}\n\n// Determine if all nodes are in a focal group.  If yes return the gid (>0), else return 0\nfunction findFocalGroups(nodes, isNodeSelected) {\n    let r = 0;\n    if (nodes.length === 2) {\n        // determine if the two nodes between to two different focal group respectively\n        const g1 = isNodeSelected[nodes[0]],\n            g2 = isNodeSelected[nodes[1]];\n        if (g1 > 0 && g2 > 0 && g1 !== g2) {\n            return Math.max(g1, g2) + 1;\n        }\n    } else {\n        for (let nid of nodes) {\n            if (isNodeSelected[nid]) {\n                if (r > 0 && isNodeSelected[nid] !== r) {\n                    // Other nodes are in the focal group r, but this one is not in r or not focal node\n                    return 0;\n                }\n                r = isNodeSelected[nid];\n            } else if (r > 0) {\n                // Other nodes are in the focal group, but this one is not\n                return 0;\n            }\n        }\n    }\n    return r;\n}\n\nfunction clearHighlights(draft) {\n    draft.param.nodeFilter = { searchShown: false };\n    draft.highlightedNodes = [];\n    draft.highlightedEdges = [];\n    draft.featureAgg.highlighted = null;\n    draft.nodeAttrs.highlighted = null;\n}\n\nfunction buildQT(layoutData) {\n    const { coords, width, height } = layoutData;\n    const qt = new Quadtree({\n        x: 0,\n        y: 0,\n        width,\n        height,\n    });\n    for (let i = 0; i < coords.length; i++) {\n        const c = coords[i];\n        if (c) {\n            qt.insert({\n                id: i,\n                x: c.x - 0.5,\n                y: c.y - 0.5,\n                width: 1,\n                height: 1,\n            });\n        }\n    }\n    return qt;\n}\n\nfunction filterPairsByFormCondition(state, formData) {\n    const { userInterests, connectivity, linkPrediction } = formData;\n    const n = state.graph.nodes.length;\n    const { highlightedNodes, selectedNodes, predRes } = state;\n    let temp, g0, g1, g, x, y;\n    let h1 = {},\n        h2 = {},\n        h3 = {};\n    for (let i = 0; i < n; i++) {\n        h1[i] = {};\n        h2[i] = {};\n        h3[i] = {};\n    }\n    let allConn = false,\n        allUser = false,\n        allPred = false;\n\n    // for debug\n    function countT(h) {\n        let cnt = 0;\n        for (let i = 0; i < n; i++) {\n            for (let id in h[i])\n                if (h[i].hasOwnProperty(id) && h[i][id]) {\n                    cnt++;\n                }\n        }\n        return cnt;\n    }\n\n    // filter by connectivity\n    if (connectivity === \"edge\") {\n        for (let e of state.graph.edges) {\n            x = Math.min(e.source, e.target);\n            y = Math.max(e.source, e.target);\n            h1[x][y] = true;\n        }\n    } else if (connectivity === \"nonedge\") {\n        for (let i = 0; i < n; i++) {\n            for (let j = i + 1; j < n; j++) {\n                h1[i][j] = true;\n            }\n        }\n        for (let e of state.graph.edges) {\n            h1[Math.min(e.source, e.target)][Math.max(e.source, e.target)] = false;\n        }\n    } else {\n        allConn = true;\n    }\n    // console.log(\"after connectivity: \", countT(h1));\n\n    if (userInterests !== \"all\") {\n        if (userInterests.indexOf(\"*\") !== -1) {\n            // between focal groups\n            temp = userInterests.split(\"*\");\n            g0 = parseInt(temp[0].slice(4));\n            g1 = parseInt(temp[1].slice(4));\n            console.assert(g0 !== g1 && g0 < selectedNodes.length && g1 < selectedNodes.length);\n            for (let id1 of selectedNodes[g0]) {\n                for (let id2 of selectedNodes[g1]) {\n                    x = Math.min(id1, id2);\n                    y = Math.max(id1, id2);\n                    if (allConn || h1[x][y]) {\n                        h2[x][y] = true;\n                    }\n                }\n            }\n        } else if (userInterests.indexOf(\"-\") !== -1) {\n            // within a focal group\n            g0 = parseInt(userInterests.slice(4));\n            console.assert(g0 !== g1 && g0 < selectedNodes.length);\n            g = selectedNodes[g0];\n            for (let i = 0; i < g.length; i++) {\n                for (let j = i + 1; j < g.length; j++) {\n                    x = Math.min(g[i], g[j]);\n                    y = Math.max(g[i], g[j]);\n                    if (allConn || h1[x][y]) {\n                        h2[x][y] = true;\n                    }\n                }\n            }\n        } else {\n            // hihglight\n            g = highlightedNodes;\n            for (let i = 0; i < g.length; i++) {\n                for (let j = i + 1; j < g.length; j++) {\n                    x = Math.min(g[i], g[j]);\n                    y = Math.max(g[i], g[j]);\n                    if (allConn || h1[x][y]) {\n                        h2[x][y] = true;\n                    }\n                }\n            }\n        }\n    } else {\n        allUser = true;\n    }\n\n    // console.log(\"after user interests: \", countT(h2));\n\n    // filter by link prediction\n    if (linkPrediction === \"pred-true\") {\n        const { trueAllowEdges } = state.predRes;\n        for (let e of trueAllowEdges) {\n            x = Math.min(e[0], e[1]);\n            y = Math.max(e[0], e[1]);\n            if ((allConn || h1[x][y]) && (allUser || h2[x][y])) {\n                h3[x][y] = true;\n            }\n        }\n    } else if (linkPrediction === \"pred-false\") {\n        const { falseAllowEdges } = state.predRes;\n        for (let e of falseAllowEdges) {\n            x = Math.min(e[0], e[1]);\n            y = Math.max(e[0], e[1]);\n            if ((allConn || h1[x][y]) && (allUser || h2[x][y])) {\n                h3[x][y] = true;\n            }\n        }\n    } else {\n        allPred = true;\n    }\n    // console.log(\"after link prediction: \", countT(h3));\n\n    const pairs = [];\n    let h = null;\n    if (!allConn) h = h1;\n    if (!allUser) h = h2;\n    if (!allPred) h = h3;\n    if (!h) {\n        // All \"all\"\n        for (let i = 0; i < n; i++) {\n            for (let j = i + 1; j < n; j++) {\n                pairs.push([i, j]);\n            }\n        }\n    } else {\n        // convert h to pairs\n        for (let i = 0; i < n; i++) {\n            for (let id in h[i])\n                if (h[i].hasOwnProperty(id) && h[i][id]) {\n                    pairs.push([i, id]);\n                }\n        }\n    }\n    return pairs;\n}\n\nfunction getSpecialDistanceTitle(formData) {\n    const { userInterests, connectivity, linkPrediction } = formData;\n    const t = [userInterests, connectivity, linkPrediction].filter((x) => x !== \"all\");\n    let f;\n    if (t.length) {\n        f = t.join(\",\");\n    } else {\n        f = \"all\";\n    }\n    return `Filter: ${f}`;\n}\n\nconst reducers = produce((draft, action) => {\n    // const ascFunc = (x1, x2) => x1[0][0] - x2[0][0],\n    //     descFunc = (x1, x2) => x2[0][0] - x1[0][0];\n    let neiRes, fAggCntData, fAggBlock, fidMapping;\n    switch (action.type) {\n        case ACTION_TYPES.FETCH_DATA_PENDING:\n            draft.loaded = false;\n            return;\n        case ACTION_TYPES.FETCH_DATA_ERROR:\n            draft.loaded = false;\n            draft.error = action.error;\n            return;\n        case ACTION_TYPES.FETCH_DATA_SUCCESS:\n            draft.loaded = true;\n            const { graph, emb, emb2d, attrs, hops, predRes, initialLayout, distances } = action.data;\n            // the scalar values in emb are in string format, so convert them to float first\n            for (let e of emb) {\n                for (let i = 0; i < e.length; i++) {\n                    e[i] = parseFloat(e[i]);\n                }\n            }\n\n            draft.predRes = predRes;\n            processPredictionResults(graph.nodes, graph.edges, predRes);\n            draft.numNodeClasses = predRes ? predRes.numNodeClasses : null;\n            draft.hasLinkPredictions = predRes && predRes.isLinkPrediction;\n\n            draft.param.hops = hops;\n            draft.datasetId = action.data.datasetId;\n            draft.datasetName = action.data.graph.name;\n            draft.graph = graph;\n            draft.initialLayout.numNodes = graph.nodes.length;\n            draft.initialLayout.numEdges = graph.edges.length;\n            if (action.data.initialLayout) {\n                Object.assign(draft.initialLayout, initialLayout);\n                draft.initialLayout.running = false;\n                draft.initialLayout.qt = buildQT(initialLayout);\n            }\n\n            // compute feature aggregation\n            if (graph.sparseFeatures) {\n                // TODO deal with general numerical features\n                draft.featureAgg.active = true;\n                draft.featureAgg.numFeatures = graph.sparseFeatures[0].length;\n                draft.featureAgg.stripMapping = getCompressFeatureMapping(\n                    graph.sparseFeatures[0].length,\n                    draft.spec.feature.maxNumStrips\n                );\n                fAggCntData = aggregateBinaryFeatures(graph.sparseFeatures, null);\n                fAggBlock = {\n                    title: \"All\",\n                    cnts: fAggCntData.cnts,\n                    featToNid: fAggCntData.featToNid,\n                    maxCnts: max(fAggCntData.cnts),\n                    compressedCnts: compressFeatureValues(fAggCntData.cnts, draft.spec.feature.maxNumStrips),\n                };\n                fAggBlock.scale = scaleSequential(interpolateGreys).domain([0, fAggBlock.maxCnts]);\n                draft.featureAgg.display.push(fAggBlock);\n            }\n            mapColorToNodeType(draft.graph.nodeTypes);\n\n            // draft.graph.neighborMasksByHop = getNeighborMasksByHop(graph.nodes, graph.edges, draft.param.hops);\n            // draft.graph.neighborMasksByType = getNeighborMasksByType(\n            //     graph.nodes,\n            //     graph.edges,\n            //     draft.graph.nodeTypes.length,\n            //     hops\n            // );\n            // Bug: only 1-hop is counted in the neighborMasksByType\n            // draft.graph.neighborMasks = draft.graph.neighborMasksByType.map((m) =>\n            //     m.reduce((acc, x) => acc.or(x), bs(0))\n            // );\n            // draft.graph.neighborMasks = computeNeighborMasks(draft.graph.nodes.length, draft.graph.edgeDict, draft.param.hops);\n\n            draft.latent = {\n                emb,\n                layoutMin: {\n                    ...coordsRescale(\n                        emb2d,\n                        draft.spec.latent.width,\n                        draft.spec.latent.height,\n                        draft.spec.latent.paddings\n                    ),\n                    width: draft.spec.latent.width,\n                    height: draft.spec.latent.height,\n                },\n                layoutMax: {\n                    ...coordsRescale(\n                        emb2d,\n                        draft.spec.latent.widthMax,\n                        draft.spec.latent.heightMax,\n                        draft.spec.latent.paddingsMax\n                    ),\n                    width: draft.spec.latent.widthMax,\n                    height: draft.spec.latent.heightMax,\n                },\n                neighborPos: emb2d.neighborPos,\n            };\n            // Build quadtree for the embedding 2D coordinates\n            draft.latent.layoutMin.qt = buildQT(draft.latent.layoutMin);\n            draft.latent.layoutMax.qt = buildQT(draft.latent.layoutMax);\n            draft.latent.posColor = draft.latent.layoutMin.coords.map((c) =>\n                getNodeEmbeddingColor(c.x / draft.spec.latent.width, c.y / draft.spec.latent.height)\n            );\n\n            draft.attrMeta = attrs;\n            draft.nodeAttrs.active = attrs.length > 0;\n            if (draft.nodeAttrs.active) {\n                draft.nodeAttrs.numAttrs = attrs.length;\n                draft.nodeAttrs.display.push({\n                    title: \"All\",\n                    data: summarizeNodeAttrs(graph.nodes, attrs, draft.graph.nodeTypes),\n                });\n            }\n            setNodeColors(draft, draft.param.colorBy);\n\n            const numPairs = (graph.nodes.length * (graph.nodes.length - 1)) / 2;\n            draft.distances.featureDistMax = distances.featureDistMax;\n            draft.distances.display = [distances.distSample, distances.distEdge];\n            draft.distances.display[0].title =\n                numPairs > distances.distSample.src.length ? \"random samples\" : \"all\";\n            draft.distances.display[1].title = \"edges\";\n            if (distances.featureDistMax) {\n                draft.distances.featureScale = scaleLinear()\n                    .domain([0, distances.featureDistMax])\n                    .range([0, 1]);\n            }\n\n            draft.isNodeSelected = new Array(graph.nodes.length).fill(false);\n            return;\n\n        case ACTION_TYPES.COMPUTE_INIT_LAYOUT_DONE:\n            Object.assign(draft.initialLayout, action.layoutRes);\n            draft.initialLayout.qt = buildQT(action.layoutRes);\n            draft.initialLayout.running = false;\n            return;\n\n        case ACTION_TYPES.COMPUTE_DISTANCES_PENDING:\n            draft.distances.displaySpecial[0] = {\n                title: getSpecialDistanceTitle(draft.scatterplotForm),\n                isComputing: true,\n            };\n            draft.scatterplotForm.show = false;\n            return;\n\n        case ACTION_TYPES.COMPUTE_DISTANCES_DONE:\n            if (action.isSpecial) {\n                // if (action.idx < draft.distances.displaySpecial.length) {\n                // Object.assign(draft.distances.displaySpecial[action.idx], action.distData);\n                // Only allow one special scatterplot\n                Object.assign(draft.distances.displaySpecial[0], action.distData);\n                draft.distances.displaySpecial[0].isComputing = false;\n                // }\n            } else {\n                if (action.idx < draft.distances.display.length) {\n                    Object.assign(draft.distances.display[action.idx], action.distData);\n                    draft.distances.display[action.idx].isComputing = false;\n                }\n            }\n            return;\n\n        case ACTION_TYPES.HIGHLIGHT_NODES:\n            clearHighlights(draft);\n            if (action.fromView === \"node-type\") {\n                for (let n of draft.graph.nodes) {\n                    if (n.typeId === action.which) {\n                        draft.highlightedNodes.push(n.id);\n                    }\n                }\n                draft.highlightedEdges = getEdgesWithinGroup(\n                    draft.graph.edgeDict,\n                    draft.highlightedNodes,\n                    null\n                );\n            } else if (action.fromView === \"node-label\") {\n                const f = draft.param.colorBy === \"pred-labels\" ? \"pl\" : \"tl\";\n                for (let n of draft.graph.nodes) {\n                    if (n[f] === action.which) {\n                        draft.highlightedNodes.push(n.id);\n                    }\n                }\n                draft.highlightedEdges = getEdgesWithinGroup(\n                    draft.graph.edgeDict,\n                    draft.highlightedNodes,\n                    null\n                );\n            } else {\n                if (action.fromView === \"node-attr\") {\n                    draft.param.nodeFilter.whichAttr = action.which.attr;\n                    draft.param.nodeFilter.whichRow = action.which.row;\n                    draft.param.nodeFilter.brushedArea = action.brushedArea;\n                }\n                if (action.fromView === \"feature\") {\n                    fAggCntData = new Array(draft.featureAgg.numFeatures).fill(0);\n                    for (let fid of action.which.cellIds) {\n                        fAggCntData[fid] = 1;\n                    }\n                    draft.featureAgg.highlighted = {\n                        displayId: action.which.displayId,\n                        // cellIds: action.which.cellIds,\n                        cnts: fAggCntData,\n                        compressedCnts: compressFeatureValues(fAggCntData, draft.spec.feature.maxNumStrips),\n                    };\n                }\n                if (\n                    action.fromView === \"node-attr\" ||\n                    action.fromView === \"feature\" ||\n                    // action.fromView === \"emb\" ||\n                    // action.fromView === \"graph-edge\" ||\n                    draft.param.hopsHighlight === 0\n                ) {\n                    draft.highlightedNodes = action.nodeIndices;\n                    draft.highlightedEdges = getEdgesWithinGroup(\n                        draft.graph.edgeDict,\n                        draft.highlightedNodes,\n                        null\n                    );\n                } else {\n                    // Highlight their neighbors as well\n                    neiRes = getNeighbors(\n                        draft.graph.neighborMasksByHop,\n                        draft.param.hopsHighlight,\n                        draft.graph.edgeDict,\n                        action.nodeIndices,\n                        true\n                    );\n                    draft.highlightedNodes = neiRes.nodes;\n                    draft.highlightedEdges = neiRes.edges;\n                }\n            }\n\n            if (draft.highlightedNodes.length) {\n                if (draft.featureAgg.active && action.fromView !== \"feature\") {\n                    // Compute which cell needs to be highlighted\n                    fAggCntData = aggregateBinaryFeatures(\n                        draft.graph.sparseFeatures,\n                        draft.highlightedNodes,\n                        false\n                    );\n                    draft.featureAgg.highlighted = {\n                        displayId: findFocalGroups(draft.highlightedNodes, draft.isNodeSelected),\n                        cnts: fAggCntData.cnts,\n                        compressedCnts: compressFeatureValues(\n                            fAggCntData.cnts,\n                            draft.spec.feature.maxNumStrips\n                        ),\n                    };\n                } else if (draft.nodeAttrs.active && action.fromView !== \"node-attr\") {\n                    draft.nodeAttrs.highlighted = {\n                        displayId: findFocalGroups(draft.highlightedNodes, draft.isNodeSelected),\n                        data: summarizeNodeAttrs(\n                            draft.graph.nodes,\n                            draft.attrMeta,\n                            draft.graph.nodeTypes,\n                            draft.nodeAttrs.display[0].data,\n                            draft.highlightedNodes\n                        ),\n                    };\n                }\n            }\n            return;\n        case ACTION_TYPES.HIGHLIGHT_NODE_PAIRS:\n            const { brushedArea, which, brushedPairs, showTopkUnseen } = action;\n            draft.param.nodePairFilter.isTopoVsLatent = action.isTopoVsLatent;\n            draft.param.nodePairFilter.brushedArea = brushedArea;\n            draft.param.nodePairFilter.which = which;\n            if (which === null) {\n                draft.highlightedNodePairs = [];\n            } else {\n                draft.highlightedNodePairs = brushedPairs;\n            }\n            if (showTopkUnseen) {\n                const unseenDict = draft.predRes.trueUnseenEdgesSorted;\n                for (let nid of draft.highlightedNodes) {\n                    if (unseenDict.hasOwnProperty(nid)) {\n                        for (let i = 0; i < Math.min(unseenDict[nid].length, draft.param.unseenTopK); i++) {\n                            draft.highlightedNodePairs.push([nid, unseenDict[nid][i]]);\n                        }\n                    }\n                }\n            }\n            return;\n        case ACTION_TYPES.HOVER_NODE:\n            if (action.nodeIdx === null) {\n                draft.hoveredNodes = [];\n                draft.hoveredNodesAndNeighbors = [];\n                draft.hoveredEdges = [];\n                draft.featureAgg.hovered = null;\n                draft.nodeAttrs.hovered = null;\n            } else {\n                // Hover on a node\n                draft.hoveredNodes = Number.isInteger(action.nodeIdx) ? [action.nodeIdx] : action.nodeIdx;\n                if (draft.param.hopsHover === 0) {\n                    draft.hoveredNodesAndNeighbors = draft.hoveredNodes.slice();\n                    draft.hoveredEdges = getEdgesWithinGroup(draft.graph.edgeDict, draft.hoveredNodes, null);\n                } else {\n                    neiRes = getNeighbors(\n                        draft.graph.neighborMasksByHop,\n                        draft.param.hopsHover,\n                        draft.graph.edgeDict,\n                        draft.hoveredNodes,\n                        true\n                    );\n                    draft.hoveredNodesAndNeighbors = neiRes.nodes;\n                    draft.hoveredEdges = neiRes.edges;\n                }\n            }\n\n            // Compute feature partial distribution for the relevant nodes\n            if (draft.hoveredNodesAndNeighbors.length) {\n                if (draft.featureAgg.active) {\n                    if (action.fromFeature === null) {\n                        // Handle the features of hovered nodes\n                        fAggCntData = aggregateBinaryFeatures(\n                            draft.graph.sparseFeatures,\n                            draft.hoveredNodesAndNeighbors,\n                            false\n                        );\n                        draft.featureAgg.hovered = {\n                            displayId: findFocalGroups(draft.hoveredNodesAndNeighbors, draft.isNodeSelected),\n                            cnts: fAggCntData.cnts,\n                            compressedCnts: compressFeatureValues(\n                                fAggCntData.cnts,\n                                draft.spec.feature.maxNumStrips\n                            ),\n                        };\n                    } else if (action.fromFeature.cellIds.length > 0) {\n                        // also highlight some of the feature cells\n                        fidMapping = {};\n                        for (let fid of action.fromFeature.cellIds) {\n                            fidMapping[fid] = 1;\n                        }\n                        draft.featureAgg.hovered = {\n                            displayId: action.fromFeature.displayId,\n                            cnts: fidMapping,\n                        };\n                    }\n                }\n                if (draft.nodeAttrs.active) {\n                    draft.nodeAttrs.hovered = {\n                        displayId: findFocalGroups(draft.hoveredNodesAndNeighbors, draft.isNodeSelected),\n                        data: summarizeNodeAttrs(\n                            draft.graph.nodes,\n                            draft.attrMeta,\n                            draft.graph.nodeTypes,\n                            draft.nodeAttrs.display[0].data,\n                            draft.hoveredNodesAndNeighbors\n                        ),\n                    };\n                }\n            }\n            return;\n        case ACTION_TYPES.SELECT_NODES_PENDING:\n            let { newSel, neighRes } = action;\n            draft.selectedNodes = newSel;\n            // Remove the computation results for previous focal groups\n            draft.distances.display.length = 2;\n            draft.nodeAttrs.display.length = 1;\n            draft.featureAgg.display.length = 1;\n            draft.param.features.collapsed.length = 1;\n            if (newSel.length == 0) {\n                // Clear selection\n                draft.neighArr = null;\n                // draft.neighMap = null;\n                draft.isNodeSelected = {};\n                draft.isNodeSelectedNeighbor = {};\n                draft.neighGrp = null;\n                draft.focalLayout = { running: false };\n            } else {\n                draft.isNodeSelected = neighRes.isNodeSelected;\n                draft.isNodeSelectedNeighbor = neighRes.isNodeSelectedNeighbor;\n                // draft.neighMap = neighRes.neighMap;\n                draft.neighArr = neighRes.neighArr;\n                // neighGrp is for the roll-up matrix of neighbor counts\n                // draft.neighGrp = countSelectedNeighborsByHop(\n                //     draft.graph.neighborMasksByHop,\n                //     draft.selectedNodes,\n                //     neighRes.neighArr,\n                //     neighRes.neighMap\n                // );\n\n                if (draft.nodeAttrs.active) {\n                    for (let i = 0; i < newSel.length; i++) {\n                        draft.nodeAttrs.display.push({\n                            title: `foc-${i}`,\n                            data: summarizeNodeAttrs(\n                                draft.graph.nodes,\n                                draft.attrMeta,\n                                draft.graph.nodeTypes,\n                                draft.nodeAttrs.display[0].data,\n                                newSel[i]\n                            ),\n                        });\n                    }\n                }\n                draft.focalLayout = {\n                    running: true,\n                    layoutId: action.layoutId,\n                };\n                draft.latent.layoutMin.focalBBox = newSel.map((s) =>\n                    computeBoundingBox(draft.latent.layoutMin.coords, s)\n                );\n                draft.latent.layoutMax.focalBBox = newSel.map((s) =>\n                    computeBoundingBox(draft.latent.layoutMax.coords, s)\n                );\n\n                // Compute the features for the focal nodes\n                if (draft.featureAgg.active) {\n                    newSel.map((s, i) => {\n                        fAggCntData = aggregateBinaryFeatures(draft.graph.sparseFeatures, s);\n                        fAggBlock = {\n                            title: `foc-${i}`,\n                            cnts: fAggCntData.cnts,\n                            featToNid: fAggCntData.featToNid,\n                            maxCnts: max(fAggCntData.cnts),\n                            compressedCnts: compressFeatureValues(\n                                fAggCntData.cnts,\n                                draft.spec.feature.maxNumStrips\n                            ),\n                        };\n                        fAggBlock.scale = scaleSequential(interpolateGreys).domain([0, fAggBlock.maxCnts]);\n                        draft.featureAgg.display.push(fAggBlock);\n                        draft.param.features.collapsed.push(true);\n                    });\n                    if (newSel.length === 2) {\n                        // Compute the diff feature data\n                        const diffCnts = draft.featureAgg.display[1].cnts.map((c1, i) =>\n                            Math.abs(c1 - draft.featureAgg.display[2].cnts[i])\n                        );\n                        const diffMax = max(diffCnts);\n                        // const t = Math.max(Math.abs(diffExtent[0]), Math.abs(diffExtent[1]));\n                        // const t = Math.max(newSel[0].length, newSel[1].length);\n                        const diffCompressedCnts = compressFeatureValues(\n                            diffCnts,\n                            draft.spec.feature.maxNumStrips\n                        );\n                        const diffFeatToNid = {};\n                        for (let i = 0; i < diffCnts.length; i++) {\n                            if (diffCnts[i] !== 0) {\n                                let ftn1 = draft.featureAgg.display[1].featToNid[i] || [],\n                                    ftn2 = draft.featureAgg.display[2].featToNid[i] || [];\n                                diffFeatToNid[i] = ftn1.concat(ftn2);\n                            }\n                        }\n                        draft.featureAgg.display.push({\n                            title: \"diff\",\n                            cnts: diffCnts,\n                            compressedCnts: diffCompressedCnts,\n                            featToNid: diffFeatToNid,\n                            // scale: scaleSequential(interpolateRdBu).domain([-t, t]),\n                            scale: scaleSequential(interpolateGreys).domain([0, diffMax]),\n                        });\n                        draft.param.features.collapsed.push(true);\n                    }\n                }\n                // Allocate space for the distance data, waiting for worker to return the actual computed values\n                for (let i = 0; i < newSel.length; i++) {\n                    if (newSel[i].length > 1) {\n                        draft.distances.display.push({ isComputing: true, title: `within foc-${i}` });\n                    }\n                }\n                if (newSel.length === 2 && (newSel[0].length > 1 || newSel[1].length > 1)) {\n                    draft.distances.display.push({\n                        isComputing: true,\n                        title: \"between foc-0 and foc-1\",\n                    });\n                }\n                // Clear the highlight (blinking) nodes\n                draft.param.nodeFilter = {};\n                draft.highlightedNodes = [];\n                draft.featureAgg.highlighted = null;\n                draft.nodeAttrs.highlighted = null;\n            }\n\n            return;\n        case ACTION_TYPES.SELECT_NODES_DONE:\n            // Avoid racing condition\n            if (action.layoutId && action.layoutId === draft.focalLayout.layoutId) {\n                draft.focalLayout = {\n                    ...action.layoutRes,\n                    running: false,\n                };\n                if (action.layoutRes.coords) {\n                    draft.focalLayout.qt = buildQT(action.layoutRes);\n                }\n            }\n            return;\n        case ACTION_TYPES.CHANGE_PARAM:\n            const paramPath = action.param.split(\".\");\n            const lastParam = paramPath[paramPath.length - 1];\n            let cur = draft.param;\n            for (let i = 0; i < paramPath.length - 1; i++) {\n                cur = cur[paramPath[i]];\n            }\n            if (action.inverse) {\n                if (action.arrayIdx !== null) {\n                    cur[lastParam][action.arrayIdx] = !cur[lastParam][action.arrayIdx];\n                } else {\n                    cur[lastParam] = !cur[lastParam];\n                }\n            } else {\n                if (action.arrayIdx !== null) {\n                    cur[lastParam][action.arrayIdx] = action.value;\n                } else {\n                    cur[lastParam] = action.value;\n                }\n            }\n\n            if ([\"hopsHighlight\", \"highlightNodeType\", \"highlightNodeLabel\"].indexOf(action.param) !== -1) {\n                clearHighlights(draft);\n            }\n\n            // Special param changes\n            if (action.param === \"colorBy\") {\n                setNodeColors(draft, action.value);\n            }\n            // else if (action.param === \"nodePairFilter.ascending\") {\n            //     draft.highlightedNodePairs.sort(action.value ? ascFunc : descFunc);\n            // }\n            return;\n        case ACTION_TYPES.CHANGE_FOCAL_PARAM_PENDING:\n            if (action.runningMsg) {\n                draft.focalLayout.runningMsg = action.runningMsg;\n            } else {\n                draft.focalLayout.running = true;\n            }\n            return;\n        case ACTION_TYPES.CHANGE_FOCAL_PARAM_DONE:\n            if (draft.focalLayout.layoutId === action.layoutId) {\n                Object.assign(draft.focalLayout, { ...action.layoutRes, running: false, runningMsg: null });\n                if (action.layoutRes.coords) {\n                    draft.focalLayout.qt = buildQT(action.layoutRes);\n                }\n            }\n            return;\n        case ACTION_TYPES.CHANGE_HOPS:\n            if (draft.param.hops !== action.hops) {\n                draft.param.hops = action.hops;\n                // Re-calculate the neighbor masks\n                // draft.graph.neighborMasksByHop = getNeighborMasksByHop(\n                //     draft.graph.nodes,\n                //     draft.graph.edges,\n                //     draft.param.hops\n                // );\n                // draft.graph.neighborMasksByType = getNeighborMasks(\n                //     draft.graph.nodes,\n                //     draft.graph.edges,\n                //     draft.graph.nodeTypes.length,\n                //     action.hops\n                // );\n                // draft.graph.neighborMasks = draft.graph.neighborMasksByType.map(m =>\n                //     m.reduce((acc, x) => acc.or(x), bs(0))\n                // );\n\n                // Clear the selection\n                draft.selectedNodes = [];\n                draft.isNodeSelected = {};\n                draft.isNodeSelectedNeighbor = {};\n                draft.focalLayout = {};\n            }\n            return;\n        case ACTION_TYPES.LAYOUT_TICK:\n            // Note that in D3, the tick function returns the simulation object itself\n            // In web-cola, the tick function returns whether the simulation has converged\n            if (draft.focalLayout && draft.focalLayout.simulation) {\n                const converged = draft.focalLayout.simulation.tick();\n                draft.focalLayout.coords = draft.focalLayout.simulation.nodes().map((d) => ({\n                    x: d.x,\n                    y: d.y,\n                    g: d.group,\n                }));\n                if (draft.param.focalGraph.layout === \"group-constraint-cola\") {\n                    // This is only a dirty way for quick check\n                    draft.focalLayout.groups = draft.focalLayout.simulation._groups.map((g) => ({\n                        id: g.id,\n                        bounds: g.bounds,\n                    }));\n                    if (converged || draft.focalLayout.simulationTickNumber > 20) {\n                        // if (converged) {\n                        draft.focalLayout.running = false;\n                    }\n                } else {\n                    if (draft.focalLayout.simulationTickNumber === 50) {\n                        draft.focalLayout.running = false;\n                    }\n                }\n                draft.focalLayout.simulationTickNumber += 1;\n            }\n            return;\n\n        // case ACTION_TYPES.CHANGE_EDGE_TYPE_STATE:\n        //     draft.edgeAttributes.type.show[action.idx] = !draft.edgeAttributes.type.show[action.idx];\n        //     return;\n\n        case ACTION_TYPES.SEARCH_NODES:\n            // Remove other node filters, e.g. node attributes\n            draft.param.nodeFilter = { searchLabel: action.label, searchId: action.nodeIdx };\n            if (action.label) {\n                const l = action.label.toLowerCase();\n                draft.highlightedNodes = draft.graph.nodes\n                    .filter((n) => n.label && n.label.toString().toLowerCase().includes(l))\n                    .map((n) => n.id);\n            } else if (\n                action.nodeIdx !== null &&\n                0 <= action.nodeIdx &&\n                action.nodeIdx < draft.graph.nodes.length\n            ) {\n                draft.highlightedNodes = [action.nodeIdx];\n            } else {\n                draft.highlightedNodes = [];\n            }\n            return;\n\n        case ACTION_TYPES.CHANGE_SCATTERPLOT_FORM:\n            const formData = draft.scatterplotForm;\n            formData[action.field] = action.value;\n\n            if (action.field === \"show\" && action.value) {\n                // avoid invalid form data\n                formData.userInterests = \"all\";\n            }\n\n            // compute pairs that fulfill the current condition\n            formData.nodePairs = filterPairsByFormCondition(draft, formData);\n            return;\n        default:\n            return;\n    }\n}, initialState);\n\nexport default reducers;\n","import { bin as d3bin } from \"d3\";\n\nexport default {\n    loaded: false,\n    datasetId: null,\n    datasetName: null,\n    // homePath: \"\",\n    // homePath: '/~zipeng/private/corgie-prototype',\n\n    numNodeClasses: false,\n    hasLinkPredictions: false,\n\n    centralNodeType: 0,\n    nodeColors: [],\n\n    featureAgg: {\n        active: false,\n        hovered: null,\n        highlighted: null,\n        display: [],\n    },\n    nodeAttrs: {\n        active: false,\n        hovered: null,\n        highlighted: null,\n        display: [],\n    },\n\n    selectedNodes: [], // Array of array\n    isNodeSelected: {}, // Dict for ALL selected nodes\n    isNodeSelectedNeighbor: {},\n\n    highlightedNodes: [],\n    highlightedNodePairs: [],\n    highlightedEdges: [], // list of edges between highlighted nodes\n\n    hoveredNodes: [], // either one or two nodes (when hovering on an edge)\n    hoveredNodesAndNeighbors: [], // neighbors of hovered nodes + hovered nodes\n    hoveredEdges: [], // list of edges between hovered nodes and their neighbors\n\n    neighborIntersections: null,\n\n    distances: {\n        maxSample: 1000000,\n        featureScale: null,\n        displaySpecial: [],\n        display: [\n            { isComputing: true, title: \"all (down-sampled)\" },\n            { isComputing: true, title: \"connected by edges\" },\n        ],\n    },\n\n    initialLayout: {\n        running: true,\n    },\n    focalLayout: {\n        running: false,\n    },\n\n    // Form data for the create scatterplot modal\n    scatterplotForm: {\n        show: false,\n        connectivity: \"edge\", // Possible values: all, edge, nonedge\n        userInterests: \"all\", // Possible values: all, highlight, foc-i, foc-i*foc-j\n        linkPrediction: \"all\", // possible values: all, pred-true, pred-false\n        nodePairs: [],\n    },\n\n    param: {\n        hops: 2,\n        hopsHover: 1,\n        hopsHighlight: 0,\n\n        colorBy: \"umap\", // Could be \"umap\" (for emb 2d postion), \"pred-labels\", \"true-labels\", \"correctness\", or a name of the attribute\n        colorScale: null,\n\n        // neighborDistanceMetric: 'hamming',\n        neighborDistanceMetric: \"jaccard\",\n\n        nodeSize: 4,\n\n        // Only highlight nodes of type / label\n        highlightNodeType: \"all\", // \"all\" or integer for a specific node type\n        highlightNodeLabel: \"all\", // \"all\", \"correct\", \"wrong\", \"pred-${k}\", \"true-${k}\" where k is the label ID\n\n        hideHighlightView: false,\n\n        graph: {\n            layout: \"force-directed-d3\",\n            // layout: \"random\",\n            bounded: false,\n        },\n\n        focalGraph: {\n            // layout: 'force-directed-d3',\n            layout: \"umap\",\n            // layout: 'spiral',\n            // layout: 'group-constraint-cola',\n            showSettings: false,\n            useEdgeBundling: true,\n            useGlobalMask: true,\n        },\n\n        embeddings: {\n            maxWindow: false,\n            showEdges: false,\n        },\n        neighborLatentMap: {\n            isOpen: true,\n            hop: 1,\n            useLinearScale: false,\n            showSettings: false,\n        },\n\n        features: {\n            collapsed: [false],\n        },\n\n        // Highlight nodes with the following filter in the node attributes\n        // Either use node attributes or search by labels, one or the other, not the same time.\n        nodeFilter: {\n            whichAttr: null,\n            whichRow: null,\n            brushedArea: null,\n            searchLabel: null,\n            searchId: null,\n            searchShown: false,\n        },\n\n        nodePairFilter: {\n            // ascending: true, // sort the node pairs by latent distance in ascending order\n            isTopoVsLatent: null,\n            which: null,\n            brushedArea: null,\n            useLinearScale: false,\n        },\n        unseenTopK: 5,\n\n        activeDistanceTab: \"topo-vs-latent\",\n    },\n\n    spec: {\n        graph: {\n            paddingTop: 18, // Padding of focal graph to fit in the group label\n            paddingBottom: 2,\n            padding: 10, // padding within group\n            gapBetweenHop: 10,\n            gapBetweenFocal: 16,\n\n            edgeType: \"line\",\n            neighborMarkerMaxHeight: 30,\n            innerRingNodeGap: 10,\n            outerRingNodeGap: 2,\n            minRingGap: 50, // Minimum gap between the two rings (along the radius axis)\n        },\n        latent: {\n            width: 380,\n            height: 380,\n            paddings: { top: 18, bottom: 4, left: 6, right: 6 },\n            widthMax: 800,\n            heightMax: 800,\n            paddingsMax: { top: 20, bottom: 10, left: 10, right: 10 },\n        },\n        neighborLatentMap: {\n            cellSize: 6,\n            gap: 1, // Gap between blocks\n        },\n        intersectionPlot: {\n            margins: { top: 10, bottom: 10, left: 10, right: 10 },\n            topLabelHeight: 30,\n            dotSize: 10,\n            dotMargin: 10,\n            verticalMargin: 5,\n            cardScaleRange: 50,\n            plotHorizontalMargin: 30,\n        },\n        adjacencyMatrix: {\n            margins: { top: 10, bottom: 10, left: 10, right: 80 },\n            rowHeight: 14,\n            colWidth: 14,\n            gap: 6,\n            histogramAreaHeight: 120,\n            histogramHeight: 100,\n            labelHeight: 10,\n\n            labelAreaSize: 100,\n            labelSize: 10, // Must be <= rowHeight and colWidth\n            countAreaSize: 20,\n            countBarHeight: 100,\n        },\n        histogram: {\n            margins: { top: 10, bottom: 18, left: 30, right: 10 },\n            height: 50,\n            width: 100,\n        },\n        partialHistogram: {\n            margins: { top: 10, bottom: 18, left: 30, right: 10 },\n            height: 30,\n            width: 100,\n        },\n        scatterHist: {\n            margins: { top: 15, bottom: 12, left: 18, right: 20 },\n            histHeight: 15,\n            histWidth: 20,\n            scatterHeight: 80,\n            scatterWidth: 80,\n            tickLabelGap: 15,\n            dotSize: 2,\n            numBins: 20,\n            legendWidth: 20,\n            gridBinSize: 0.05,\n        },\n        feature: {\n            cellSize: 6,\n            cellGap: 1,\n            margins: { top: 8, bottom: 8, left: 10, right: 10 },\n            stripMaxWidth: 1000,\n            stripWidth: 2,\n            maxNumStrips: 500, // remember to sync these three values\n            stripHeight: 15,\n        },\n    },\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar, Nav } from \"react-bootstrap\";\n\nexport default function AppNav({ datasetName, stats }) {\n    return (\n        <Navbar expand=\"md\">\n            {/* <Navbar.Brand href=\"/\">Corresponding Features between Graph and Embeddings</Navbar.Brand> */}\n            <Navbar.Brand href={\".\"}>\n                <img alt=\"\" src=\"logo192.png\" width=\"25\" height=\"25\" className=\"d-inline-block align-top\" />{\" \"}\n                CorGIE: <span className=\"text-underline\">Cor</span>responding a{\" \"}\n                <span className=\"text-underline\">G</span>raph to <span className=\"text-underline\">I</span>ts{\" \"}\n                <span className=\"text-underline\">E</span>mbedding\n            </Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <Nav.Item>\n                        <Link to=\"upload\">Upload</Link>\n                    </Nav.Item>\n                </Nav>\n                <Navbar.Text className=\"justify-content-end\">\n                    {datasetName ? `Dataset: ${datasetName} (V=${stats.numNodes}, E=${stats.numEdges})` : \"\"}\n                </Navbar.Text>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n","import React from \"react\";\nimport { Circle, RegularPolygon, Star } from \"react-konva\";\n\nfunction NodeRep({ typeId, x, y, radius, style, events }) {\n    if (typeId === 0) {\n        return <Circle x={x} y={y} radius={radius} {...style} {...events} />;\n    }\n    if (typeId <= 2 || (typeId & 1) === 0) {\n        return <RegularPolygon x={x} y={y} radius={radius} sides={typeId + 2} {...style} {...events} />;\n    }\n    return (\n        <Star\n            numPoints={typeId + 2}\n            innerRadius={radius - 1}\n            outerRadius={radius + 2}\n            x={x}\n            y={y}\n            {...style}\n            {...events}\n        />\n    );\n}\n\nexport default NodeRep;\n","import React, { memo, PureComponent } from \"react\";\nimport { Layer, Group, Line, Rect, Text } from \"react-konva\";\nimport { Animation } from \"konva\";\nimport NodeRep from \"./NodeRep\";\n\n// Visual encoding for focal nodes: black strokes\n// Note that focalGroups is an array of array\nexport const FocusLayer = memo(({ focalGroups, nodes, coords, focalBBox, nodeSize, useStroke }) => (\n    <Layer listening={false}>\n        <Group>\n            {!!focalBBox &&\n                focalBBox.map((h, i) => (\n                    <Group key={i}>\n                        <Rect\n                            x={h.x}\n                            y={h.y - 14}\n                            width={37}\n                            height={14}\n                            strokeEnabled={false}\n                            opacity={0.8}\n                            fill=\"rgb(231, 215, 164)\"\n                        />\n                        <Text x={h.x + 2} y={h.y - 13} text={`foc-${i}`} fontSize={14} />\n                        <Rect {...h} stroke=\"black\" strokeWidth={1} fillEnabled={false} />\n                    </Group>\n                ))}\n        </Group>\n        {focalGroups.map((g, gIdx) => (\n            <Group key={gIdx}>\n                {g.map((nodeIdx, i) => (\n                    <NodeRep\n                        key={i}\n                        x={coords[nodeIdx].x}\n                        y={coords[nodeIdx].y}\n                        radius={nodeSize}\n                        typeId={nodes[nodeIdx].typeId}\n                        style={{\n                            fillEnabled: false,\n                            stroke: useStroke ? useStroke : \"#000\",\n                            strokeWidth: 1,\n                            strokeEnabled: !!useStroke,\n                        }}\n                    />\n                ))}\n            </Group>\n        ))}\n    </Layer>\n));\n\nexport class HighlightLayer extends PureComponent {\n    render() {\n        const {\n            highlightedNodes,\n            highlightedEdges,\n            nodes,\n            nodeColors,\n            coords,\n            nodeSize,\n            edgeBundlePoints,\n            showEdges,\n            width,\n            height,\n        } = this.props;\n        return (\n            <Layer listening={false}>\n                <Rect\n                    x={0}\n                    y={0}\n                    width={width}\n                    height={height}\n                    fill=\"white\"\n                    opacity={0.7}\n                    strokeEnabled={false}\n                />\n                <Group>\n                    {showEdges &&\n                        !!highlightedEdges &&\n                        highlightedEdges.map(\n                            (e, i) =>\n                                coords[e.source] &&\n                                coords[e.target] && (\n                                    <Line\n                                        key={i}\n                                        points={\n                                            edgeBundlePoints\n                                                ? edgeBundlePoints[e.eid]\n                                                : [\n                                                      coords[e.source].x,\n                                                      coords[e.source].y,\n                                                      coords[e.target].x,\n                                                      coords[e.target].y,\n                                                  ]\n                                        }\n                                        stroke=\"black\"\n                                        strokeWidth={1}\n                                        opacity={1}\n                                        tension={edgeBundlePoints ? 0.5 : 0}\n                                    />\n                                )\n                        )}\n                </Group>\n                <Group>\n                    {highlightedNodes.map(\n                        (nodeIdx, i) =>\n                            coords[nodeIdx] && (\n                                <NodeRep\n                                    key={i}\n                                    x={coords[nodeIdx].x}\n                                    y={coords[nodeIdx].y}\n                                    radius={nodeSize}\n                                    typeId={nodes[nodeIdx].typeId}\n                                    style={{ fill: nodeColors[nodeIdx], strokeEnabled: false }}\n                                />\n                            )\n                    )}\n                </Group>\n            </Layer>\n        );\n    }\n}\n\nconst animPeriod = (2 * Math.PI) / 1500;\nexport class HoverLayer extends PureComponent {\n    // componentDidMount() {\n    //     this.anim = new Animation((frame) => {\n    //         this.layer.opacity((Math.sin(frame.time * animPeriod) + 1) / 2);\n    //     }, this.layer);\n\n    //     this.anim.start();\n    // }\n    // componentWillUnmount() {\n    //     if (this.anim) {\n    //         this.anim.stop();\n    //     }\n    // }\n    render() {\n        const {\n            hoveredNodes,\n            hoveredEdges,\n            nodes,\n            coords,\n            nodeColors,\n            nodeSize,\n            edgeBundlePoints,\n            showEdges,\n            width,\n            height,\n        } = this.props;\n        return (\n            <Layer listening={false}>\n                <Rect\n                    x={0}\n                    y={0}\n                    width={width}\n                    height={height}\n                    fill=\"white\"\n                    opacity={0.7}\n                    strokeEnabled={false}\n                />\n                <Group>\n                    {showEdges &&\n                        !!hoveredEdges &&\n                        hoveredEdges.map(\n                            (e, i) =>\n                                coords[e.source] &&\n                                coords[e.target] && (\n                                    <Line\n                                        key={i}\n                                        points={\n                                            edgeBundlePoints\n                                                ? edgeBundlePoints[e.eid]\n                                                : [\n                                                      coords[e.source].x,\n                                                      coords[e.source].y,\n                                                      coords[e.target].x,\n                                                      coords[e.target].y,\n                                                  ]\n                                        }\n                                        stroke=\"black\"\n                                        tension={edgeBundlePoints ? 0.5 : 0}\n                                        strokeWidth={1}\n                                        opacity={1}\n                                    />\n                                )\n                        )}\n                </Group>\n                <Group>\n                    {hoveredNodes.map(\n                        (nodeIdx, i) =>\n                            coords[nodeIdx] && (\n                                <NodeRep\n                                    key={i}\n                                    x={coords[nodeIdx].x}\n                                    y={coords[nodeIdx].y}\n                                    radius={nodeSize * 1.5}\n                                    typeId={nodes[nodeIdx].typeId}\n                                    style={{ fill: nodeColors[nodeIdx], stroke: \"black\", strokeWidth: 2 }}\n                                />\n                            )\n                    )}\n                </Group>\n            </Layer>\n        );\n    }\n}\n","import React, { Component, useCallback, memo } from \"react\";\nimport { connect, ReactReduxContext, Provider } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Stage, Layer, Group, Rect, Line, Text } from \"react-konva\";\nimport debounce from \"lodash.debounce\";\nimport NodeRep from \"./NodeRep\";\nimport { FocusLayer, HighlightLayer, HoverLayer } from \"./NodeLayers\";\nimport { highlightNodes, hoverNode, selectNodePair } from \"../actions\";\nimport { isPointInBox, isNodeBrushable, getNodeEmbeddingColor } from \"../utils\";\n\nconst initState = {\n    mouseDown: false,\n    startPoint: null, // page x and y of starting point\n    endPoint: null,\n    brushedArea: null, // Coordinates for the brushed area\n};\n\nclass GraphLayout extends Component {\n    constructor(props) {\n        super(props);\n        this.stageRef = React.createRef();\n        this.state = initState;\n    }\n\n    // Dup code as in Embeddings2D.js.  TODO: reuse instead dup.\n    callHighlightNodes(brushedArea) {\n        const { nodes, highlightNodeType, highlightNodeLabel } = this.props;\n        const { qt } = this.props.layoutData;\n        const candidates = qt.retrieve(brushedArea);\n        const targetNodes = [];\n        for (let c of candidates) {\n            if (\n                isNodeBrushable(nodes[c.id], highlightNodeType, highlightNodeLabel) &&\n                isPointInBox({ x: c.x + 0.5, y: c.y + 0.5 }, brushedArea)\n            ) {\n                targetNodes.push(c.id);\n            }\n        }\n        console.log({ candidates, targetNodes, brushedArea });\n        // if (targetNodes.length == 0) return;\n\n        this.props.highlightNodes(targetNodes, brushedArea, this.props.fromView, null);\n    }\n    _onMouseDown() {\n        const mousePos = this.stageRef.current.getPointerPosition();\n        let nextState = {\n            mouseDown: true,\n            startPoint: mousePos,\n            endPoint: mousePos,\n            brushedArea: { x: mousePos.x, y: mousePos.y, width: 0, height: 0 },\n        };\n        this.setState(nextState);\n\n        this.stageRef.current.on(\"mousemove\", () => {\n            const curPos = this.stageRef.current.getPointerPosition();\n            this.setState({\n                endPoint: curPos,\n                brushedArea: this._getBrushedArea(curPos),\n            });\n        });\n        this.stageRef.current.on(\"mouseup\", () => {\n            this.stageRef.current.off(\"mousemove\");\n            this.stageRef.current.off(\"mouseup\");\n            const b = { ...this.state.brushedArea };\n            this.setState(initState);\n            this.callHighlightNodes(b);\n        });\n    }\n    _getBrushedArea(curPos) {\n        const p1 = this.state.startPoint,\n            p2 = curPos;\n        const minX = Math.min(p1.x, p2.x),\n            minY = Math.min(p1.y, p2.y),\n            maxX = Math.max(p1.x, p2.x),\n            maxY = Math.max(p1.y, p2.y);\n        return { x: minX, y: minY, width: maxX - minX, height: maxY - minY };\n    }\n\n    render() {\n        const {\n            layoutData,\n            nodes,\n            nodeColors,\n            selectedNodes,\n            highlightedNodes,\n            highlightedEdges,\n            hoveredNodesAndNeighbors,\n            hoveredEdges,\n            fromView,\n            colorBy,\n            showEdges,\n            useEdgeBundling,\n        } = this.props;\n        const { width, height, coords, groups, qt, focalBBox } = layoutData;\n        const canvasW = width + 2,\n            canvasH = height + 2;\n        const ebp = showEdges === \"bundled\" && useEdgeBundling ? layoutData.edgeBundlePoints : null;\n        const baseNodeColors = fromView === \"emb\" && colorBy === \"umap\" ? \"black\" : nodeColors;\n\n        let { nodeSize } = this.props;\n        if (fromView === \"emb\") {\n            nodeSize--;\n        }\n\n        return (\n            <ReactReduxContext.Consumer>\n                {({ store }) => (\n                    <Stage\n                        width={canvasW}\n                        height={canvasH}\n                        ref={this.stageRef}\n                        onMouseDown={!!qt ? this._onMouseDown.bind(this) : () => {}}\n                    >\n                        <Provider store={store}>\n                            {fromView === \"emb\" && colorBy === \"umap\" && <ColorTiles w={width} />}\n                            <BaseLayer\n                                coords={coords}\n                                groups={groups}\n                                nodeSize={nodeSize}\n                                edgeBundlePoints={ebp}\n                                nodeColors={baseNodeColors}\n                                fromView={fromView}\n                                showEdges={showEdges}\n                            />\n\n                            {selectedNodes.length > 0 && (\n                                <FocusLayer\n                                    focalGroups={selectedNodes}\n                                    focalBBox={focalBBox}\n                                    coords={coords}\n                                    nodes={nodes}\n                                    nodeColors={baseNodeColors}\n                                    nodeSize={nodeSize}\n                                    useStroke={\n                                        this.props.useStrokeForFocal\n                                            ? fromView === \"emb\"\n                                                ? \"#aaa\"\n                                                : \"#000\"\n                                            : false\n                                    }\n                                    showEdges={showEdges}\n                                />\n                            )}\n                            {highlightedNodes.length > 0 && (\n                                <HighlightLayer\n                                    highlightedNodes={highlightedNodes}\n                                    highlightedEdges={highlightedEdges}\n                                    coords={coords}\n                                    edgeBundlePoints={ebp}\n                                    nodes={nodes}\n                                    nodeColors={nodeColors}\n                                    nodeSize={nodeSize}\n                                    width={canvasW}\n                                    height={canvasH}\n                                    showEdges={showEdges}\n                                />\n                            )}\n                            {hoveredNodesAndNeighbors.length > 0 && (\n                                <HoverLayer\n                                    hoveredNodes={hoveredNodesAndNeighbors}\n                                    hoveredEdges={hoveredEdges}\n                                    coords={coords}\n                                    nodes={nodes}\n                                    edgeBundlePoints={ebp}\n                                    nodeColors={nodeColors}\n                                    nodeSize={nodeSize}\n                                    width={canvasW}\n                                    height={canvasH}\n                                    showEdges={showEdges}\n                                />\n                            )}\n                            {this.state.brushedArea && (\n                                <Layer>\n                                    <Rect\n                                        {...this.state.brushedArea}\n                                        fill=\"blue\"\n                                        opacity={0.3}\n                                        stroke=\"grey\"\n                                        strokeWidth={1}\n                                    />\n                                </Layer>\n                            )}\n                        </Provider>\n                    </Stage>\n                )}\n            </ReactReduxContext.Consumer>\n        );\n    }\n}\nconst mapStateToProps = (state) => ({\n    nodes: state.graph.nodes,\n    edges: state.graph.edges,\n    nodeSize: state.param.nodeSize,\n    useEdgeBundling: state.param.focalGraph.useEdgeBundling,\n    nodeColors: state.nodeColors,\n    colorBy: state.param.colorBy,\n    selectedNodes: state.selectedNodes,\n    highlightedNodes: state.highlightedNodes,\n    highlightedEdges: state.highlightedEdges,\n    hoveredNodesAndNeighbors: state.hoveredNodesAndNeighbors,\n    hoveredEdges: state.hoveredEdges,\n    highlightNodeType: state.param.highlightNodeType,\n    highlightNodeLabel: state.param.highlightNodeLabel,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators(\n        {\n            highlightNodes,\n            hoverNode,\n            selectNodePair,\n        },\n        dispatch\n    );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphLayout);\n\nfunction BaseLayerUnconnected({\n    nodes,\n    edges,\n    coords,\n    edgeBundlePoints,\n    showEdges,\n    nodeColors,\n    groups,\n    hoverNode,\n    highlightNodes,\n    nodeSize,\n    fromView,\n}) {\n    console.log(\"BaseLayer render()\", fromView);\n    const debouncedHover = useCallback(debounce((x) => hoverNode(x), 300));\n\n    return (\n        <Layer>\n            {showEdges && (\n                <Group>\n                    {edges.map(\n                        (e, i) =>\n                            coords[e.source] &&\n                            coords[e.target] && (\n                                <Line\n                                    key={i}\n                                    points={\n                                        edgeBundlePoints\n                                            ? edgeBundlePoints[i]\n                                            : [\n                                                  coords[e.source].x,\n                                                  coords[e.source].y,\n                                                  coords[e.target].x,\n                                                  coords[e.target].y,\n                                              ]\n                                    }\n                                    stroke=\"#aaa\"\n                                    strokeWidth={1}\n                                    hitStrokeWidth={2}\n                                    opacity={edgeBundlePoints ? 0.3 : 0.3}\n                                    tension={edgeBundlePoints ? 0.5 : 0}\n                                    onMouseOver={debouncedHover.bind(null, [e.source, e.target])}\n                                    onMouseOut={debouncedHover.bind(null, null)}\n                                    onClick={highlightNodes.bind(\n                                        null,\n                                        [e.source, e.target],\n                                        null,\n                                        \"graph-edge\",\n                                        null\n                                    )}\n                                />\n                            )\n                    )}\n                </Group>\n            )}\n            <Group>\n                {coords.map(\n                    (c, i) =>\n                        c && (\n                            <NodeRep\n                                key={i}\n                                x={c.x}\n                                y={c.y}\n                                radius={nodeSize}\n                                typeId={nodes[i].typeId}\n                                style={{\n                                    // fill: nodeColors.length ? nodeColors[i] : nodeColors,\n                                    fill: Array.isArray(nodeColors) ? nodeColors[i] : nodeColors,\n                                    opacity: 1,\n                                    strokeEnabled: false,\n                                }}\n                                events={{\n                                    onMouseOver: debouncedHover.bind(null, i),\n                                    onMouseOut: debouncedHover.bind(null, null),\n                                    onClick: highlightNodes.bind(null, [i], null, fromView, null),\n                                }}\n                            />\n                        )\n                )}\n            </Group>\n            {groups && (\n                <Group>\n                    {groups.map((g, i) => (\n                        <Group key={i}>\n                            <Rect\n                                x={g.bounds.x}\n                                y={g.bounds.y - 16}\n                                width={70 + Math.floor(Math.log10(g.num)) * 6}\n                                height={16}\n                                opacity={0.8}\n                                fill=\"rgb(231, 215, 164)\"\n                                stroke=\"rgb(231, 215, 164)\"\n                                strokeWidth={1}\n                            />\n                            <Rect\n                                x={g.bounds.x}\n                                y={g.bounds.y}\n                                width={g.bounds.width}\n                                height={g.bounds.height}\n                                // stroke=\"black\"\n                                // stroke=\"#af7c0d\"\n                                stroke=\"rgb(231, 215, 164)\"\n                                strokeWidth={2}\n                                // dash={[2, 2]}\n                                fillEnabled={false}\n                            />\n                            <Text\n                                text={`${g.name} (#=${g.num})`}\n                                x={g.bounds.x + 4}\n                                y={g.bounds.y - 14}\n                                fontSize={12}\n                            />\n                        </Group>\n                    ))}\n                </Group>\n            )}\n        </Layer>\n    );\n}\n\nconst mapStateToPropsBaseLayer = (state) => ({\n    nodes: state.graph.nodes,\n    edges: state.graph.edges,\n});\n\nconst BaseLayer = connect(mapStateToPropsBaseLayer, mapDispatchToProps)(BaseLayerUnconnected);\n\nconst ColorTiles = memo(({ w }) => {\n    const unitSize = 5,\n        num = w / unitSize;\n    const tileArr = new Array(num).fill(0);\n    return (\n        <Layer listening={false}>\n            {tileArr.map((_, i) => (\n                <Group key={i}>\n                    {tileArr.map((_, j) => (\n                        <Rect\n                            key={j}\n                            x={i * unitSize}\n                            y={j * unitSize}\n                            width={unitSize}\n                            height={unitSize}\n                            fill={getNodeEmbeddingColor(i / num, j / num)}\n                            strokeEnabled={false}\n                        />\n                    ))}\n                </Group>\n            ))}\n        </Layer>\n    );\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Spinner } from \"react-bootstrap\";\nimport GraphLayout from \"./GraphLayout\";\nimport { changeFocalParam } from \"../actions\";\n\nexport const ComputingSpinner = () => (\n    <div style={{ margin: \"10px\" }}>\n        <Spinner animation=\"border\" role=\"status\" size=\"sm\" />\n        <span style={{ marginLeft: \"10px\" }}>Computing...</span>\n    </div>\n);\n\nfunction GraphView({ initialLayout }) {\n    return (\n        <div className=\"view\" id=\"initial-graph-view\">\n            <h5 className=\"view-title text-center\">Global Topology</h5>\n            <div className=\"view-body\">\n                {initialLayout.running ? (\n                    <ComputingSpinner />\n                ) : (\n                    <GraphLayout\n                        layoutData={initialLayout}\n                        useStrokeForFocal={true}\n                        fromView=\"graph-layout\"\n                        showEdges={true}\n                    />\n                )}\n            </div>\n            <div className=\"view-footer\">\n                #nodes: {initialLayout.numNodes}, #edges: {initialLayout.numEdges}, Layout algorithm:{\" \"}\n                {initialLayout.name}\n            </div>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => ({\n    initialLayout: state.initialLayout,\n});\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({ changeFocalParam }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GraphView);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Spinner, Form, Modal, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faWrench } from \"@fortawesome/free-solid-svg-icons\";\nimport { faQuestionCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport GraphLayout from \"./GraphLayout\";\nimport { ComputingSpinner } from \"./InitialLayoutView\";\nimport { changeFocalParam } from \"../actions\";\n\nconst SettingModal = ({ params, changeFocalParam, hops }) => (\n    <Modal\n        show={params.showSettings}\n        centered\n        id=\"focal-layout-settings-modal\"\n        onHide={changeFocalParam.bind(null, \"focalGraph.showSettings\", false)}\n    >\n        <Modal.Header closeButton>\n            <Modal.Title>Settings for focal graph layout</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <Form>\n                <Form.Group>\n                    <Form.Check\n                        custom\n                        type=\"radio\"\n                        id=\"use-edge-bundling-1\"\n                        checked={params.useEdgeBundling}\n                        onChange={changeFocalParam.bind(null, \"focalGraph.useEdgeBundling\", true)}\n                        label=\"edge bundling (curved edges)\"\n                    />\n                    <Form.Check\n                        custom\n                        type=\"radio\"\n                        id=\"use-edge-bundling-2\"\n                        checked={!params.useEdgeBundling}\n                        onChange={changeFocalParam.bind(null, \"focalGraph.useEdgeBundling\", false)}\n                        label=\"straight edges\"\n                    />\n                </Form.Group>\n                {hops > 1 && (\n                    <Form.Group>\n                        <Form.Check\n                            custom\n                            type=\"radio\"\n                            id=\"use-global-mask-1\"\n                            checked={params.useGlobalMask}\n                            onChange={changeFocalParam.bind(null, \"focalGraph.useGlobalMask\", true)}\n                            label={`use ${hops} hops to compute distance (as in GNN trainning)`}\n                        />\n                        <Form.Check\n                            custom\n                            type=\"radio\"\n                            id=\"use-global-mask-2\"\n                            checked={!params.useGlobalMask}\n                            onChange={changeFocalParam.bind(null, \"focalGraph.useGlobalMask\", false)}\n                            label=\"use 1 hop only\"\n                        />\n                    </Form.Group>\n                )}\n            </Form>\n        </Modal.Body>\n    </Modal>\n);\n\nfunction FocalLayoutView({ focalLayout, hasFocalNodes, hops, params, changeFocalParam, focalAlg }) {\n    return (\n        <div className={`view ${hasFocalNodes ? \"\" : \"no-layout\"}`} id=\"focal-graph-view\">\n            <h5 className=\"view-title text-center\">\n                K-hop Topology\n                <span style={{ marginLeft: \"5px\", cursor: \"pointer\" }}>\n                    <OverlayTrigger\n                        placement=\"right\"\n                        overlay={\n                            <Tooltip id=\"distance-view-tooltip\">\n                                Nodes of each group are layout using UMAP independently with the topological\n                                distance metric (Jaccard Index). Nodes outside {hops} hops are not shown.\n                            </Tooltip>\n                        }\n                    >\n                        <FontAwesomeIcon icon={faQuestionCircle} />\n                    </OverlayTrigger>\n                </span>\n                <span\n                    className=\"right-btn\"\n                    onClick={changeFocalParam.bind(null, \"focalGraph.showSettings\", true)}\n                >\n                    <FontAwesomeIcon icon={faWrench} />\n                </span>\n            </h5>\n            <div className=\"view-body\">\n                {!hasFocalNodes && (\n                    <div>\n                        No focal groups yet. Try highlight nodes (by brushing / clicking) and then create\n                        focal groups.\n                    </div>\n                )}\n                {hasFocalNodes && (\n                    <div>\n                        {focalLayout.running ? (\n                            <ComputingSpinner />\n                        ) : (\n                            <GraphLayout\n                                layoutData={focalLayout}\n                                useStrokeForFocal={false}\n                                fromView=\"graph-layout\"\n                                showEdges={params.useEdgeBundling ? \"bundled\" : true}\n                            />\n                        )}\n                        {!!focalLayout.runningMsg && (\n                            <div style={{ margin: \"10px\" }}>\n                                <Spinner animation=\"border\" role=\"status\" size=\"sm\" />\n                                <span style={{ marginLeft: \"10px\" }}>{focalLayout.runningMsg}</span>\n                            </div>\n                        )}\n                    </div>\n                )}\n            </div>\n            {hasFocalNodes && (\n                <div className=\"view-footer\">\n                    #nodes: {focalLayout.numNodes}, #edges: {focalLayout.numEdges} \n                    {/* , Layout algorithm:{\" \"} {focalLayout.name} */}\n                </div>\n            )}\n\n            <SettingModal params={params} changeFocalParam={changeFocalParam} hops={hops} />\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => ({\n    hasFocalNodes: state.selectedNodes.length > 0,\n    hops: state.param.hops,\n    focalAlg: state.param.focalGraph.layout,\n    params: state.param.focalGraph,\n    focalLayout: state.focalLayout,\n});\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({ changeFocalParam }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FocalLayoutView);\n","import React from \"react\";\n\nexport default function ColorLegend({ cn, scale, domain, numFormat }) {\n    const e = domain? domain: scale.domain();\n    const colorMin = scale(e[0]),\n        colorMid = scale((e[0] + e[1]) / 2),\n        colorMax = scale(e[1]);\n\n    return (\n        <div className={cn}>\n            <span style={{ marginRight: \"3px\" }}>{numFormat ? numFormat(e[0]) : e[0]}</span>\n            <div\n                style={{\n                    display: \"inline-block\",\n                    height: \"10px\",\n                    width: \"100px\",\n                    background: `linear-gradient(90deg, ${colorMin} 0%, ${colorMid} 50%, ${colorMax} 100%)`,\n                }}\n            ></div>\n            <span style={{ marginLeft: \"3px\" }}>{numFormat ? numFormat(e[1]) : e[1]}</span>\n        </div>\n    );\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Dropdown, Button, ButtonGroup, Form } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCaretRight, faCaretDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { format as d3Format } from \"d3\";\nimport { Stage, Layer } from \"react-konva\";\nimport { range as lodashRange } from \"lodash\";\nimport { highlightNodes, changeHops, changeParam, hoverNode, searchNodes } from \"../actions\";\nimport ColorLegend from \"./ColorLegend\";\nimport NodeRep from \"./NodeRep\";\n\nexport class SettingsView extends Component {\n    colorByNaming = {\n        umap: \"UMAP position\",\n        \"pred-labels\": \"predicted labels\",\n        \"true-labels\": \"true labels\",\n        correctness: \"label correctness\",\n        \"node-type\": \"node type\",\n    };\n    nodeLabelNaming = {\n        all: \"all\",\n        correct: \"correct prediction\",\n        wrong: \"wrong prediction\",\n    };\n\n    componentDidMount() {\n        const { attrMeta, numNodeClasses } = this.props;\n        for (let i = 0; i < attrMeta.length; i++) {\n            const a = attrMeta[i];\n            this.colorByNaming[i] = `${a.nodeType}: ${a.name}`; // Use the attribute name as colorBy for convinience\n        }\n        if (numNodeClasses) {\n            for (let i = 0; i < numNodeClasses; i++) {\n                this.nodeLabelNaming[`pred-${i}`] = `predicted: ${i}`;\n                this.nodeLabelNaming[`true-${i}`] = `true: ${i}`;\n            }\n        }\n    }\n\n    hoverNodeType(typeId) {\n        const { nodes } = this.props.graph;\n        const targets = nodes.filter((x) => x.typeId === typeId).map((x) => x.id);\n        this.props.hoverNode(targets);\n    }\n\n    hoverNodeLabel(labelId) {\n        const { nodes } = this.props.graph;\n        const { colorBy } = this.props.param;\n        const f = colorBy === \"pred-labels\" ? \"pl\" : \"tl\";\n        const targets = nodes.filter((x) => x[f] === labelId).map((x) => x.id);\n        this.props.hoverNode(targets);\n    }\n\n    callSearch(e) {\n        e.preventDefault();\n        const formData = new FormData(e.target),\n            { searchLabel, searchId } = Object.fromEntries(formData.entries());\n        if (searchLabel) {\n            this.props.searchNodes(searchLabel, null);\n        } else {\n            const t = parseInt(searchId);\n            if (!isNaN(t)) {\n                this.props.searchNodes(null, t);\n            }\n        }\n    }\n\n    render() {\n        const { graph, param, attrMeta, changeParam, hoverNode, highlightNodes } = this.props;\n        const { numNodeClasses, hasLinkPredictions } = this.props;\n        const { colorByNaming, nodeLabelNaming } = this;\n        const { nodeTypes } = graph;\n        const { colorBy, colorScale, nodeSize, hops, hopsHover, hopsHighlight } = param;\n        const { searchShown } = param.nodeFilter;\n        const { highlightNodeType, highlightNodeLabel } = param;\n        let e, numberFormat;\n        const useAttrColors = Number.isInteger(colorBy);\n        if (useAttrColors) {\n            e = colorScale.domain();\n            numberFormat = e[0] < 1 ? d3Format(\"~g\") : d3Format(\"~s\");\n        }\n\n        return (\n            <div id=\"settings-view\" className=\"view\">\n                <h5 className=\"view-title text-center\">Settings</h5>\n                <div className=\"view-body\">\n                    <div style={{ marginRight: \"5px\" }}>\n                        {/* <div className=\"text-center\">Node visuals</div> */}\n                        {/* Shape legends for node type  */}\n                        {nodeTypes.length > 1 && (\n                            <div className=\"setting-item\">\n                                {/* <div className=\"setting-label\">Shape:</div> */}\n                                <div className=\"node-rep-legends node-shape\">\n                                    {nodeTypes.map((nt, i) => (\n                                        <div\n                                            className=\"legend-item\"\n                                            key={i}\n                                            onMouseOver={this.hoverNodeType.bind(this, i)}\n                                            onMouseOut={hoverNode.bind(null, null)}\n                                            onClick={highlightNodes.bind(null, null, null, \"node-type\", i)}\n                                        >\n                                            <div className=\"visual-block\">\n                                                <Stage width={14} height={14}>\n                                                    <Layer>\n                                                        <NodeRep\n                                                            x={7}\n                                                            y={7}\n                                                            radius={5}\n                                                            typeId={i}\n                                                            style={{\n                                                                fill:\n                                                                    colorBy === \"node-type\"\n                                                                        ? nt.color\n                                                                        : \"grey\",\n                                                                strokeEnabled: false,\n                                                            }}\n                                                        />\n                                                    </Layer>\n                                                </Stage>\n                                            </div>\n                                            <div className=\"legend-label\">{`${nt.name} (${nt.count})`}</div>\n                                        </div>\n                                    ))}\n                                </div>\n                            </div>\n                        )}\n\n                        <div className=\"setting-item\">\n                            <div className=\"setting-label\">Color:</div>\n                            <div style={{ display: \"inline-block\" }}>\n                                <Dropdown\n                                    onSelect={(k) => {\n                                        changeParam(\"colorBy\", k, false);\n                                    }}\n                                >\n                                    <Dropdown.Toggle id=\"color-by-toggle-btn\" size=\"xxs\" variant=\"primary\">\n                                        {colorByNaming[colorBy]}\n                                    </Dropdown.Toggle>\n\n                                    <Dropdown.Menu>\n                                        <Dropdown.Item eventKey=\"umap\" active={colorBy === \"umap\"}>\n                                            {colorByNaming[\"umap\"]}\n                                        </Dropdown.Item>\n\n                                        {numNodeClasses && (\n                                            <div>\n                                                <Dropdown.Divider />\n                                                {[\"pred-labels\", \"true-labels\", \"correctness\"].map((k) => (\n                                                    <Dropdown.Item\n                                                        key={k}\n                                                        eventKey={k}\n                                                        active={colorBy === k}\n                                                    >\n                                                        {colorByNaming[k]}\n                                                    </Dropdown.Item>\n                                                ))}\n                                            </div>\n                                        )}\n\n                                        {hasLinkPredictions && (\n                                            <div>\n                                                <Dropdown.Divider />\n                                                <Dropdown.Item\n                                                    eventKey={\"correctness\"}\n                                                    active={colorBy === \"correctness\"}\n                                                >\n                                                    {colorByNaming[\"correctness\"]}\n                                                </Dropdown.Item>\n                                            </div>\n                                        )}\n\n                                        {attrMeta.length > 0 && <Dropdown.Divider />}\n                                        {attrMeta.map((a, i) => (\n                                            <Dropdown.Item key={i} eventKey={i} active={colorBy === i}>\n                                                {`${a.nodeType}: ${a.name}`}\n                                            </Dropdown.Item>\n                                        ))}\n\n                                        {nodeTypes.length > 1 && (\n                                            <div>\n                                                <Dropdown.Divider />\n                                                <Dropdown.Item eventKey=\"node-type\">\n                                                    {colorByNaming[\"node-type\"]}\n                                                </Dropdown.Item>\n                                            </div>\n                                        )}\n                                    </Dropdown.Menu>\n                                </Dropdown>\n                            </div>\n\n                            {/* Color legends */}\n                            {useAttrColors && (\n                                <ColorLegend\n                                    cn=\"node-rep-legends node-color\"\n                                    scale={colorScale}\n                                    numFormat={numberFormat}\n                                />\n                            )}\n                            {/* {colorBy === \"umap\" && (\n                                    <div className=\"node-rep-legends node-color\">See colors below</div>\n                                )} */}\n                            {colorBy === \"correctness\" && (\n                                <div className=\"node-rep-legends node-color\">\n                                    <div className=\"legend-item\">\n                                        <div\n                                            className=\"visual-block\"\n                                            style={{ backgroundColor: colorScale(false) }}\n                                        ></div>\n                                        <div className=\"legend-label\">correct</div>\n                                    </div>\n                                    <div className=\"legend-item\">\n                                        <div\n                                            className=\"visual-block\"\n                                            style={{ backgroundColor: colorScale(true) }}\n                                        ></div>\n                                        <div className=\"legend-label\">wrong</div>\n                                    </div>\n                                </div>\n                            )}\n                            {(colorBy === \"pred-labels\" || colorBy === \"true-labels\") && (\n                                <div className=\"node-rep-legends node-color\">\n                                    {lodashRange(numNodeClasses).map((i) => (\n                                        <div\n                                            className=\"legend-item\"\n                                            key={i}\n                                            onMouseOver={this.hoverNodeLabel.bind(this, i)}\n                                            onMouseOut={hoverNode.bind(null, null)}\n                                            onClick={highlightNodes.bind(null, null, null, \"node-label\", i)}\n                                        >\n                                            <div\n                                                className=\"visual-block\"\n                                                style={{ backgroundColor: colorScale(i) }}\n                                            ></div>\n                                            <div className=\"legend-label\">{i}</div>\n                                        </div>\n                                    ))}\n                                </div>\n                            )}\n                        </div>\n\n                        <div className=\"setting-item\">\n                            <div className=\"setting-label\">Size:</div>\n                            <ButtonGroup size=\"xxs\">\n                                <Button\n                                    variant=\"outline-secondary\"\n                                    onClick={changeParam.bind(null, \"nodeSize\", nodeSize + 1, false, null)}\n                                >\n                                    +\n                                </Button>\n                                <Button\n                                    variant=\"outline-secondary\"\n                                    onClick={() => {\n                                        if (nodeSize > 1) {\n                                            changeParam(\"nodeSize\", nodeSize - 1);\n                                        }\n                                    }}\n                                >\n                                    -\n                                </Button>\n                            </ButtonGroup>\n                        </div>\n                    </div>\n                    <div style={{ marginTop: \"10px\" }}>\n                        {/* <div className=\"text-center\">Filter for Interaction</div> */}\n\n                        {(nodeTypes.length > 1 || numNodeClasses) && (\n                            <div className=\"setting-item\">\n                                <div style={{ marginRight: \"5px\" }}>brushable targets: </div>\n                                {nodeTypes.length > 1 && (\n                                    <div style={{ marginRight: \"15px\" }}>\n                                        {/* <span style={{ marginRight: \"5px\" }}>by node type</span> */}\n                                        <Dropdown\n                                            onSelect={(k) => {\n                                                changeParam(\n                                                    \"highlightNodeType\",\n                                                    k === \"all\" ? k : parseInt(k)\n                                                );\n                                            }}\n                                        >\n                                            <Dropdown.Toggle\n                                                id=\"highlight-node-type-dropdown\"\n                                                size=\"xxs\"\n                                                variant=\"primary\"\n                                            >\n                                                {highlightNodeType === \"all\"\n                                                    ? \"all\"\n                                                    : nodeTypes[highlightNodeType].name}\n                                            </Dropdown.Toggle>\n\n                                            <Dropdown.Menu>\n                                                <Dropdown.Item\n                                                    eventKey=\"all\"\n                                                    active={highlightNodeType === \"all\"}\n                                                >\n                                                    all\n                                                </Dropdown.Item>\n                                                <Dropdown.Divider />\n                                                {nodeTypes.map((nt, i) => (\n                                                    <Dropdown.Item\n                                                        key={i}\n                                                        eventKey={i}\n                                                        active={highlightNodeType === i}\n                                                    >\n                                                        node type: {nt.name}\n                                                    </Dropdown.Item>\n                                                ))}\n                                            </Dropdown.Menu>\n                                        </Dropdown>\n                                    </div>\n                                )}\n                                {numNodeClasses && (\n                                    <div>\n                                        {/* <span style={{ marginRight: \"5px\" }}>by node labels</span> */}\n                                        <Dropdown\n                                            onSelect={(k) => {\n                                                changeParam(\"highlightNodeLabel\", k);\n                                            }}\n                                        >\n                                            <Dropdown.Toggle\n                                                id=\"highlight-node-type-dropdown\"\n                                                size=\"xxs\"\n                                                variant=\"primary\"\n                                            >\n                                                {nodeLabelNaming[highlightNodeLabel]}\n                                            </Dropdown.Toggle>\n\n                                            <Dropdown.Menu>\n                                                <Dropdown.Item\n                                                    eventKey=\"all\"\n                                                    active={highlightNodeLabel === \"all\"}\n                                                >\n                                                    {nodeLabelNaming[\"all\"]}\n                                                </Dropdown.Item>\n                                                <Dropdown.Divider />\n\n                                                <Dropdown.Item\n                                                    eventKey=\"correct\"\n                                                    active={highlightNodeLabel === \"correct\"}\n                                                >\n                                                    {nodeLabelNaming[\"correct\"]}\n                                                </Dropdown.Item>\n                                                <Dropdown.Item\n                                                    eventKey=\"wrong\"\n                                                    active={highlightNodeLabel === \"wrong\"}\n                                                >\n                                                    {nodeLabelNaming[\"wrong\"]}\n                                                </Dropdown.Item>\n                                                <Dropdown.Divider />\n\n                                                {lodashRange(numNodeClasses)\n                                                    .map((labelId) => `pred-${labelId}`)\n                                                    .map((k, i) => (\n                                                        <Dropdown.Item\n                                                            key={k}\n                                                            eventKey={k}\n                                                            active={highlightNodeLabel === k}\n                                                        >\n                                                            {`predicted: ${i}`}\n                                                        </Dropdown.Item>\n                                                    ))}\n                                                <Dropdown.Divider />\n\n                                                {lodashRange(numNodeClasses)\n                                                    .map((labelId) => `true-${labelId}`)\n                                                    .map((k, i) => (\n                                                        <Dropdown.Item\n                                                            key={k}\n                                                            eventKey={k}\n                                                            active={highlightNodeLabel === k}\n                                                        >\n                                                            {`truth: ${i}`}\n                                                        </Dropdown.Item>\n                                                    ))}\n                                            </Dropdown.Menu>\n                                        </Dropdown>\n                                    </div>\n                                )}\n                            </div>\n                        )}\n\n                        <div className=\"setting-item\">\n                            <span style={{ marginRight: \"5px\" }}>hops for hover:</span>\n                            <div style={{ display: \"inline-block\" }}>\n                                <Dropdown\n                                    onSelect={(h) => {\n                                        changeParam(\"hopsHover\", parseInt(h), false);\n                                    }}\n                                >\n                                    <Dropdown.Toggle id=\"hops-hover\" size=\"xxs\" variant=\"primary\">\n                                        {hopsHover}\n                                    </Dropdown.Toggle>\n\n                                    <Dropdown.Menu>\n                                        {new Array(hops + 1).fill(0).map((_, i) => (\n                                            <Dropdown.Item key={i} eventKey={i} active={hopsHover === i}>\n                                                {i}\n                                            </Dropdown.Item>\n                                        ))}\n                                    </Dropdown.Menu>\n                                </Dropdown>\n                            </div>\n                        </div>\n\n                        <div className=\"setting-item\">\n                            <span style={{ marginRight: \"5px\" }}>hops for highlight:</span>\n                            <div style={{ display: \"inline-block\" }}>\n                                <Dropdown\n                                    onSelect={(h) => {\n                                        changeParam(\"hopsHighlight\", parseInt(h), false);\n                                    }}\n                                >\n                                    <Dropdown.Toggle id=\"hops-highlight\" size=\"xxs\" variant=\"primary\">\n                                        {hopsHighlight}\n                                    </Dropdown.Toggle>\n\n                                    <Dropdown.Menu>\n                                        {new Array(hops + 1).fill(0).map((_, i) => (\n                                            <Dropdown.Item key={i} eventKey={i} active={hopsHighlight === i}>\n                                                {i}\n                                            </Dropdown.Item>\n                                        ))}\n                                    </Dropdown.Menu>\n                                </Dropdown>\n                            </div>\n                        </div>\n\n                        <div className=\"setting-item\">\n                            <div>\n                                <span\n                                    style={{ cursor: \"pointer\" }}\n                                    onClick={changeParam.bind(\n                                        null,\n                                        \"nodeFilter.searchShown\",\n                                        null,\n                                        true,\n                                        null\n                                    )}\n                                >\n                                    <FontAwesomeIcon icon={searchShown ? faCaretDown: faCaretRight} />\n                                </span>\n                                <span style={{ marginLeft: \"5px\" }}>Search nodes by</span>\n                            </div>\n                            {searchShown && (\n                                <Form\n                                    inline\n                                    onSubmit={this.callSearch.bind(this)}\n                                    style={{ marginLeft: \"9px\" }}\n                                >\n                                    <Form.Control\n                                        className=\"search-text-box\"\n                                        id=\"search-node-label\"\n                                        placeholder=\"label\"\n                                        name=\"searchLabel\"\n                                        size=\"sm\"\n                                    ></Form.Control>\n                                    <span style={{ margin: \"0 5px\" }}>or</span>\n                                    <Form.Control\n                                        className=\"search-text-box\"\n                                        id=\"search-node-id\"\n                                        placeholder=\"id\"\n                                        name=\"searchId\"\n                                        size=\"sm\"\n                                    ></Form.Control>\n                                    <Button\n                                        variant=\"outline-secondary\"\n                                        size=\"xs\"\n                                        style={{ marginLeft: \"5px\" }}\n                                        type=\"submit\"\n                                    >\n                                        search\n                                    </Button>\n                                </Form>\n                            )}\n                        </div>\n                    </div>\n                </div>\n\n                {colorBy === \"correctness\" && hasLinkPredictions && (\n                    <div className=\"view-footer\">\n                        Note: nodes with a wrong predicted link are deemed wrong.\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    graph: state.graph,\n    param: state.param,\n    attrMeta: state.attrMeta,\n    numNodeClasses: state.numNodeClasses,\n    hasLinkPredictions: state.hasLinkPredictions,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators(\n        {\n            highlightNodes,\n            hoverNode,\n            changeHops,\n            changeParam,\n            searchNodes,\n        },\n        dispatch\n    );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsView);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Form, Modal } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faExpandAlt, faCompressAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport GraphLayout from \"./GraphLayout\";\nimport SettingsView from \"./SettingsView\";\nimport { changeParam } from \"../actions\";\n\nclass EmbeddingsView extends Component {\n    renderForm() {\n        const { showEdges, changeParam } = this.props;\n        return (\n            <Form inline>\n                <Form.Group>\n                    <Form.Label>Show graph edges: </Form.Label>\n\n                    <Form.Check\n                        style={{ marginLeft: \"5px\" }}\n                        type=\"radio\"\n                        id=\"emb-show-edge-none\"\n                        checked={!showEdges}\n                        onChange={changeParam.bind(null, \"embeddings.showEdges\", false, null, null)}\n                        label=\"None\"\n                    />\n                    <Form.Check\n                        style={{ marginLeft: \"5px\" }}\n                        type=\"radio\"\n                        id=\"emb-show-edge-bundle\"\n                        checked={showEdges === \"bundled\"}\n                        onChange={changeParam.bind(null, \"embeddings.showEdges\", \"bundled\", null, null)}\n                        label=\"bundled\"\n                    />\n                    <Form.Check\n                        style={{ marginLeft: \"5px\" }}\n                        type=\"radio\"\n                        id=\"emb-show-edge-straight\"\n                        checked={showEdges === \"straight\"}\n                        onChange={changeParam.bind(null, \"embeddings.showEdges\", \"straight\", null, null)}\n                        label=\"straight\"\n                    />\n                </Form.Group>\n            </Form>\n        );\n    }\n    render() {\n        const { numDim, layouts, showEdges, maxWindow, changeParam } = this.props;\n\n        if (maxWindow) {\n            return (\n                <Modal\n                    show={true}\n                    centered\n                    id=\"embeddings-view\"\n                    onHide={changeParam.bind(null, \"embeddings.maxWindow\", false, null, null)}\n                >\n                    <Modal.Header closeButton>\n                        <Modal.Title>\n                            Latent space <small>(UMAP, #dim={numDim})</small>\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <GraphLayout\n                            layoutData={layouts.layoutMax}\n                            useStrokeForFocal={true}\n                            fromView=\"emb\"\n                            showEdges={showEdges}\n                        />\n                        {this.renderForm()}\n                        <SettingsView />\n                    </Modal.Body>\n                    {/* <Modal.Footer>Click or brush to highlight nodes without neighbors.</Modal.Footer> */}\n                </Modal>\n            );\n        }\n        return (\n            <div id=\"embeddings-view\" className=\"view\">\n                <h5 className=\"view-title text-center\">\n                    <span\n                        className=\"left-btn\"\n                        onClick={changeParam.bind(null, \"embeddings.maxWindow\", true, null, null)}\n                    >\n                        <FontAwesomeIcon icon={faExpandAlt} />\n                    </span>\n                    Latent Space <small>(UMAP, #dim={numDim})</small>\n                </h5>\n\n                <div className=\"view-body\">\n                    <GraphLayout\n                        layoutData={maxWindow ? layouts.layoutMax : layouts.layoutMin}\n                        useStrokeForFocal={true}\n                        fromView=\"emb\"\n                        showEdges={showEdges}\n                    />\n                    {this.renderForm()}\n                </div>\n\n                {/* <div className=\"view-footer\">Click or brush to highlight nodes without neighbors.</div> */}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    const emb = state.latent.emb;\n    const { maxWindow } = state.param.embeddings;\n    return {\n        numDim: emb ? emb[0].length : null,\n        showEdges: state.param.embeddings.showEdges,\n        maxWindow,\n        layouts: state.latent,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({ changeParam }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmbeddingsView);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass DetailView extends Component {\n    render() {\n        const { nodeTypes, hoverNode } = this.props;\n        if (!hoverNode) return <div />;\n        const useId = !hoverNode.label;\n\n        return (\n            <div id=\"node-label-tooltip\">\n                {nodeTypes.length > 1 && <div>Type: {nodeTypes[hoverNode.typeId].name}</div>}\n                <div>{useId? `ID: ${hoverNode.id}`: `Label: ${hoverNode.label}`}</div>\n            </div>\n        );\n        // return (\n        //     <div id=\"detail-view\">\n        //         {nodeInfo.map((info, i) => (\n        //             <p key={i}>{JSON.stringify(info)}</p>\n        //         ))}\n        //     </div>\n        // );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    // nodeInfo: state.hoveredNodes.map((n) => state.graph.nodes[n]),\n    nodeTypes: state.graph.nodeTypes,\n    hoverNode: state.hoveredNodes.length === 1 ? state.graph.nodes[state.hoveredNodes[0]] : null,\n});\n\nexport default connect(mapStateToProps)(DetailView);\n","import React, { Component } from \"react\";\n\nconst initState = {\n    mouseDown: false,\n    startPoint: null, // page x and y of starting point\n    endPoint: null,\n    brushedArea: null, // Coordinates for the brushed area\n};\n\nexport default class Brush extends Component {\n    constructor(props) {\n        super(props);\n        this.boxRef = React.createRef();\n        this.state = initState;\n    }\n\n    _onMouseDown(e) {\n        let nextState = {\n            mouseDown: true,\n            startPoint: { x: e.pageX, y: e.pageY },\n            mouseMoveFunc: this._onMouseMove.bind(this),\n            mouseUpFunc: this._onMouseUp.bind(this),\n        };\n        nextState.brushedArea = this._calcBrushedArea(nextState.startPoint, nextState.startPoint);\n        this.setState(nextState);\n        window.document.addEventListener(\"mousemove\", nextState.mouseMoveFunc);\n        window.document.addEventListener(\"mouseup\", nextState.mouseUpFunc);\n    }\n\n    _onMouseUp(e) {\n        window.document.removeEventListener(\"mousemove\", this.state.mouseMoveFunc);\n        window.document.removeEventListener(\"mouseup\", this.state.mouseUpFunc);\n        const brushedArea = { ...this.state.brushedArea };\n        this.setState(initState);\n        if (this.props.isRange) {\n            this.props.brushedFunc(brushedArea.x, brushedArea.x + brushedArea.width);\n        } else {\n            this.props.brushedFunc(brushedArea);\n        }\n    }\n\n    _onMouseMove(e) {\n        e.preventDefault();\n        if (this.state.mouseDown) {\n            let endPoint = { x: e.pageX, y: e.pageY };\n            this.setState({\n                endPoint,\n                brushedArea: this._calcBrushedArea(this.state.startPoint, endPoint),\n            });\n        }\n    }\n\n    _calcBrushedArea(startPoint, endPoint) {\n        if (startPoint == null || endPoint == null) {\n            return null;\n        }\n        const parentNode = this.boxRef.current;\n        const rect = parentNode.getBoundingClientRect();\n        const x = Math.min(startPoint.x, endPoint.x) - (rect.left + window.scrollX);\n        const y = Math.min(startPoint.y, endPoint.y) - (rect.top + window.scrollY);\n        const width = Math.abs(startPoint.x - endPoint.x);\n        const height = Math.abs(startPoint.y - endPoint.y);\n        // console.log({rect, startPoint, endPoint, x, y});\n        return {\n            x,\n            y,\n            width,\n            height,\n        };\n    }\n\n    render() {\n        const { brushedArea } = this.state;\n        const { isRange } = this.props;\n        return (\n            <g>\n                {brushedArea != null && (\n                    <rect\n                        className=\"brushed-area\"\n                        x={brushedArea.x}\n                        y={isRange ? 0 : brushedArea.y}\n                        width={brushedArea.width}\n                        height={isRange ? this.props.height : brushedArea.height}\n                    />\n                )}\n                {brushedArea == null && this.props.brushedArea !== null && (\n                    <rect className=\"brushed-area\" {...this.props.brushedArea} />\n                )}\n\n                <rect\n                    className=\"brushable-area\"\n                    x={0}\n                    y={0}\n                    width={this.props.width}\n                    height={this.props.height}\n                    ref={this.boxRef}\n                    onMouseDown={this._onMouseDown.bind(this)}\n                    style={{ cursor: \"crosshair\" }}\n                />\n            </g>\n        );\n    }\n}\n","import React, { memo } from \"react\";\nimport { scaleLinear, max } from \"d3\";\nimport Brush from \"./Brush\";\n\n// Render a histogram\n//   bins is a data structure generated by d3 histogram()\n//   spec is the specification for rendering: {margins: {left: 10, ...}, width: xxx, height: xxx}\n//   xDomain (optional) is the domain of x axis.  If not specified, it will use first and last bin to compute the min and max value\n//   hVal is the value to highlight in this histogram\nfunction Histogram({\n    bins,\n    spec,\n    xDomain,\n    xLabel,\n    yLabel,\n    hVal,\n    brushedFunc,\n    brushedRange,\n    hovered,\n    highlighted,\n}) {\n    const { margins, width, height } = spec;\n    const yScaleMax = max(bins.map((b) => b.length));\n    const yScale = scaleLinear().domain([0, yScaleMax]).range([0, height]).nice();\n    const xScale = scaleLinear()\n        .domain(xDomain ? xDomain : [bins[0].x0, bins[bins.length - 1].x1])\n        .range([0, width])\n        .nice();\n    const xTicks = xScale.ticks(3),\n        xFormat = xScale.tickFormat(3, \".2~s\");\n    const numTicks = Math.max(1, Math.floor(height / 20));\n    const yTicks = yScale.ticks(numTicks),\n        yFormat = yScale.tickFormat(numTicks, \".2~s\");\n\n    const callBrushed = (x1, x2) => {\n        const xVal1 = xScale.invert(x1),\n            xVal2 = xScale.invert(x2);\n        brushedFunc(xVal1, xVal2);\n    };\n\n    const topMargin = margins.top + (yLabel ? 10 : 0);\n    const svgWidth = margins.left + margins.right + width;\n    const svgHeight = topMargin + margins.bottom + height + (xLabel ? 15 : 0);\n\n    const arrowLen = 5; // extra length on the axis to make arrow head\n    return (\n        <svg\n            width={svgWidth}\n            height={svgHeight}\n            onClick={() => {\n                console.log(\"click histo\");\n            }}\n        >\n            <g transform={`translate(${margins.left},${topMargin})`} className=\"histogram\">\n                {bins.map((b, i) => (\n                    <rect\n                        className=\"bar\"\n                        key={i}\n                        x={xScale(b.x0)}\n                        y={height - yScale(b.length)}\n                        width={xScale(b.x1) - xScale(b.x0) - 1}\n                        height={yScale(b.length)}\n                    >\n                        <title>\n                            [{b.x0}-{b.x1}] count: {b.length}\n                        </title>\n                    </rect>\n                ))}\n\n                <g className=\"axis\" transform={`translate(0,${height})`}>\n                    <line x1={-3} y1={0} x2={width + arrowLen} y2={0} markerEnd=\"url(#axis-arrow-head)\" />\n                    {xTicks.map((x, i) => (\n                        <g key={i} transform={`translate(${xScale(x)},0)`}>\n                            <line x1={0} y1={0} x2={0} y2={4} />\n                            <text x={0} y={14} textAnchor=\"middle\">\n                                {xFormat(x)}\n                            </text>\n                        </g>\n                    ))}\n                    {xLabel && (\n                        <text x={width} y={20} textAnchor=\"end\">\n                            {xLabel}\n                        </text>\n                    )}\n                </g>\n                <g className=\"axis\">\n                    <line x1={-2} y1={height} x2={-2} y2={-arrowLen} markerEnd=\"url(#axis-arrow-head)\" />\n                    {yTicks.map((y, i) => (\n                        <g key={i} transform={`translate(0,${height - yScale(y)})`}>\n                            <line x1={-2} y1={0} x2={-6} y2={0} />\n                            <text x={-10} y={3} textAnchor=\"end\">\n                                {yFormat(y)}\n                            </text>\n                        </g>\n                    ))}\n                    {yLabel && (\n                        <text x={5} y={-5}>\n                            {yLabel}\n                        </text>\n                    )}\n                </g>\n\n                {brushedFunc && (\n                    <Brush\n                        width={width}\n                        height={height}\n                        isRange={true}\n                        brushedFunc={callBrushed}\n                        brushedArea={\n                            brushedRange\n                                ? {\n                                      x: xScale(brushedRange[0]),\n                                      y: 0,\n                                      width: xScale(brushedRange[1]) - xScale(brushedRange[0]),\n                                      height: height,\n                                  }\n                                : null\n                        }\n                    />\n                )}\n\n                {/* a half-transparant mask rect */}\n                {(hovered || highlighted) && (\n                    <rect\n                        x={0}\n                        y={0}\n                        width={width}\n                        height={height}\n                        style={{ stroke: \"none\", fill: \"white\", fillOpacity: \".7\" }}\n                    />\n                )}\n                {highlighted &&\n                    highlighted.bins.map((b, i) => (\n                        <rect\n                            className=\"bar highlighted\"\n                            key={i}\n                            x={xScale(b.x0)}\n                            y={height - yScale(b.length)}\n                            width={xScale(b.x1) - xScale(b.x0) - 1}\n                            height={yScale(b.length)}\n                        >\n                            <title>\n                                [{b.x0}-{b.x1}] count: {b.length}\n                            </title>\n                        </rect>\n                    ))}\n                {hovered &&\n                    hovered.bins.map((b, i) => (\n                        <rect\n                            className=\"bar hovered\"\n                            key={i}\n                            x={xScale(b.x0)}\n                            y={height - yScale(b.length)}\n                            width={xScale(b.x1) - xScale(b.x0) - 1}\n                            height={yScale(b.length)}\n                        >\n                            <title>\n                                [{b.x0}-{b.x1}] count: {b.length}\n                            </title>\n                        </rect>\n                    ))}\n                {hVal && (\n                    <g className=\"value-marker\" transform={`translate(${xScale(hVal)},0)`}>\n                        <line x1={0} y1={0} x2={0} y2={height} />\n                        <rect x={-25} y={-10} width={50} height={18} />\n                        <text x={0} y={3} textAnchor=\"middle\">\n                            {xFormat(hVal)}\n                        </text>\n                    </g>\n                )}\n            </g>\n        </svg>\n    );\n}\n\nexport default memo(Histogram);\n","import React, { Component, useCallback } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport cn from \"classnames\";\nimport { Button, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faQuestionCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport { faBan } from \"@fortawesome/free-solid-svg-icons\";\nimport debounce from \"lodash.debounce\";\nimport { changeParam, highlightNodes, hoverNode } from \"../actions\";\nimport Histogram from \"./Histogram\";\n\nfunction FeatureMatrix({ values, hovered, highlighted, scale, spec, hoverFunc, highlightFunc }) {\n    const { margins, cellSize, cellGap, stripMaxWidth } = spec;\n\n    const n = values.length;\n    const size = cellSize + cellGap;\n    // Make a square matrix instead of a long line\n    const numCols = Math.floor(stripMaxWidth / size);\n    const numRows = Math.ceil(n / numCols);\n\n    const width = size * numCols + margins.left + margins.right,\n        height = size * numRows + margins.top + margins.bottom;\n\n    return (\n        <svg width={width} height={height} className=\"feature-matrix\">\n            <g transform={`translate(${margins.left},${margins.top})`}>\n                {values.map((v, i) => (\n                    <rect\n                        key={i}\n                        className={cn(\"cell\", {\n                            hovered: hovered && hovered.hasOwnProperty(i) && hovered[i] !== 0,\n                            highlighted: highlighted && highlighted.hasOwnProperty(i) && highlighted[i] !== 0,\n                        })}\n                        x={(i % numCols) * size}\n                        y={Math.floor(i / numCols) * size}\n                        width={cellSize}\n                        height={cellSize}\n                        fill={scale(v)}\n                        onMouseEnter={hoverFunc.bind(null, [i])}\n                        onMouseLeave={hoverFunc.bind(null, null)}\n                        onClick={highlightFunc.bind(null, [i])}\n                    >\n                        <title>\n                            feature index: {i} count: {v}\n                        </title>\n                    </rect>\n                ))}\n            </g>\n        </svg>\n    );\n}\n\nfunction FeatureStrips({\n    compressedCnts,\n    hovered,\n    highlighted,\n    colorScale,\n    spec,\n    stripMapping,\n    hoverFunc,\n    highlightFunc,\n}) {\n    const { stripHeight, margins, stripWidth } = spec;\n    const width = compressedCnts.length * stripWidth + margins.left + margins.right;\n    const height = stripHeight + margins.top + margins.bottom;\n\n    return (\n        <svg width={width} height={height} className=\"feature-strips\">\n            <g transform={`translate(${margins.left},${margins.top})`}>\n                <g>\n                    {compressedCnts.map((v, i) => (\n                        <line\n                            className={cn(\"strip\", {\n                                hovered: hovered && hovered.hasOwnProperty(i) && hovered[i] !== 0,\n                                highlighted:\n                                    highlighted && highlighted.hasOwnProperty(i) && highlighted[i] !== 0,\n                            })}\n                            key={i}\n                            x1={i * stripWidth}\n                            y1={0}\n                            x2={i * stripWidth}\n                            y2={stripHeight}\n                            stroke={colorScale(v)}\n                            style={{ strokeWidth: `${stripWidth}px` }}\n                            onMouseEnter={hoverFunc.bind(null, stripMapping[i])}\n                            onMouseLeave={hoverFunc.bind(null, null)}\n                            onClick={highlightFunc.bind(null, stripMapping[i])}\n                        >\n                            <title>\n                                feature index: [{stripMapping[i].toString()}], sum of counts: {v}\n                            </title>\n                        </line>\n                    ))}\n                </g>\n                <rect\n                    x={-2}\n                    y={0}\n                    width={compressedCnts.length * stripWidth + 2}\n                    height={stripHeight}\n                    style={{ strokeWidth: \"1px\", stroke: \"grey\", strokeDasharray: \"5,5\", fill: \"None\" }}\n                />\n            </g>\n        </svg>\n    );\n}\n\nfunction FeatureComboVis({\n    displayId,\n    data,\n    stripMapping,\n    hovered,\n    highlighted,\n    collapsed,\n    toggleFunc,\n    spec,\n    legendText,\n    hoverNode,\n    highlightNodes,\n}) {\n    const { cnts, compressedCnts, scale, mode } = data;\n    const e = scale.domain();\n    const colorMin = scale(e[0]),\n        colorMid = scale((e[0] + e[1]) / 2),\n        colorMax = scale(e[1]);\n\n    const debouncedHover = useCallback(\n        debounce((featureIndices) => {\n            if (featureIndices && featureIndices.length) {\n                let nodes = [];\n                for (let fid of featureIndices) {\n                    if (data.featToNid.hasOwnProperty(fid)) {\n                        nodes = nodes.concat(data.featToNid[fid]);\n                    }\n                }\n                hoverNode(nodes, { cellIds: featureIndices, displayId });\n            } else {\n                hoverNode(null);\n            }\n        }, 300)\n    );\n\n    const highlightFunc = (featureIndices) => {\n        let nodes = [];\n        for (let fid of featureIndices) {\n            if (data.featToNid.hasOwnProperty(fid)) {\n                nodes = nodes.concat(data.featToNid[fid]);\n            }\n        }\n        highlightNodes(nodes, null, \"feature\", { displayId: displayId, cellIds: featureIndices });\n    };\n\n    return (\n        <div className=\"feature-combo\">\n            <div>\n                <FeatureStrips\n                    compressedCnts={compressedCnts}\n                    stripMapping={stripMapping}\n                    hovered={hovered && hovered.displayId === displayId ? hovered.compressedCnts : null}\n                    highlighted={\n                        highlighted && highlighted.displayId === displayId ? highlighted.compressedCnts : null\n                    }\n                    colorScale={scale}\n                    spec={spec}\n                    hoverFunc={debouncedHover}\n                    highlightFunc={highlightFunc}\n                />\n            </div>\n            {!collapsed && (\n                <div>\n                    <FeatureMatrix\n                        values={cnts}\n                        hovered={hovered && hovered.displayId === displayId ? hovered.cnts : null}\n                        highlighted={\n                            highlighted && highlighted.displayId === displayId ? highlighted.cnts : null\n                        }\n                        mode={mode}\n                        scale={scale}\n                        spec={spec}\n                        hoverFunc={debouncedHover}\n                        highlightFunc={highlightFunc}\n                    />\n                </div>\n            )}\n            <div style={{ marginLeft: \"10px\" }}>\n                <span>\n                    <Button variant=\"outline-secondary\" size=\"xxs\" onClick={toggleFunc}>\n                        {collapsed ? \"Show\" : \"Hide\"} feature matrix\n                    </Button>\n                </span>\n                <span style={{ marginLeft: \"15px\", marginRight: \"10px\" }}>strip / cell color: </span>\n                <span style={{ marginRight: \"3px\" }}>{e[0]}</span>\n                <div\n                    style={{\n                        display: \"inline-block\",\n                        height: \"10px\",\n                        width: \"100px\",\n                        background: `linear-gradient(90deg, ${colorMin} 0%, ${colorMid} 50%, ${colorMax} 100%)`,\n                    }}\n                ></div>\n                <span style={{ marginLeft: \"3px\" }}>{e[1]}</span>\n                <span style={{ marginLeft: \"10px\" }}>{legendText}</span>\n            </div>\n        </div>\n    );\n}\nconst mapDispatchToPropsFeature = (dispatch) => bindActionCreators({ hoverNode, highlightNodes }, dispatch);\nconst FeatureComboVisConnected = connect(null, mapDispatchToPropsFeature)(FeatureComboVis);\n\nclass NodeAttrView extends Component {\n    findBrushedNodesAndDispatch(whichType, whichRow, whichAttr, v1, v2) {\n        const { nodes, selectedNodes } = this.props;\n        let h;\n        if (whichRow === 0) {\n            // first row\n            h = nodes\n                .filter((n) => whichType === n.type && v1 <= n[whichAttr] && n[whichAttr] <= v2)\n                .map((n) => n.id);\n        } else {\n            // foc-i row\n            h = selectedNodes[whichRow - 1].filter(\n                (id) =>\n                    whichType === nodes[id].type && v1 <= nodes[id][whichAttr] && nodes[id][whichAttr] <= v2\n            );\n        }\n        this.props.highlightNodes(h, [v1, v2], \"node-attr\", { attr: whichAttr, row: whichRow });\n    }\n\n    render() {\n        const { param, nodeAttrs, featureAgg, hoveredNodes, changeParam } = this.props;\n        const histSpec = this.props.spec.histogram,\n            partialHistSpec = this.props.spec.partialHistogram;\n        const { nodeFilter } = param;\n\n        let hNodeData;\n        if (!!hoveredNodes && hoveredNodes.length === 1) {\n            hNodeData = this.props.nodes[hoveredNodes[0]];\n        }\n\n        let featureVisBlock;\n        if (featureAgg.active) {\n            featureVisBlock = featureAgg.display.map((d, i) => (\n                <div className=\"stuff-container-hori\" key={i}>\n                    <div className=\"container-title\">{d.title}</div>\n                    <div className=\"container-body\">\n                        <FeatureComboVisConnected\n                            displayId={i}\n                            data={d}\n                            stripMapping={featureAgg.stripMapping}\n                            spec={this.props.spec.feature}\n                            collapsed={param.features.collapsed[i]}\n                            hovered={featureAgg.hovered}\n                            highlighted={featureAgg.highlighted}\n                            toggleFunc={changeParam.bind(this, \"features.collapsed\", null, true, i)}\n                            legendText={d.title === \"diff\" ? \"|counts of foc-0 - counts of foc-1|\" : \"#nodes\"}\n                        />\n                    </div>\n                </div>\n            ));\n        }\n\n        let nodeAttrVisBlock;\n        if (nodeAttrs.active) {\n            nodeAttrVisBlock = nodeAttrs.display.map((d, k) => (\n                <div key={k} className=\"stuff-container-hori\">\n                    <div className=\"container-title\">{d.title}</div>\n                    <div className=\"container-body\">\n                        {d.data.map((a, i) => (\n                            <div key={i} className=\"histogram-block\">\n                                {k === 0 && <div className=\"histogram-title\">{a.name}</div>}\n                                {a.values.length === 0 ? (\n                                    <div\n                                        className=\"text-center\"\n                                        style={{\n                                            width:\n                                                histSpec.width +\n                                                histSpec.margins.left +\n                                                histSpec.margins.right,\n                                        }}\n                                    >\n                                        {/* N/A */}\n                                        <FontAwesomeIcon icon={faBan} />\n                                    </div>\n                                ) : (\n                                    <Histogram\n                                        bins={a.bins}\n                                        spec={k ? partialHistSpec : histSpec}\n                                        hVal={\n                                            nodeAttrs.hovered &&\n                                            nodeAttrs.hovered.displayId === k &&\n                                            hNodeData &&\n                                            hNodeData.type === a.nodeType\n                                                ? hNodeData[a.name]\n                                                : null\n                                        }\n                                        hovered={\n                                            nodeAttrs.hovered && nodeAttrs.hovered.displayId === k\n                                                ? nodeAttrs.hovered.data[i]\n                                                : null\n                                        }\n                                        highlighted={\n                                            nodeAttrs.highlighted &&\n                                            !nodeAttrs.hovered &&\n                                            nodeAttrs.highlighted.displayId === k\n                                                ? nodeAttrs.highlighted.data[i]\n                                                : null\n                                        }\n                                        brushedFunc={this.findBrushedNodesAndDispatch.bind(\n                                            this,\n                                            a.nodeType,\n                                            k,\n                                            a.name\n                                        )}\n                                        brushedRange={\n                                            nodeFilter.whichRow === k && nodeFilter.whichAttr === a.name\n                                                ? nodeFilter.brushedArea\n                                                : null\n                                        }\n                                    />\n                                )}\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            ));\n        }\n\n        return (\n            <div id=\"node-attr-view\" className=\"view\">\n                <h5 className=\"view-title text-center\">\n                    Node Features (#={featureAgg.active ? featureAgg.numFeatures : nodeAttrs.numAttrs})\n                    <span style={{ marginLeft: \"5px\", cursor: \"pointer\" }}>\n                        <OverlayTrigger\n                            placement=\"bottom\"\n                            overlay={\n                                <Tooltip id=\"neighbor-latent-map-tooltip\">\n                                    <span>\n                                        Each row shows feature distribution of all / a focal group of nodes.\n                                    </span>\n                                    {featureAgg.active && (\n                                        <span style={{ marginLeft: \"5px\" }}>\n                                            More saturated color indicates a bigger count of nodes for row\n                                            foc-i, or a bigger difference for row diff.\n                                        </span>\n                                    )}\n                                    {this.props.selectedNodes.length > 2 && (\n                                        <div style={{ fontWeight: \"bold\" }}>\n                                            Note: the diff will only show up when there are exactly 2 focal\n                                            groups.\n                                        </div>\n                                    )}\n                                </Tooltip>\n                            }\n                        >\n                            <FontAwesomeIcon icon={faQuestionCircle} />\n                        </OverlayTrigger>\n                    </span>\n                </h5>\n                <div className=\"view-body\">\n                    {featureVisBlock}\n                    {nodeAttrVisBlock}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    nodes: state.graph.nodes,\n    param: state.param,\n    nodeAttrs: state.nodeAttrs,\n    featureAgg: state.featureAgg,\n    hoveredNodes: state.hoveredNodes,\n    selectedNodes: state.selectedNodes,\n    spec: state.spec,\n});\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({ changeParam, highlightNodes }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NodeAttrView);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCaretUp, faCaretDown } from \"@fortawesome/free-solid-svg-icons\";\nimport { selectNodes, highlightNodes, selectNodePair, changeParam, highlightNodePairs } from \"../actions\";\n\nexport class HighlightControl extends Component {\n    render() {\n        const { selectedNodes, highlightedNodes, numHighlightsAndFocus, hideHighlightView } = this.props;\n        const { unseenTopK, hasLinkPredictions } = this.props;\n        const { selectNodes, selectNodePair, highlightNodes, highlightNodePairs, changeParam } = this.props;\n        const areHighlightsAlsoFocus =\n            highlightedNodes.length && numHighlightsAndFocus === highlightedNodes.length;\n\n        const btns = [];\n        btns.push(\n            <OverlayTrigger\n                placement=\"bottom\"\n                overlay={\n                    <Tooltip id=\"action-tooltip-create\">\n                        {areHighlightsAlsoFocus ? \"single out \" : \"create \"}a new focal group\n                    </Tooltip>\n                }\n            >\n                <div\n                    className=\"circle action\"\n                    onClick={selectNodes.bind(\n                        null,\n                        areHighlightsAlsoFocus ? \"SINGLE OUT\" : \"CREATE\",\n                        highlightedNodes,\n                        null\n                    )}\n                >\n                    {/* <FontAwesomeIcon icon={faPlus} /> */}\n                    create\n                </div>\n            </OverlayTrigger>\n        );\n        btns.push(\n            <OverlayTrigger\n                placement=\"bottom\"\n                overlay={<Tooltip id=\"action-tooltip-clear\">Clear highlights</Tooltip>}\n            >\n                <div className=\"circle action\" onClick={highlightNodes.bind(null, [], null, null, null)}>\n                    {/* <FontAwesomeIcon icon={faTrash} /> */}\n                    clear\n                </div>\n            </OverlayTrigger>\n        );\n        if (highlightedNodes.length === 2) {\n            btns.push(\n                <OverlayTrigger\n                    placement=\"bottom\"\n                    overlay={\n                        <Tooltip id=\"action-tooltip-compare\">Remove all and compare the two nodes</Tooltip>\n                    }\n                >\n                    <div\n                        className=\"circle action\"\n                        onClick={selectNodePair.bind(null, highlightedNodes[0], highlightedNodes[1])}\n                    >\n                        compare\n                    </div>\n                </OverlayTrigger>\n            );\n        }\n\n        if (selectedNodes.length > 0 && !areHighlightsAlsoFocus) {\n            for (let i = 0; i < selectedNodes.length; i++) {\n                btns.push(\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={\n                            <Tooltip id=\"action-tooltip-add-to\">\n                                Add the highlighted nodes to an existing focal group\n                            </Tooltip>\n                        }\n                    >\n                        <div\n                            className=\"circle action\"\n                            onClick={selectNodes.bind(null, \"APPEND\", highlightedNodes, i)}\n                        >\n                            add to <br /> foc-{i}\n                        </div>\n                    </OverlayTrigger>\n                );\n            }\n        }\n\n        if (areHighlightsAlsoFocus) {\n            btns.push(\n                <OverlayTrigger\n                    placement=\"bottom\"\n                    overlay={\n                        <Tooltip id=\"action-tooltip-remove-from\">\n                            Remove highlighted nodes from focus group\n                        </Tooltip>\n                    }\n                >\n                    <div\n                        className=\"circle action\"\n                        onClick={selectNodes.bind(null, \"REMOVE FROM\", highlightedNodes, null)}\n                    >\n                        purge\n                    </div>\n                </OverlayTrigger>\n            );\n        }\n\n        if (hasLinkPredictions) {\n            btns.push(\n                <OverlayTrigger\n                    placement=\"bottom\"\n                    overlay={\n                        <Tooltip id=\"action-tooltip-recomm\">\n                            List top {unseenTopK} predicted unseen edges\n                        </Tooltip>\n                    }\n                >\n                    <div\n                        className=\"circle action\"\n                        onClick={highlightNodePairs.bind(null, null, null, null, null, true)}\n                    >\n                        predict\n                    </div>\n                </OverlayTrigger>\n            );\n        }\n        const n = btns.length;\n        const u = Math.PI / (n + 1);\n        const r = n < 5 ? 110 : 120;\n\n        return (\n            <div\n                className={`view ${highlightedNodes.length && !hideHighlightView ? \"\" : \"hide\"}`}\n                id=\"highlight-view\"\n            >\n                <div className=\"paw\"></div>\n                <h5 className=\"view-title center-pad\">\n                    {highlightedNodes.length} nodes <br />\n                    highlighted\n                </h5>\n\n                <div\n                    style={{\n                        position: \"absolute\",\n                        top: hideHighlightView && highlightedNodes.length ? \"170px\" : \"-5px\",\n                        right: hideHighlightView ? \"65px\" : \"-50px\",\n                        color: \"black\",\n                        cursor: \"pointer\",\n                        zIndex: 250,\n                    }}\n                    onClick={changeParam.bind(null, \"hideHighlightView\", null, true, null)}\n                >\n                    <OverlayTrigger\n                        placement=\"bottom\"\n                        overlay={\n                            <Tooltip id=\"action-tooltip-remove-from\">\n                                {hideHighlightView ? \"Show\" : \"Hide\"} menu\n                            </Tooltip>\n                        }\n                    >\n                        <FontAwesomeIcon icon={hideHighlightView ? faCaretDown : faCaretUp} />\n                    </OverlayTrigger>\n                </div>\n\n                {btns.map((b, i) => (\n                    <div\n                        key={i}\n                        className=\"action-wrapper\"\n                        style={{ top: r * Math.sin(u * (i + 1)) + 30, left: -r * Math.cos(u * (i + 1)) + 12 }}\n                        // style={{ top: r * Math.sin(0) + 30, left: -r * Math.cos(0) }}\n                    >\n                        {b}\n                    </div>\n                ))}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    hideHighlightView: state.param.hideHighlightView,\n    selectedNodes: state.selectedNodes,\n    highlightedNodes: state.highlightedNodes,\n    unseenTopK: state.param.unseenTopK,\n    hasLinkPredictions: state.hasLinkPredictions,\n    numHighlightsAndFocus: state.highlightedNodes.reduce(\n        (prev, cur) => prev + (state.isNodeSelected[cur] ? 1 : 0),\n        0\n    ),\n});\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators(\n        {\n            selectNodes,\n            highlightNodes,\n            selectNodePair,\n            changeParam,\n            highlightNodePairs,\n        },\n        dispatch\n    );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HighlightControl);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Button, Badge } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport { selectNodes } from \"../actions\";\n\nexport class FocusControl extends Component {\n    render() {\n        const { selectedNodes } = this.props;\n        // const { nodes, nodeTypes } = graph;\n        return (\n            <div className=\"view\" id=\"focus-control\">\n                <h5 className=\"view-title text-center\">\n                    Focus\n                    {selectedNodes.length > 0 && (\n                        <Button\n                            variant=\"primary\"\n                            size=\"xxs\"\n                            style={{ marginLeft: \"10px\" }}\n                            onClick={this.props.selectNodes.bind(null, \"CLEAR\", null, null)}\n                        >\n                            clear\n                        </Button>\n                    )}\n                </h5>\n                <div className=\"view-body\">\n                    {selectedNodes.length === 0 && <div>No focal groups yet.</div>}\n                    {selectedNodes.map((g, i) => (\n                        <div className=\"focal-group\" key={i}>\n                            <span\n                                className=\"del-btn\"\n                                style={{ marginRight: \"5px\" }}\n                                onClick={this.props.selectNodes.bind(null, \"DELETE\", null, i)}\n                            >\n                                <FontAwesomeIcon icon={faTrashAlt} />\n                            </span>\n                            <span>\n                                foc-{i}: <Badge variant=\"dark\">{g.length}</Badge> nodes\n                            </span>\n                        </div>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    // graph: state.graph,\n    selectedNodes: state.selectedNodes,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators(\n        {\n            selectNodes,\n        },\n        dispatch\n    );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FocusControl);\n","import React, { memo } from \"react\";\nimport {\n    scaleLinear,\n    max,\n    interpolateGreys,\n    scaleSequential,\n    scaleSequentialLog,\n    scaleLog,\n    format,\n    leastIndex,\n} from \"d3\";\nimport Brush from \"./Brush\";\n\nfunction ScatterHistogram({\n    hasHist,\n    data,\n    isTopoVsLatent,\n    spec,\n    xLabel,\n    yLabel,\n    hVals,\n    brushedFunc,\n    brushedArea,\n    useLinearScale,\n}) {\n    const { margins, histWidth, scatterWidth, legendWidth, histHeight, scatterHeight, tickLabelGap } = spec;\n    const u = spec.gridBinSize,\n        numBins = spec.numBins;\n    const { binsLatent, binsTopo, binsFeature, gridsTopo, gridsFeature, src, tgt } = data;\n    const gridBins = isTopoVsLatent ? gridsTopo.bins : gridsFeature.bins,\n        gridBinsMaxCnt = isTopoVsLatent ? gridsTopo.maxCnt : gridsFeature.maxCnt,\n        binsY = isTopoVsLatent ? binsTopo : binsFeature;\n    let hValsY;\n    if (hVals) {\n        hValsY = isTopoVsLatent ? hVals[1] : hVals[2];\n    }\n\n    const svgWidth =\n            margins.left +\n            margins.right +\n            (hasHist ? histWidth : 0) +\n            scatterWidth +\n            tickLabelGap +\n            legendWidth,\n        svgHeight = margins.top + margins.bottom + (hasHist ? histHeight : 0) + scatterHeight + tickLabelGap;\n\n    // scales\n    const uLat = u * scatterWidth,\n        uTopo = u * scatterHeight;\n    let colorScale,\n        linearColorScale = scaleSequential(interpolateGreys).domain([0, gridBinsMaxCnt]);\n    if (useLinearScale) {\n        colorScale = linearColorScale;\n    } else {\n        const getColorLogScale = (domainMax) => {\n            const s = scaleSequentialLog(interpolateGreys).domain([1, domainMax + 1]);\n            return (x) => s(x + 1);\n        };\n        colorScale = getColorLogScale(gridBinsMaxCnt);\n    }\n    let histScales, maxCntLatent, maxCntY;\n\n    if (hasHist) {\n        maxCntLatent = max(binsLatent.map((b) => b.length));\n        maxCntY = max(binsY.map((b) => b.length));\n        if (useLinearScale) {\n            histScales = {\n                latent: scaleLinear().domain([0, maxCntLatent]).range([0, histHeight]),\n                y: scaleLinear().domain([0, maxCntY]).range([0, histWidth]),\n            };\n        } else {\n            const getLogScale = (domainMax, rangeMax) => {\n                const s = scaleLog()\n                    .domain([1, domainMax + 1])\n                    .range([0, rangeMax]);\n                return (x) => s(x + 1);\n            };\n            histScales = {\n                latent: getLogScale(maxCntLatent, histHeight),\n                y: getLogScale(maxCntY, histWidth),\n            };\n        }\n    }\n    const valFormat = format(\".2f\"),\n        cntFormat = format(\".2~s\");\n\n    const callSnapBrush = (a) => {\n        function constrain(x) {\n            return Math.max(0, Math.min(x, numBins - 1));\n        }\n        const x1 = constrain(Math.round(a.x / uLat)),\n            y1 = constrain(Math.round((scatterHeight - a.y) / uTopo)),\n            x2 = constrain(Math.round((a.x + a.width) / uLat)),\n            y2 = constrain(Math.round((scatterHeight - a.y - a.height) / uTopo));\n        let brushedPairIdx = [];\n        for (let i = x1; i <= x2; i++) {\n            for (let j = y2; j <= y1; j++) {\n                brushedPairIdx = brushedPairIdx.concat(gridBins[i][j]);\n            }\n        }\n        const brushedPairs = brushedPairIdx.map((p) => [src[p], tgt[p]]);\n        brushedFunc(\n            {\n                x: x1 * uLat,\n                y: scatterHeight - (y1 + 1) * uTopo,\n                width: (x2 - x1 + 1) * uLat,\n                height: (y1 - y2 + 1) * uTopo,\n            },\n            brushedPairs\n        );\n    };\n\n    const arrowLen = 8; // extra length on the axis to make arrow head\n    const histTickNum = 3,\n        colorTickNum = 5;\n    return (\n        <svg width={svgWidth} height={svgHeight} className=\"histogram scatterplot\">\n            <g transform={`translate(${margins.left},${margins.top})`}>\n                {/* legends */}\n                <g\n                    className=\"legend\"\n                    transform={`translate(${\n                        (hasHist ? histWidth : 0) + tickLabelGap + scatterWidth + 10\n                    }, 0)`}\n                >\n                    <text x={uLat / 2} y={10} textAnchor=\"middle\">\n                        0\n                    </text>\n                    <g transform=\"translate(0, 12)\">\n                        <rect\n                            x={0}\n                            y={0}\n                            width={uTopo}\n                            height={uLat * colorTickNum}\n                            style={{ stroke: \"black\", fill: \"none\" }}\n                        />\n                        {new Array(colorTickNum).fill(0).map((_, i) => (\n                            <rect\n                                key={i}\n                                x={0}\n                                y={uTopo * i}\n                                height={uLat}\n                                width={uTopo}\n                                fill={linearColorScale((i * gridBinsMaxCnt) / 5)}\n                            />\n                        ))}\n                    </g>\n                    <text x={9} y={12 + 3 * uTopo} textAnchor=\"start\">\n                        {cntFormat(\n                            useLinearScale\n                                ? gridBinsMaxCnt / 2\n                                : Math.pow(10, Math.log10(gridBinsMaxCnt + 1) / 2)\n                        )}\n                    </text>\n                    <text x={uLat / 2} y={24 + 5 * uTopo} textAnchor=\"middle\">\n                        {cntFormat(gridBinsMaxCnt)}\n                    </text>\n                </g>\n\n                <g transform={`translate(${hasHist ? histWidth + tickLabelGap : tickLabelGap},0)`}>\n                    {/* scatterplot points */}\n                    <g>\n                        {/* {dist.map((d, i) => (\n                            <circle\n                                key={i}\n                                className=\"point\"\n                                cx={scatterScales.latent(d[0])}\n                                cy={scatterHeight - scatterScales.topo(d[1])}\n                                r={2}\n                                opacity={0.5}\n                            />\n                        ))} */}\n                        {gridBins.map((row, i) => (\n                            <g key={i}>\n                                {row.map((col, j) => (\n                                    <rect\n                                        key={j}\n                                        x={i * uLat}\n                                        y={scatterHeight - (j + 1) * uTopo}\n                                        width={uLat}\n                                        height={uTopo}\n                                        fill={colorScale(col.length)}\n                                        stroke=\"none\"\n                                    >\n                                        <title>\n                                            {xLabel}: {valFormat(i * u)} - {valFormat((i + 1) * u)}, {yLabel}:{\" \"}\n                                            {valFormat(j * u)} -{valFormat((j + 1) * u)}. Count: {col.length}.\n                                        </title>\n                                    </rect>\n                                ))}\n                            </g>\n                        ))}\n                    </g>\n                    {/* scatterplot x-axis */}\n                    <g className=\"axis\" transform={`translate(0,${scatterHeight})`}>\n                        <line\n                            x1={-3}\n                            y1={2}\n                            x2={scatterWidth + arrowLen}\n                            y2={2}\n                            markerEnd=\"url(#axis-arrow-head)\"\n                        />\n                        {[\".5\", \"1\"].map((x, i) => (\n                            <text key={i} x={scatterWidth * x} y={11} textAnchor=\"middle\">\n                                {x}\n                            </text>\n                        ))}\n                        <text x={-10} y={11}>\n                            0\n                        </text>\n                        {xLabel && (\n                            <text x={scatterWidth + arrowLen} y={-5} textAnchor=\"end\">\n                                {xLabel}\n                            </text>\n                        )}\n                    </g>\n                    {/* scatterplot y-axis */}\n                    <g className=\"axis\">\n                        <line\n                            x1={-2}\n                            y1={scatterHeight + 2}\n                            x2={-2}\n                            y2={-arrowLen}\n                            markerEnd=\"url(#axis-arrow-head)\"\n                        />\n                        {[\".5\", \"1\"].map((y, i) => (\n                            <text key={i} x={-4} y={scatterHeight * (1 - y) + 3} textAnchor=\"end\">\n                                {y}\n                            </text>\n                        ))}\n                        {yLabel && (\n                            <text x={5} y={-5}>\n                                {yLabel}\n                            </text>\n                        )}\n                    </g>\n                    {brushedFunc && (\n                        <Brush\n                            width={scatterWidth}\n                            height={scatterHeight}\n                            brushedFunc={callSnapBrush}\n                            brushedArea={brushedArea}\n                        />\n                    )}\n                    {hVals && (\n                        <g className=\"value-marker\">\n                            {hValsY && (\n                                <g transform={`translate(0,${(1 - hValsY) * scatterHeight - 1})`}>\n                                    <line x1={0} y1={0} x2={scatterWidth} y2={0} />\n                                    <rect x={scatterWidth} y={-8} width={34} height={16} />\n                                    <text x={scatterHeight + 2} y={4}>\n                                        {valFormat(hValsY)}\n                                    </text>\n                                </g>\n                            )}\n                            <g transform={`translate(${hVals[0] * scatterWidth},0)`}>\n                                <line x1={0} y1={0} x2={0} y2={scatterHeight} />\n                                <rect x={-20} y={-12} width={40} height={16} />\n                                <text x={0} y={1} textAnchor=\"middle\">\n                                    {valFormat(hVals[0])}\n                                </text>\n                            </g>\n                        </g>\n                    )}\n                </g>\n\n                {hasHist && (\n                    <g>\n                        {/* latent histogram */}\n                        <g\n                            transform={`translate(${histWidth + tickLabelGap},${\n                                scatterHeight + tickLabelGap\n                            })`}\n                        >\n                            <g className=\"axis\">\n                                <line\n                                    x1={-3}\n                                    y1={0}\n                                    x2={scatterWidth + arrowLen}\n                                    y2={0}\n                                    markerEnd=\"url(#axis-arrow-head)\"\n                                />\n                                <line\n                                    x1={-2}\n                                    y1={0}\n                                    x2={-2}\n                                    y2={histHeight + arrowLen}\n                                    markerEnd=\"url(#axis-arrow-head)\"\n                                />\n                                {new Array(histTickNum).fill(0).map((_, i) => (\n                                    <line\n                                        key={i}\n                                        x1={-2}\n                                        y1={histScales.latent((maxCntLatent / histTickNum) * (i + 1))}\n                                        x2={-6}\n                                        y2={histScales.latent((maxCntLatent / histTickNum) * (i + 1))}\n                                    />\n                                ))}\n                                <text x={-7} y={histHeight + 3} textAnchor=\"end\">\n                                    {cntFormat(maxCntLatent)}\n                                </text>\n                            </g>\n                            <g>\n                                {binsLatent.map((b, i) => (\n                                    <rect\n                                        className=\"bar\"\n                                        key={i}\n                                        x={b.x0 * scatterWidth}\n                                        y={0}\n                                        width={uLat - 1}\n                                        height={histScales.latent(b.length)}\n                                    >\n                                        <title>\n                                            {xLabel}: {valFormat(b.x0)}-{valFormat(b.x1)} count: {b.length}\n                                        </title>\n                                    </rect>\n                                ))}\n                            </g>\n                        </g>\n\n                        {/* topo histogram */}\n                        <g transform={`translate(${histWidth}, ${scatterHeight})`}>\n                            <g className=\"axis\">\n                                <line\n                                    x1={1}\n                                    y1={2}\n                                    x2={-histWidth - arrowLen}\n                                    y2={2}\n                                    markerEnd=\"url(#axis-arrow-head)\"\n                                />\n                                <line\n                                    x1={0}\n                                    y1={3}\n                                    x2={0}\n                                    y2={-scatterHeight - arrowLen}\n                                    markerEnd=\"url(#axis-arrow-head)\"\n                                />\n                                {new Array(histTickNum).fill(0).map((_, i) => (\n                                    <line\n                                        key={i}\n                                        x1={-histScales.y((maxCntY / histTickNum) * (i + 1))}\n                                        y1={2}\n                                        x2={-histScales.y((maxCntY / histTickNum) * (i + 1))}\n                                        y2={6}\n                                    />\n                                ))}\n                                <text x={-histWidth} y={17} textAnchor=\"middle\">\n                                    {cntFormat(maxCntY)}\n                                </text>\n                            </g>\n                            <g>\n                                {binsY.map((b, i) => (\n                                    <rect\n                                        className=\"bar\"\n                                        key={i}\n                                        x={-histScales.y(b.length)}\n                                        y={-b.x1 * scatterHeight}\n                                        width={histScales.y(b.length)}\n                                        height={uTopo - 1}\n                                    >\n                                        <title>\n                                            {yLabel}: {valFormat(b.x0)}-{valFormat(b.x1)} count: {b.length}\n                                        </title>\n                                    </rect>\n                                ))}\n                            </g>\n                        </g>\n                    </g>\n                )}\n            </g>\n        </svg>\n    );\n}\n\nexport default memo(ScatterHistogram);\n","import React, { Component, memo, useCallback } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Button, Badge } from \"react-bootstrap\";\nimport cn from \"classnames\";\nimport { FixedSizeList } from \"react-window\";\nimport debounce from \"lodash.debounce\";\nimport { selectNodePair, highlightNodePairs, hoverNode } from \"../actions\";\n\nexport class NodePairList extends Component {\n    render() {\n        const { nodes, highlightedNodePairs, selectedPairIdx } = this.props;\n        const { selectNodePair, highlightNodePairs } = this.props;\n\n        const labelOrId = nodes && nodes[0].label ? \"label\" : \"id\";\n        const NodePairItem = memo(({ index, style }) => {\n            const p = highlightedNodePairs[index];\n            const debouncedHover = useCallback(debounce((x) => this.props.hoverNode(x), 200));\n            return (\n                <div\n                    className={cn(\"list-group-item\", { selected: index === selectedPairIdx })}\n                    onMouseEnter={debouncedHover.bind(this, [p[0], p[1]])}\n                    onMouseLeave={debouncedHover.bind(this, null)}\n                    onClick={selectNodePair.bind(null, p[0], p[1])}\n                    style={style}\n                >\n                    {nodes[p[0]][labelOrId]} - {nodes[p[1]][labelOrId]}\n                </div>\n            );\n        });\n\n        return (\n            <div style={{ minWidth: \"120px\" }}>\n                {/* <h6>Node pairs</h6> */}\n                <div>\n                    <Badge variant=\"primary\">{highlightedNodePairs.length}</Badge> pairs highlighted.\n                    {/* {highlightedNodePairs.length > 0 && \"Click to focus.\"} */}\n                </div>\n                {highlightedNodePairs.length > 0 && (\n                    <div>\n                        <div className=\"node-pair-list\">\n                            <FixedSizeList\n                                className=\"list-group\"\n                                height={\n                                    highlightedNodePairs.length > 8 ? 200 : 25 * highlightedNodePairs.length\n                                }\n                                width=\"100%\"\n                                itemSize={25}\n                                itemCount={highlightedNodePairs.length}\n                            >\n                                {NodePairItem}\n                            </FixedSizeList>\n                        </div>\n                        <div>\n                            <Button\n                                variant=\"primary\"\n                                size=\"xs\"\n                                onClick={highlightNodePairs.bind(null, null, null, null)}\n                            >\n                                clear\n                            </Button>\n                        </div>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nconst getSelectedPairIdx = (pairs, selectedNodes) => {\n    if (selectedNodes.length !== 2 || selectedNodes[0].length !== 1 || selectedNodes[1].length !== 1)\n        return -1;\n    const s1 = selectedNodes[0][0],\n        s2 = selectedNodes[1][0];\n    for (let i = 0; i < pairs.length; i++) {\n        const p = pairs[i];\n        if ((p[0] === s1 && p[1] === s2) || (p[0] === s2 && p[1] === s1)) {\n            return i;\n        }\n    }\n    return -1;\n};\n\nconst mapStateToProps = (state) => ({\n    nodes: state.graph.nodes,\n    highlightedNodePairs: state.highlightedNodePairs,\n    selectedPairIdx: getSelectedPairIdx(state.highlightedNodePairs, state.selectedNodes),\n});\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators(\n        {\n            selectNodePair,\n            highlightNodePairs,\n            hoverNode,\n        },\n        dispatch\n    );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NodePairList);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Form, Modal, Button, Col, Tabs, Tab, Nav, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faQuestionCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport { faWrench } from \"@fortawesome/free-solid-svg-icons\";\nimport { format } from \"d3\";\nimport { getNeighborDistance, getCosineDistance, getEuclideanDistance } from \"../utils\";\nimport {\n    highlightNodePairs,\n    hoverNode,\n    changeParam,\n    changeScatterplotForm,\n    addDistanceScatterplot,\n} from \"../actions\";\nimport { ComputingSpinner } from \"./InitialLayoutView\";\nimport ScatterHistogram from \"./ScatterHistogram\";\nimport NodePairList from \"./NodePairList\";\n\nexport class DistanceView extends Component {\n    renderCreateModal() {\n        const { highlightedNodes, hasLinkPredictions, selectedNodes, formData } = this.props;\n        const { useLinearScale } = this.props.nodePairFilter;\n        const { show, connectivity, userInterests, linkPrediction, nodePairs } = formData;\n        const { changeScatterplotForm, changeParam } = this.props;\n        const numFoc = selectedNodes.length;\n        const btwFoc = [];\n        for (let i = 0; i < numFoc; i++) {\n            for (let j = i + 1; j < numFoc; j++) {\n                btwFoc.push([i, j]);\n            }\n        }\n\n        return (\n            <Modal\n                show={show}\n                size=\"lg\"\n                centered\n                id=\"create-scatterplot-modal\"\n                onHide={this.props.changeScatterplotForm.bind(null, \"show\", false)}\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title>Customization</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <h6>Settings</h6>\n                    <Form inline>\n                        <Form.Label style={{ marginRight: \"5px\" }}>Choose scale type:</Form.Label>\n                        <Form.Check\n                            inline\n                            label=\"linear\"\n                            type=\"radio\"\n                            id=\"scale-linear-ctrl\"\n                            checked={useLinearScale}\n                            onChange={() => {\n                                changeParam(\"nodePairFilter.useLinearScale\", null, true);\n                            }}\n                        />\n                        <Form.Check\n                            inline\n                            label=\"log10\"\n                            type=\"radio\"\n                            id=\"scale-log-ctrl\"\n                            checked={!useLinearScale}\n                            onChange={() => {\n                                changeParam(\"nodePairFilter.useLinearScale\", null, true);\n                            }}\n                        />\n                    </Form>\n\n                    <h6 style={{ marginTop: \"30px\" }}>Create customized node-pair scatterplot</h6>\n                    <Form>\n                        <Form.Row>\n                            <Form.Label column sm={2}>\n                                Connectivity\n                            </Form.Label>\n                            <Col>\n                                <Form.Check\n                                    inline\n                                    type=\"radio\"\n                                    label=\"all\"\n                                    checked={connectivity === \"all\"}\n                                    onChange={changeScatterplotForm.bind(null, \"connectivity\", \"all\")}\n                                />\n                                <Form.Check\n                                    inline\n                                    type=\"radio\"\n                                    label=\"connected by an edge\"\n                                    checked={connectivity === \"edge\"}\n                                    onChange={changeScatterplotForm.bind(null, \"connectivity\", \"edge\")}\n                                />\n                                <Form.Check\n                                    inline\n                                    type=\"radio\"\n                                    label=\"not connected\"\n                                    checked={connectivity === \"nonedge\"}\n                                    onChange={changeScatterplotForm.bind(null, \"connectivity\", \"nonedge\")}\n                                />\n                            </Col>\n                        </Form.Row>\n\n                        <div style={{ marginBottom: \"20px\" }}></div>\n\n                        <Form.Row>\n                            <Form.Label column sm={2}>\n                                User interests\n                            </Form.Label>\n                            <Col>\n                                {(highlightedNodes.length > 1 || selectedNodes.length > 0) && (\n                                    <Form.Row>\n                                        <Col>\n                                            <Form.Check\n                                                type=\"radio\"\n                                                label=\"all\"\n                                                checked={userInterests === \"all\"}\n                                                onChange={changeScatterplotForm.bind(\n                                                    null,\n                                                    \"userInterests\",\n                                                    \"all\"\n                                                )}\n                                            />\n                                        </Col>\n                                    </Form.Row>\n                                )}\n                                {highlightedNodes.length > 1 && (\n                                    <Form.Row>\n                                        <Col>\n                                            <Form.Check\n                                                type=\"radio\"\n                                                label=\"within highlighted nodes\"\n                                                checked={userInterests === \"highlight\"}\n                                                onChange={changeScatterplotForm.bind(\n                                                    null,\n                                                    \"userInterests\",\n                                                    \"highlight\"\n                                                )}\n                                            />\n                                        </Col>\n                                    </Form.Row>\n                                )}\n                                {selectedNodes.length > 0 && (\n                                    <Form.Row>\n                                        {selectedNodes.map((s, i) => (\n                                            <Col key={i}>\n                                                <Form.Check\n                                                    type=\"radio\"\n                                                    label={`within foc-${i}`}\n                                                    checked={userInterests === `foc-${i}`}\n                                                    onChange={changeScatterplotForm.bind(\n                                                        null,\n                                                        \"userInterests\",\n                                                        `foc-${i}`\n                                                    )}\n                                                />\n                                            </Col>\n                                        ))}\n                                    </Form.Row>\n                                )}\n                                {btwFoc.length > 0 && (\n                                    <Form.Row>\n                                        {btwFoc.map((g, i) => (\n                                            <Col key={i} md={4}>\n                                                <Form.Check\n                                                    type=\"radio\"\n                                                    label={`between foc-${g[0]} & foc-${g[1]}`}\n                                                    checked={userInterests === `foc-${g[0]}*foc-${g[1]}`}\n                                                    onChange={changeScatterplotForm.bind(\n                                                        null,\n                                                        \"userInterests\",\n                                                        `foc-${g[0]}*foc-${g[1]}`\n                                                    )}\n                                                />\n                                            </Col>\n                                        ))}\n                                    </Form.Row>\n                                )}\n                                {highlightedNodes.length < 2 && !selectedNodes.length && (\n                                    <Form.Text>\n                                        Not applicable. Please specify interests by highlighting or focusing\n                                        nodes.\n                                    </Form.Text>\n                                )}\n                            </Col>\n                        </Form.Row>\n\n                        <div style={{ marginBottom: \"20px\" }}></div>\n                        <Form.Row>\n                            <Form.Label column sm={2}>\n                                Link prediction\n                            </Form.Label>\n                            {hasLinkPredictions ? (\n                                <Col>\n                                    <Form.Check\n                                        inline\n                                        type=\"radio\"\n                                        label=\"all\"\n                                        checked={linkPrediction === \"all\"}\n                                        onChange={changeScatterplotForm.bind(null, \"linkPrediction\", \"all\")}\n                                    />\n                                    <Form.Check\n                                        inline\n                                        type=\"radio\"\n                                        label=\"predicted true\"\n                                        checked={linkPrediction === \"pred-true\"}\n                                        onChange={changeScatterplotForm.bind(\n                                            null,\n                                            \"linkPrediction\",\n                                            \"pred-true\"\n                                        )}\n                                    />\n                                    <Form.Check\n                                        inline\n                                        type=\"radio\"\n                                        label=\"predicted false\"\n                                        checked={linkPrediction === \"pred-false\"}\n                                        onChange={changeScatterplotForm.bind(\n                                            null,\n                                            \"linkPrediction\",\n                                            \"pred-false\"\n                                        )}\n                                    />\n\n                                    <Form.Text>\n                                        Note that prediction only applies to node pairs with specific node\n                                        types in k-partitie graph.\n                                    </Form.Text>\n                                </Col>\n                            ) : (\n                                <Col>\n                                    <Form.Text>Not applicable. No link prediction results loaded.</Form.Text>\n                                </Col>\n                            )}\n                        </Form.Row>\n\n                        <div style={{ marginBottom: \"20px\" }}></div>\n\n                        <div style={{ marginBottom: \"10px\" }}>\n                            Number of filtered node pairs: {nodePairs.length}\n                        </div>\n                        <Button\n                            // type=\"submit\"\n                            onClick={this.props.addDistanceScatterplot}\n                            disabled={!nodePairs.length}\n                        >\n                            Create\n                        </Button>\n                    </Form>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n\n    render() {\n        const {\n            hops,\n            distances,\n            nodePairFilter,\n            spec,\n            highlightDistVals,\n            hasFeatures,\n            activeTab,\n        } = this.props;\n        const { highlightedNodePairs } = this.props;\n        const { highlightNodePairs, changeParam } = this.props;\n        const { display, displaySpecial } = distances;\n        const { useLinearScale } = nodePairFilter;\n        const numFormat = format(\".2~s\");\n\n        const getScatterHistList = (isTopoVsLatent) => (\n            <div className=\"scatter-hist-list\">\n                {displaySpecial.concat(display).map((d, i) => (\n                    <div className=\"stuff-container\" key={i}>\n                        <div className=\"container-title\">\n                            {d.title} (#={d.src ? numFormat(d.src.length) : \"\"})\n                        </div>\n                        <div className=\"container-body\">\n                            {d.isComputing ? (\n                                <ComputingSpinner />\n                            ) : (\n                                <ScatterHistogram\n                                    data={d}\n                                    isTopoVsLatent={isTopoVsLatent}\n                                    hasHist={true}\n                                    useLinearScale={useLinearScale}\n                                    spec={spec}\n                                    xLabel=\"latent\"\n                                    yLabel={isTopoVsLatent ? \"topo\" : \"feature\"}\n                                    hVals={highlightDistVals}\n                                    brushedFunc={highlightNodePairs.bind(null, isTopoVsLatent, i)}\n                                    brushedArea={\n                                        isTopoVsLatent === nodePairFilter.isTopoVsLatent &&\n                                        nodePairFilter.which === i\n                                            ? nodePairFilter.brushedArea\n                                            : null\n                                    }\n                                />\n                            )}\n                        </div>\n                    </div>\n                ))}\n            </div>\n        );\n\n        return (\n            <div\n                className=\"view\"\n                id=\"distance-view\"\n                style={{\n                    width:\n                        displaySpecial.length + display.length > 2 || highlightedNodePairs.length > 0\n                            ? 580 \n                            : 420,\n                }}\n            >\n                <h5 className=\"view-title text-center\">\n                    {/* Distances in latent, topology, and feature spaces */}\n                    Distance Comparison\n                    <span style={{ marginLeft: \"5px\", cursor: \"pointer\" }}>\n                        <OverlayTrigger\n                            placement=\"right\"\n                            overlay={\n                                <Tooltip id=\"distance-view-tooltip\">\n                                    Topological distance of node pair = 1.0 - Jaccard Index of {hops}-hop\n                                    neighbor sets of two nodes. <br />\n                                    Latent distance of node pair = cosine distance of node embeddings. <br />\n                                    {hasFeatures && (\n                                        <div>\n                                            Feature distance = euclidean distance (scaled to [0,1]) of\n                                            (normalized) node feature vectors\n                                        </div>\n                                    )}\n                                    Luminance ~ #node pairs with specific distance values.\n                                </Tooltip>\n                            }\n                        >\n                            <FontAwesomeIcon icon={faQuestionCircle} />\n                        </OverlayTrigger>\n                    </span>\n                    <span\n                        className=\"right-btn\"\n                        onClick={this.props.changeScatterplotForm.bind(null, \"show\", true)}\n                    >\n                        <FontAwesomeIcon icon={faWrench} />\n                    </span>\n                </h5>\n                <div className=\"view-body\">\n                    <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-around\" }}>\n                        <div>\n                            {hasFeatures && (\n                                <Nav\n                                    variant=\"pills\"\n                                    activeKey={activeTab}\n                                    onSelect={(k) => {\n                                        changeParam(\"activeDistanceTab\", k);\n                                    }}\n                                >\n                                    <Nav.Item>\n                                        <Nav.Link eventKey=\"topo-vs-latent\">Topo vs. latent</Nav.Link>\n                                    </Nav.Item>\n                                    <Nav.Item>\n                                        <Nav.Link eventKey=\"feature-vs-latent\">Feature vs. latent</Nav.Link>\n                                    </Nav.Item>\n                                </Nav>\n                            )}\n\n                            {getScatterHistList(activeTab === \"topo-vs-latent\")}\n                        </div>\n                        {highlightedNodePairs.length > 0 && <NodePairList />}\n                    </div>\n                </div>\n\n                {this.renderCreateModal()}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    const emb = state.latent.emb;\n    const { neighborMasks, sparseFeatures, denseFeatures, nodes } = state.graph;\n    const { hoveredNodes, selectedNodes } = state;\n    const f = sparseFeatures || denseFeatures || null;\n\n    let highlightDistVals = null,\n        hx = null,\n        hy;\n    if (!state.distances.display[0].isComputing) {\n        if (!!hoveredNodes && hoveredNodes.length === 2) {\n            hx = hoveredNodes[0];\n            hy = hoveredNodes[1];\n        } else if (\n            selectedNodes.length === 2 &&\n            selectedNodes[0].length === 1 &&\n            selectedNodes[1].length === 1\n        ) {\n            hx = selectedNodes[0][0];\n            hy = selectedNodes[1][0];\n        }\n        if (hx !== null) {\n            highlightDistVals = [\n                getCosineDistance(emb[hx], emb[hy]),\n                getNeighborDistance(neighborMasks[hx], neighborMasks[hy], state.param.neighborDistanceMetric),\n                f && nodes[hx].typeId === nodes[hy].typeId\n                    ? state.distances.featureScale(getEuclideanDistance(f[hx], f[hy]))\n                    : null,\n            ];\n        }\n    }\n    return {\n        nodeTypes: state.graph.nodeTypes,\n        selectedNodes,\n        highlightedNodePairs: state.highlightedNodePairs,\n        highlightedNodes: state.highlightedNodes,\n        hasLinkPredictions: state.hasLinkPredictions,\n        highlightDistVals,\n        distances: state.distances,\n        spec: state.spec.scatterHist,\n        nodePairFilter: state.param.nodePairFilter,\n        hops: state.param.hops,\n        activeTab: state.param.activeDistanceTab,\n        formData: state.scatterplotForm,\n        hasFeatures: !!f,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators(\n        {\n            highlightNodePairs,\n            hoverNode,\n            changeParam,\n            changeScatterplotForm,\n            addDistanceScatterplot,\n        },\n        dispatch\n    );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DistanceView);\n","import React, { Component, useCallback, memo } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Form, Dropdown, OverlayTrigger, Tooltip, Modal } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCompressAlt, faExpandAlt, faWrench } from \"@fortawesome/free-solid-svg-icons\";\nimport { faQuestionCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport { scaleSequential, interpolateGreys, scaleSequentialLog } from \"d3\";\nimport debounce from \"lodash.debounce\";\nimport { Stage, Layer, Group, Rect } from \"react-konva\";\nimport ColorLegend from \"./ColorLegend\";\nimport { changeParam, hoverNode, highlightNodes } from \"../actions\";\n\nconst SettingModal = ({ params, changeParam }) => (\n    <Modal\n        show={params.showSettings}\n        centered\n        id=\"latent-neighbor-blocks-settings-modal\"\n        onHide={changeParam.bind(null, \"neighborLatentMap.showSettings\", false, null, null)}\n    >\n        <Modal.Header closeButton>\n            <Modal.Title>Settings for latent neighbor blocks</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <Form inline>\n                <Form.Label style={{ marginRight: \"5px\" }}>Choose scale type:</Form.Label>\n                <Form.Check\n                    inline\n                    label=\"linear\"\n                    type=\"radio\"\n                    id=\"scale-linear-nei\"\n                    checked={params.useLinearScale}\n                    onChange={changeParam.bind(null, \"neighborLatentMap.useLinearScale\", null, true, null)}\n                />\n                <Form.Check\n                    inline\n                    label=\"log10\"\n                    type=\"radio\"\n                    id=\"scale-log-nei\"\n                    checked={!params.useLinearScale}\n                    onChange={changeParam.bind(null, \"neighborLatentMap.useLinearScale\", null, true, null)}\n                />\n            </Form>\n        </Modal.Body>\n    </Modal>\n);\nexport class NeighborLatentMap extends Component {\n    render() {\n        const { changeParam, hoverNode, highlightNodes, param } = this.props;\n        const { isOpen, useLinearScale, hop } = param;\n        const { binsByHop, maxBinVals, granu, mapping } = this.props.data;\n        const { gap, cellSize } = this.props.spec;\n        const binData = binsByHop[hop - 1]; // TODO could be changed by user\n        const blockSize = cellSize * granu,\n            canvasSize = (blockSize + gap) * granu + gap;\n        let cntScale;\n        if (useLinearScale) {\n            cntScale = scaleSequential(interpolateGreys).domain([0, maxBinVals[hop - 1]]);\n        } else {\n            const getColorLogScale = (domainMax) => {\n                const s = scaleSequentialLog(interpolateGreys).domain([1, domainMax + 1]);\n                return (x) => s(x + 1);\n            };\n            cntScale = getColorLogScale(maxBinVals[hop - 1]);\n        }\n\n        const BlockRep = memo(({ block, x, y }) => {\n            // TODO potentiall buggy, should just change class component to function\n            const debouncedHover = useCallback(debounce((x) => hoverNode(x), 300));\n            return (\n                <Group\n                    onClick={highlightNodes.bind(null, mapping[x][y], null, \"neighbor-latent-map\", null)}\n                    onMouseOver={debouncedHover.bind(null, mapping[x][y])}\n                    onMouseOut={debouncedHover.bind(null, null)}\n                >\n                    {block.map((col, i) => (\n                        <Group key={i} x={cellSize * i} y={0}>\n                            {col.map((val, j) => (\n                                <Rect\n                                    key={j}\n                                    x={0}\n                                    y={cellSize * j}\n                                    width={cellSize}\n                                    height={cellSize}\n                                    strokeEnabled={i === x && j === y}\n                                    stroke=\"red\"\n                                    strokeWidth={1}\n                                    fill={cntScale(val)}\n                                />\n                            ))}\n                        </Group>\n                    ))}\n                </Group>\n            );\n        });\n\n        return (\n            <div className=\"view\" id=\"neighbor-latent-map\" style={{ width: canvasSize + 30 }}>\n                <h5 className=\"view-title\">\n                    <span\n                        className=\"left-btn\"\n                        onClick={changeParam.bind(null, \"neighborLatentMap.isOpen\", null, true, null)}\n                    >\n                        <FontAwesomeIcon icon={isOpen ? faCompressAlt : faExpandAlt} />\n                    </span>\n                    Latent Neighbor Blocks\n                    <span style={{ marginLeft: \"5px\", cursor: \"pointer\" }}>\n                        <OverlayTrigger\n                            placement=\"right\"\n                            overlay={\n                                <Tooltip id=\"neighbor-latent-map-tooltip\">\n                                    A block = the neighbor distribution of nodes located in an area of 2D\n                                    latent space. <br /> Luminance of a cell in a block = # their neighbors\n                                    located in that area of 2D latent space.\n                                </Tooltip>\n                            }\n                        >\n                            <FontAwesomeIcon icon={faQuestionCircle} />\n                        </OverlayTrigger>\n                    </span>\n                    <span\n                        className=\"right-btn\"\n                        onClick={changeParam.bind(null, \"neighborLatentMap.showSettings\", true, null, null)}\n                    >\n                        <FontAwesomeIcon icon={faWrench} />\n                    </span>\n                </h5>\n                <div className=\"view-body\" style={{ display: isOpen ? \"block\" : \"none\" }}>\n                    <Stage width={canvasSize} height={canvasSize}>\n                        <Layer x={gap} y={gap}>\n                            {binData.map((blockX, i) => (\n                                <Group key={i} x={(blockSize + gap) * i} y={0}>\n                                    {blockX.map((block, j) =>\n                                        mapping[i][j].length > 0 ? (\n                                            <Group key={j} x={0} y={(blockSize + gap) * j}>\n                                                {/* border of a block */}\n                                                <Rect\n                                                    x={0}\n                                                    y={0}\n                                                    width={blockSize}\n                                                    height={blockSize}\n                                                    fillEnabled={false}\n                                                    stroke=\"grey\"\n                                                    strokeWidth={0.5}\n                                                />\n                                                <BlockRep block={block} x={i} y={j} />\n                                            </Group>\n                                        ) : (\n                                            <Group key={j} />\n                                        )\n                                    )}\n                                </Group>\n                            ))}\n                        </Layer>\n                    </Stage>\n                    <div style={{ display: \"flex\", flexDirection: \"row\", marginTop: \"5px\" }}>\n                        <div style={{ marginRight: \"5px\" }}>\n                            <span style={{ marginRight: \"5px\" }}>#neighbors within </span>\n                            <div style={{ display: \"inline-block\" }}>\n                                <Dropdown\n                                    onSelect={(h) => {\n                                        changeParam(\"neighborLatentMap.hop\", parseInt(h), false);\n                                    }}\n                                >\n                                    <Dropdown.Toggle\n                                        id=\"hops-to-show-nei\"\n                                        size=\"xxs\"\n                                        variant=\"outline-secondary\"\n                                    >\n                                        {hop}\n                                    </Dropdown.Toggle>\n\n                                    <Dropdown.Menu>\n                                        {new Array(this.props.hops).fill(0).map((_, i) => (\n                                            <Dropdown.Item key={i} eventKey={i + 1} active={hop === i + 1}>\n                                                {i + 1}\n                                            </Dropdown.Item>\n                                        ))}\n                                    </Dropdown.Menu>\n                                </Dropdown>\n                            </div>\n                            <span style={{ marginLeft: \"5px\" }}>hops: </span>\n                        </div>\n                        <ColorLegend scale={cntScale} domain={[0, maxBinVals[hop - 1]]} />\n                    </div>\n                </div>\n\n                <SettingModal params={param} changeParam={changeParam} />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    data: state.latent.neighborPos,\n    spec: state.spec.neighborLatentMap,\n    param: state.param.neighborLatentMap,\n    hops: state.param.hops,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators({ changeParam, hoverNode, highlightNodes }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NeighborLatentMap);\n","export default function SVGdefs() {\n    return (\n        <svg>\n            <defs>\n                <marker\n                    id=\"axis-arrow-head\"\n                    orient=\"auto\"\n                    markerWidth=\"4\"\n                    markerHeight=\"8\"\n                    refX=\"0.1\"\n                    refY=\"4\"\n                >\n                    <path d=\"M0,0 V8 L4,4 Z\" fill=\"black\" />\n                </marker>\n            </defs>\n        </svg>\n    );\n}\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withRouter } from \"react-router-dom\";\nimport { fetchGraphData } from \"../actions\";\nimport AppNav from \"./AppNav\";\nimport InitialLayoutView from \"./InitialLayoutView\";\nimport FocalLayoutView from \"./FocalLayoutView\";\nimport EmbeddingsView from \"./EmbeddingsView\";\n// import PowerSetIntersectionView from \"./PowerSetIntersectionView\";\nimport DetailView from \"./DetailView\";\n// import AdjacencyMatrix from \"./AdjacencyMatrix\";\nimport NodeAttrView from \"./NodeAttrView\";\nimport HighlightControl from \"./HighlightControl\";\nimport FocusControl from \"./FocusControl\";\nimport SettingsView from \"./SettingsView\";\nimport DistanceView from \"./DistanceView\";\nimport NeighborLatentMap from \"./NeighborLatentMap\";\nimport SVGdefs from \"./SVGdefs\";\nimport \"./App.css\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.appRef = React.createRef();\n        this.leftColRef = React.createRef();\n        this.state = { rightWidth: null };\n        this.bindedUpdate = this.updateDimensions.bind(this);\n    }\n    updateDimensions() {\n        if (this.props.loaded) {\n            const bboxParent = this.appRef.current.getBoundingClientRect(),\n                bboxLeft = this.leftColRef.current.getBoundingClientRect();\n            // const bboxLeft = 640;\n            this.setState({ rightWidth: bboxParent.width - bboxLeft.width - 10 });\n        }\n    }\n    componentDidMount() {\n        const { datasetId } = this.props.match.params;\n        window.addEventListener(\"resize\", this.bindedUpdate);\n        this.props.fetchGraphData(datasetId);\n    }\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.bindedUpdate);\n    }\n    componentDidUpdate() {\n        if (this.props.loaded && !this.state.rightWidth) {\n            this.updateDimensions();\n        }\n    }\n\n    render() {\n        if (!this.props.loaded) {\n            return (\n                <div className=\"App\">\n                    <h3>Loading data...</h3>\n                    {this.props.error && <p>{this.props.error}</p>}\n                </div>\n            );\n        }\n        const { numNodes, numEdges, datasetId, datasetName, hasNodeFeatures, neighborMapOpen } = this.props;\n        const { rightWidth } = this.state;\n\n        const interactionViews = (\n            <div>\n                <SettingsView />\n                <FocusControl />\n            </div>\n        );\n\n        return (\n            <div>\n                <AppNav datasetName={datasetName ? datasetName : datasetId} stats={{ numNodes, numEdges }} />\n\n                <HighlightControl />\n                <div className=\"App\" ref={this.appRef}>\n                    <div ref={this.leftColRef} style={{ flexShrink: 1 }}>\n                        {neighborMapOpen ? (\n                            <div\n                                style={{\n                                    display: \"flex\",\n                                    flexDirection: \"row\",\n                                    justifyContent: \"flex-end\",\n                                    alignItems: \"stretch\",\n                                }}\n                            >\n                                <EmbeddingsView />\n                                <NeighborLatentMap />\n                            </div>\n                        ) : (\n                            <div\n                                style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"flex-end\" }}\n                            >\n                                {interactionViews}\n                                <div>\n                                    <EmbeddingsView />\n                                    <NeighborLatentMap />\n                                </div>\n                            </div>\n                        )}\n                        <div\n                            style={{\n                                display: \"flex\",\n                                flexDirection: \"row\",\n                                justifyContent: \"flex-end\",\n                                alignItems: \"flex-start\",\n                            }}\n                        >\n                            {neighborMapOpen && interactionViews}\n                            <DistanceView />\n                        </div>\n                    </div>\n                    <div style={{ maxWidth: rightWidth ? rightWidth + \"px\" : \"auto\", flexGrow: 2 }}>\n                        {hasNodeFeatures && <NodeAttrView />}\n                        <div\n                            style={{\n                                display: \"flex\",\n                                flexDirection: \"row\",\n                                justifyContent: \"flex-start\",\n                                alignItems: \"flex-start\",\n                                flexWrap: \"wrap\",\n                            }}\n                        >\n                            <FocalLayoutView />\n                            <InitialLayoutView />\n                        </div>\n                    </div>\n                </div>\n                <SVGdefs />\n                <DetailView />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    datasetId: state.datasetId,\n    datasetName: state.datasetName,\n    loaded: state.loaded,\n    numNodes: state.loaded ? state.graph.nodes.length : 0,\n    numEdges: state.loaded ? state.graph.edges.length : 0,\n    hasNodeFeatures: state.loaded && (state.nodeAttrs.active || state.featureAgg.active),\n    neighborMapOpen: state.param.neighborLatentMap.isOpen,\n    error: state.error,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators(\n        {\n            fetchGraphData,\n        },\n        dispatch\n    );\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(App));\n","import React, { Component } from \"react\";\nimport { Table, Container, Row, Col } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport AppNav from \"./AppNav\";\nimport datasets from \"../datasets\";\n\nexport default class DatasetList extends Component {\n    render() {\n        return (\n            <div>\n                <AppNav />\n                <Container>\n                    <Row>\n                        <h3 style={{ marginTop: \"10px\" }}>\n                            A visualization tool for graph neural networks. See{\" \"}\n                            <a href=\"http://www.cs.ubc.ca/labs/imager/tr/2021/corgie/\"> HERE </a> for the\n                            paper.\n                        </h3>\n                    </Row>\n\n                    <Row>\n                        <div\n                            style={{\n                                position: \"relative\",\n                                overflow: \"hidden\",\n                                width: \"100%\",\n                                paddingTop: \"45.23%\",\n                            }}\n                        >\n                            <iframe\n                                style={{\n                                    width: \"100%\",\n                                    height: \"100%\",\n                                    position: \"absolute\",\n                                    top: 0,\n                                    left: 0,\n                                    bottom: 0,\n                                    right: 0,\n                                }}\n                                src=\"https://www.youtube.com/embed/sQMF50aNtKI\"\n                                title=\"YouTube video player\"\n                                frameborder=\"0\"\n                                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                                allowfullscreen\n                            ></iframe>\n                        </div>\n                    </Row>\n\n                    <Row>\n                        <div style={{ fontSize: \"large\", margin: \"20px 0\" }}>\n                            You can try CorGIE on the following datasets now. <br /> We will provide the code\n                            and detailed instructions about how to install it locally and how to preprocess\n                            your own dataset.\n                        </div>\n                    </Row>\n\n                    <Row>\n                        <Table striped hover bordered>\n                            <thead>\n                                <tr>\n                                    <th> # </th>\n                                    <th> Name </th>\n                                    <th> Source </th>\n                                    <th> #Nodes </th>\n                                    <th> #Edges </th>\n                                    <th> #Node types </th>\n                                    <th> Node features </th>\n                                    <th> #Hops </th>\n                                    <th> Notes </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {datasets.map((d, i) => (\n                                    <tr key={i}>\n                                        <td> {i + 1} </td>\n                                        <td>\n                                            <Link to={`/${d.id}`}> {d.name} </Link>\n                                        </td>\n                                        <td> {d.source} </td>\n                                        <td className=\"cell-num\"> {d.numNodes} </td>\n                                        <td className=\"cell-num\"> {d.numEdges} </td>\n                                        <td className=\"cell-num\"> {d.numTypes} </td>\n                                        <td> {d.nodeFeatures} </td>\n                                        <td className=\"cell-num\"> {d.hops} </td>\n                                        <td> {d.desc} </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n","import \"whatwg-fetch\";\nimport React, { Component } from \"react\";\nimport { Button, Container, Row, Col, Table, Alert, Modal } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport AppNav from \"./AppNav\";\n\nfunction humanFileSize(size) {\n    var i = Math.floor(Math.log(size) / Math.log(1024));\n    return (size / Math.pow(1024, i)).toFixed(2) * 1 + \" \" + [\"B\", \"kB\", \"MB\", \"GB\", \"TB\"][i];\n}\n\nconst CORGIE_URL = \"http://localhost:3000\";\nconst UPLOAD_URL = \"http://localhost:8787/upload\";\nconst STATUS_URL = \"http://localhost:8787/status\";\nconst required = {\n    name: \"dataset name\",\n    hops: \"#hops\",\n    graph: \"input graph file\",\n    embedding: \"node embedding file\",\n};\n\nfunction UploadModal({ datasetId, done }) {\n    return (\n        <Modal show backdrop=\"static\" size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" centered>\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    {done ? \"Success\" : \"In progress\"}\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div>\n                    <p>Dataset ID: {datasetId}.</p>\n                    <p>Dataset URL: {CORGIE_URL + \"/\" + datasetId}</p>\n                    <p>This ID (or URL) is the only access to your dataset. Please save it.</p>\n                    {done && (\n                        <Button variant=\"primary\">\n                            <Link to={`/${datasetId}`}>Go</Link>\n                        </Button>\n                    )}\n                </div>\n            </Modal.Body>\n        </Modal>\n    );\n}\n\nexport default class Upload extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            datasetId: null,\n            uploading: false,\n            status: null,\n            missingRequired: null,\n\n            form: {\n                name: null,\n                hops: null,\n                graph: null,\n                features: null,\n                featureMeta: null,\n                embedding: null,\n                umap: null,\n                predRes: null,\n            },\n        };\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleFileChange = this.handleFileChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState((prevState) => ({\n            form: { ...prevState.form, [event.target.name]: event.target.value },\n        }));\n    }\n    handleFileChange(event) {\n        this.setState((prevState) => ({\n            form: { ...prevState.form, [event.target.name]: event.target.files[0] },\n        }));\n    }\n\n    missingRequired() {\n        for (let x in required)\n            if (required.hasOwnProperty(x)) {\n                if (!this.state.form.hasOwnProperty(x) || this.state.form[x] === null) {\n                    return required[x];\n                }\n            }\n        return false;\n    }\n    handleSubmit(event) {\n        // Upload the data to server\n        console.log(\"submit\");\n        console.log(this.state);\n\n        const missing = this.missingRequired();\n        if (missing) {\n            this.setState({ missingRequired: missing });\n        } else {\n            this.setState({ uploading: true, missingRequired: null, status: 0 });\n\n            const stateForm = this.state.form;\n            const f = new FormData();\n            for (let x in stateForm)\n                if (stateForm.hasOwnProperty(x) && stateForm[x] !== null) {\n                    f.append(x, stateForm[x]);\n                }\n\n            fetch(UPLOAD_URL, {\n                method: \"POST\",\n                mode: \"cors\",\n                body: f,\n            })\n                .then((response) => response.text())\n                .then((datasetId) => {\n                    console.log(\"File transfer succeeded.  Dastaset ID: \", datasetId);\n                    this.setState({ datasetId });\n\n                    let that = this;\n                    const polling = setInterval(() => {\n                        fetch(STATUS_URL + \"?\" + new URLSearchParams({ id: datasetId }))\n                            .then((r) => r.text())\n                            .then((s) => {\n                                if (s === \"1\") {\n                                    clearInterval(polling);\n                                    that.setState({ status: 1 });\n                                }\n                            })\n                            .catch(() => {\n                                console.error(\"Check status error!\");\n                            });\n                    }, 500);\n                })\n                .catch(() => {\n                    console.error(\"Post data error!\");\n                });\n        }\n        event.preventDefault();\n    }\n\n    fileInputComp(name) {\n        return (\n            <div>\n                <input type=\"file\" name={name} onChange={this.handleFileChange} />\n                {this.state.form[name] && <div>{humanFileSize(this.state.form[name].size)}</div>}\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <AppNav />\n                <Container>\n                    <Row>\n                        <Col>\n                            <h3 style={{ marginTop: \"10px\" }}>Upload your own datasets</h3>\n                            <div>\n                                You can upload the input and output of a GNN training session to CorGIE. Once\n                                the preprocessing is finished, you will be provided with a{\" \"}\n                                <strong>dataset ID</strong>, which is the <strong>only access token </strong>\n                                for this dataset.\n                            </div>\n                            <div>Note: your datasets are stored on our server unless you remove them.</div>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col>\n                            <h5 style={{ marginTop: \"10px\" }}>Dataset files</h5>\n                        </Col>\n                    </Row>\n\n                    <Row>\n                        <Col>\n                            <div>\n                                You can download two sample datasets for reference on the right column below.\n                            </div>\n                        </Col>\n                    </Row>\n\n                    <div style={{ marginTop: \"10px\" }}></div>\n\n                    <Row>\n                        <Col md={2}>\n                            <Button variant=\"primary\" onClick={this.handleSubmit}>\n                                Submit\n                            </Button>\n                        </Col>\n                        {this.state.missingRequired && (\n                            <Col>\n                                <Alert variant=\"danger\">\n                                    Missing {this.state.missingRequired}. Please fill it in and re-submit.\n                                </Alert>\n                            </Col>\n                        )}\n                    </Row>\n\n                    <div style={{ marginTop: \"10px\" }}></div>\n\n                    <Table bordered hover>\n                        <thead>\n                            <tr>\n                                <th>Type</th>\n                                <th>Required</th>\n                                <th style={{ minWidth: \"300px\" }}>File description</th>\n                                <th>Input</th>\n                                <th>Sample: movie</th>\n                                <th>Sample: Cora</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td></td>\n                                <td>\n                                    <FontAwesomeIcon icon={faCheckCircle} />\n                                </td>\n                                <td>Dataset name</td>\n                                <td>\n                                    <input type=\"text\" name=\"name\" onChange={this.handleChange} />\n                                </td>\n                                <td>bipartite-user-movie-medium-1</td>\n                                <td>cora-gat</td>\n                            </tr>\n                            <tr>\n                                <td rowSpan={3}>GNN input</td>\n                                <td>\n                                    <FontAwesomeIcon icon={faCheckCircle} />\n                                </td>\n                                <td>\n                                    Input graph: a{\" \"}\n                                    <strong>\n                                        <a href=\"https://networkx.org/\">NetworkX</a> json{\" \"}\n                                    </strong>{\" \"}\n                                    file describing the nodes, link, and optionally, dense node features in\n                                    the input graph. See{\" \"}\n                                    <a href=\"https://networkx.org/documentation/stable/reference/convert.html\">\n                                        here\n                                    </a>{\" \"}\n                                    for format conversion.\n                                </td>\n                                <td>{this.fileInputComp(\"graph\")}</td>\n                                <td>\n                                    <Link\n                                        to=\"/data/bipartite-user-movie-medium-1/graph.json\"\n                                        target=\"_blank\"\n                                        download\n                                    >\n                                        graph.json\n                                    </Link>\n                                </td>\n                                <td>\n                                    <Link to=\"/data/cora-gat/graph.json\" target=\"_blank\" download>\n                                        graph.json\n                                    </Link>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td></td>\n                                <td>\n                                    Meta data for dense node features: description of each dense node feature\n                                    (e.g. budget of a movie) in <strong>json</strong> format.\n                                </td>\n                                <td>{this.fileInputComp(\"featureMeta\")}</td>\n                                <td>\n                                    <Link\n                                        to=\"/data/bipartite-user-movie-medium-1/attr-meta.json\"\n                                        target=\"_blank\"\n                                        download\n                                    >\n                                        feature-meta.json\n                                    </Link>\n                                </td>\n                                <td>NA</td>\n                            </tr>\n                            <tr>\n                                <td></td>\n                                <td>\n                                    Sparse node features: node feature vectors (e.g. word frequencies in Cora)\n                                    in <strong>csv</strong> format.\n                                </td>\n                                <td>{this.fileInputComp(\"features\")}</td>\n                                <td>NA</td>\n                                <td>\n                                    <Link to=\"/data/cora-gat/features.csv\" target=\"_blank\" download>\n                                        features.csv\n                                    </Link>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan={6}></td>\n                            </tr>\n                            <tr>\n                                <td>GNN model</td>\n                                <td>\n                                    <FontAwesomeIcon icon={faCheckCircle} />\n                                </td>\n                                <td># Hops: the number of aggregation layer in your GNN</td>\n                                <td>\n                                    <input type=\"text\" name=\"hops\" onChange={this.handleChange} />\n                                </td>\n                                <td>2</td>\n                                <td>2</td>\n                            </tr>\n                            <tr>\n                                <td colSpan={6}></td>\n                            </tr>\n\n                            <tr>\n                                <td rowSpan={3}>GNN output</td>\n                                <td>\n                                    <FontAwesomeIcon icon={faCheckCircle} />\n                                </td>\n                                <td>\n                                    Node embedding: embedding vectors in <strong>csv</strong> format\n                                </td>\n                                <td>{this.fileInputComp(\"embedding\")}</td>\n                                <td>\n                                    <Link\n                                        to=\"/data/bipartite-user-movie-medium-1/node-embeddings.csv\"\n                                        target=\"_blank\"\n                                        download\n                                    >\n                                        embedding.csv\n                                    </Link>\n                                </td>\n                                <td>\n                                    <Link to=\"/data/cora-gat/node-embeddings.csv\" target=\"_blank\" download>\n                                        embedding.csv\n                                    </Link>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td></td>\n                                <td>\n                                    Node embedding in 2D: dimensionally reduced (e.g. UMAP, t-SNE) embedding\n                                    vector in vector in <strong>csv</strong> format. We compute it in the\n                                    pre-processor if not provided.\n                                </td>\n                                <td>{this.fileInputComp(\"umap\")}</td>\n                                <td>\n                                    <Link\n                                        to=\"/data/bipartite-user-movie-medium-1/umap.csv\"\n                                        target=\"_blank\"\n                                        download\n                                    >\n                                        emb2d.csv\n                                    </Link>\n                                </td>\n                                <td>\n                                    <Link to=\"/data/cora-gat/umap.csv\" target=\"_blank\" download>\n                                        emb2d.csv\n                                    </Link>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td></td>\n                                <td>\n                                    Prediction results in <strong>json</strong> format.\n                                    <div>\n                                        For node classification task: predicted and true class of each node.\n                                        <div>\n                                            <small>\n                                                &#123; predLabels: [], trueLabels: [], numClasses: x &#125;\n                                            </small>\n                                        </div>\n                                    </div>\n                                    <div>\n                                        For link prediction task: presented edges that are predicted as true\n                                        by the model (true allow edges), presented edges that are presented as\n                                        false by the model (false allow edges), and recommended edges that are\n                                        not presented in the input graph (true unseen edges), sorted by a\n                                        recommendation score.\n                                        <div>\n                                            <small>\n                                                &#123; isLinkPrediction: true, trueAllowEdges: [node pair\n                                                array], falseAllowEdges: [node pair array]\n                                                trueUnseenEdgesSorted: &#123; node id x: [node list sorted by\n                                                their similarty score with x] &#125; &#125;\n                                            </small>\n                                        </div>\n                                    </div>\n                                </td>\n                                <td>{this.fileInputComp(\"predRes\")}</td>\n                                <td>\n                                    <Link\n                                        to=\"/data/bipartite-user-movie-medium-1/prediction-results.json\"\n                                        target=\"_blank\"\n                                        download\n                                    >\n                                        pred-res.json\n                                    </Link>\n                                </td>\n                                <td>\n                                    <Link\n                                        to=\"/data/cora-gat/prediction-results.json\"\n                                        target=\"_blank\"\n                                        download\n                                    >\n                                        pred-res.json\n                                    </Link>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                </Container>\n                {this.state.uploading && this.state.datasetId && (\n                    <UploadModal datasetId={this.state.datasetId} done={this.state.status === 1} />\n                )}\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport rootReducer from \"./reducers\";\nimport App from \"./components/App\";\nimport DatasetList from \"./components/DatasetList\";\nimport Upload from \"./components/Upload\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport thunk from \"redux-thunk\";\nimport createLogger from \"redux-logger\";\n\nconsole.log(\"Starting application...\");\n\nconst store = createStore(rootReducer, applyMiddleware(thunk, createLogger));\n\nrender(\n    <Provider store={store}>\n        <Router>\n            <Switch>\n                <Route path=\"/upload\">\n                    <Upload />\n                </Route>\n                <Route path=\"/:datasetId\">\n                    <App />\n                </Route>\n                <Route path=\"/\">\n                    <DatasetList />\n                </Route>\n            </Switch>\n        </Router>\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}